/*
#############################################################################################
# Nether (BETA Patch #7 (64-bit, DX9)) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51->custom
# ========================================================================================= #
# File: NetherGame_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL, kokole (64-bit port)
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function NetherGame.NetherDayNightCycleManager.SetKismetTime
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ANetherDayNightCycleManager::SetKismetTime ( )
{
	static UFunction* pFnSetKismetTime = NULL;

	if ( ! pFnSetKismetTime )
		pFnSetKismetTime = (UFunction*) UObject::GObjObjects()->Data[ 73664 ];

	ANetherDayNightCycleManager_execSetKismetTime_Parms SetKismetTime_Parms;

	this->ProcessEvent ( pFnSetKismetTime, &SetKismetTime_Parms, NULL );
};

// Function NetherGame.NetherDayNightCycleManager.ClientUpdateWorldTime
// [0x010401C3] ( FUNC_Final )
// Parameters infos:
// float                          InWorldTime                    ( CPF_Parm )

void ANetherDayNightCycleManager::ClientUpdateWorldTime ( float InWorldTime )
{
	static UFunction* pFnClientUpdateWorldTime = NULL;

	if ( ! pFnClientUpdateWorldTime )
		pFnClientUpdateWorldTime = (UFunction*) UObject::GObjObjects()->Data[ 73662 ];

	ANetherDayNightCycleManager_execClientUpdateWorldTime_Parms ClientUpdateWorldTime_Parms;
	ClientUpdateWorldTime_Parms.InWorldTime = InWorldTime;

	this->ProcessEvent ( pFnClientUpdateWorldTime, &ClientUpdateWorldTime_Parms, NULL );
};

// Function NetherGame.NetherDayNightCycleManager.OnTODChanged
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ANetherDayNightCycleManager::OnTODChanged ( )
{
	static UFunction* pFnOnTODChanged = NULL;

	if ( ! pFnOnTODChanged )
		pFnOnTODChanged = (UFunction*) UObject::GObjObjects()->Data[ 73658 ];

	ANetherDayNightCycleManager_execOnTODChanged_Parms OnTODChanged_Parms;

	this->ProcessEvent ( pFnOnTODChanged, &OnTODChanged_Parms, NULL );
};

// Function NetherGame.NetherDayNightCycleManager.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherDayNightCycleManager::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 73660 ];

	ANetherDayNightCycleManager_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherDayNightCycleManager.PickDay
// [0x00020002] 
// Parameters infos:

void ANetherDayNightCycleManager::PickDay ( )
{
	static UFunction* pFnPickDay = NULL;

	if ( ! pFnPickDay )
		pFnPickDay = (UFunction*) UObject::GObjObjects()->Data[ 73659 ];

	ANetherDayNightCycleManager_execPickDay_Parms PickDay_Parms;

	this->ProcessEvent ( pFnPickDay, &PickDay_Parms, NULL );
};

// Function NetherGame.NetherDayNightCycleManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANetherDayNightCycleManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 73657 ];

	ANetherDayNightCycleManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherEngine.FormatTime
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Seconds                        ( CPF_Parm )

struct FString UNetherEngine::FormatTime ( int Seconds )
{
	static UFunction* pFnFormatTime = NULL;

	if ( ! pFnFormatTime )
		pFnFormatTime = (UFunction*) UObject::GObjObjects()->Data[ 70205 ];

	UNetherEngine_execFormatTime_Parms FormatTime_Parms;
	FormatTime_Parms.Seconds = Seconds;

	this->ProcessEvent ( pFnFormatTime, &FormatTime_Parms, NULL );

	return FormatTime_Parms.ReturnValue;
};

// Function NetherGame.NetherEngine.MapFinishedLoading
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNetherEngine::eventMapFinishedLoading ( )
{
	static UFunction* pFnMapFinishedLoading = NULL;

	if ( ! pFnMapFinishedLoading )
		pFnMapFinishedLoading = (UFunction*) UObject::GObjObjects()->Data[ 73684 ];

	UNetherEngine_eventMapFinishedLoading_Parms MapFinishedLoading_Parms;

	this->ProcessEvent ( pFnMapFinishedLoading, &MapFinishedLoading_Parms, NULL );
};

// Function NetherGame.NetherHUD.KeyDown
// [0x00020002] 
// Parameters infos:
// int                            KeyCode                        ( CPF_Parm )

void ANetherHUD::KeyDown ( int KeyCode )
{
	static UFunction* pFnKeyDown = NULL;

	if ( ! pFnKeyDown )
		pFnKeyDown = (UFunction*) UObject::GObjObjects()->Data[ 74204 ];

	ANetherHUD_execKeyDown_Parms KeyDown_Parms;
	KeyDown_Parms.KeyCode = KeyCode;

	this->ProcessEvent ( pFnKeyDown, &KeyDown_Parms, NULL );
};

// Function NetherGame.NetherHUD.MouseWheel
// [0x00020002] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void ANetherHUD::MouseWheel ( int Delta )
{
	static UFunction* pFnMouseWheel = NULL;

	if ( ! pFnMouseWheel )
		pFnMouseWheel = (UFunction*) UObject::GObjObjects()->Data[ 74202 ];

	ANetherHUD_execMouseWheel_Parms MouseWheel_Parms;
	MouseWheel_Parms.Delta = Delta;

	this->ProcessEvent ( pFnMouseWheel, &MouseWheel_Parms, NULL );
};

// Function NetherGame.NetherHUD.RightMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ANetherHUD::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 74199 ];

	ANetherHUD_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.NetherHUD.RightMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ANetherHUD::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 74196 ];

	ANetherHUD_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.NetherHUD.LeftMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ANetherHUD::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 74193 ];

	ANetherHUD_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.NetherHUD.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ANetherHUD::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 74190 ];

	ANetherHUD_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherHUD.MouseMoved
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ANetherHUD::MouseMoved ( float X, float Y )
{
	static UFunction* pFnMouseMoved = NULL;

	if ( ! pFnMouseMoved )
		pFnMouseMoved = (UFunction*) UObject::GObjObjects()->Data[ 74187 ];

	ANetherHUD_execMouseMoved_Parms MouseMoved_Parms;
	MouseMoved_Parms.X = X;
	MouseMoved_Parms.Y = Y;

	this->ProcessEvent ( pFnMouseMoved, &MouseMoved_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_SetHeaderStyle
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            FontSize                       ( CPF_Parm )
// struct FString                 Align                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            FontColor                      ( CPF_Parm )

void ANetherHUD::AS_SetHeaderStyle ( int FontSize, struct FString Align, int FontColor )
{
	static UFunction* pFnAS_SetHeaderStyle = NULL;

	if ( ! pFnAS_SetHeaderStyle )
		pFnAS_SetHeaderStyle = (UFunction*) UObject::GObjObjects()->Data[ 74013 ];

	ANetherHUD_execAS_SetHeaderStyle_Parms AS_SetHeaderStyle_Parms;
	AS_SetHeaderStyle_Parms.FontSize = FontSize;
	memcpy ( &AS_SetHeaderStyle_Parms.Align, &Align, 0x10 );
	AS_SetHeaderStyle_Parms.FontColor = FontColor;

	this->ProcessEvent ( pFnAS_SetHeaderStyle, &AS_SetHeaderStyle_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_PlayQuickSlotUseAnimation
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )

void ANetherHUD::AS_PlayQuickSlotUseAnimation ( int SlotIndex )
{
	static UFunction* pFnAS_PlayQuickSlotUseAnimation = NULL;

	if ( ! pFnAS_PlayQuickSlotUseAnimation )
		pFnAS_PlayQuickSlotUseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 74101 ];

	ANetherHUD_execAS_PlayQuickSlotUseAnimation_Parms AS_PlayQuickSlotUseAnimation_Parms;
	AS_PlayQuickSlotUseAnimation_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnAS_PlayQuickSlotUseAnimation, &AS_PlayQuickSlotUseAnimation_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_HideQuickSlots
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ANetherHUD::AS_HideQuickSlots ( )
{
	static UFunction* pFnAS_HideQuickSlots = NULL;

	if ( ! pFnAS_HideQuickSlots )
		pFnAS_HideQuickSlots = (UFunction*) UObject::GObjObjects()->Data[ 74053 ];

	ANetherHUD_execAS_HideQuickSlots_Parms AS_HideQuickSlots_Parms;

	this->ProcessEvent ( pFnAS_HideQuickSlots, &AS_HideQuickSlots_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_ShowQuickSlots
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ANetherHUD::AS_ShowQuickSlots ( )
{
	static UFunction* pFnAS_ShowQuickSlots = NULL;

	if ( ! pFnAS_ShowQuickSlots )
		pFnAS_ShowQuickSlots = (UFunction*) UObject::GObjObjects()->Data[ 74051 ];

	ANetherHUD_execAS_ShowQuickSlots_Parms AS_ShowQuickSlots_Parms;

	this->ProcessEvent ( pFnAS_ShowQuickSlots, &AS_ShowQuickSlots_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_UpdateQuickSlotHudIcon
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )
// int                            ItemId                         ( CPF_Parm )
// int                            ItemCount                      ( CPF_Parm )

void ANetherHUD::AS_UpdateQuickSlotHudIcon ( int SlotIndex, int ItemId, int ItemCount )
{
	static UFunction* pFnAS_UpdateQuickSlotHudIcon = NULL;

	if ( ! pFnAS_UpdateQuickSlotHudIcon )
		pFnAS_UpdateQuickSlotHudIcon = (UFunction*) UObject::GObjObjects()->Data[ 74040 ];

	ANetherHUD_execAS_UpdateQuickSlotHudIcon_Parms AS_UpdateQuickSlotHudIcon_Parms;
	AS_UpdateQuickSlotHudIcon_Parms.SlotIndex = SlotIndex;
	AS_UpdateQuickSlotHudIcon_Parms.ItemId = ItemId;
	AS_UpdateQuickSlotHudIcon_Parms.ItemCount = ItemCount;

	this->ProcessEvent ( pFnAS_UpdateQuickSlotHudIcon, &AS_UpdateQuickSlotHudIcon_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_SetHealth
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            currentHealth                  ( CPF_Parm )
// int                            maxHealth                      ( CPF_Parm )

void ANetherHUD::AS_SetHealth ( int currentHealth, int maxHealth )
{
	static UFunction* pFnAS_SetHealth = NULL;

	if ( ! pFnAS_SetHealth )
		pFnAS_SetHealth = (UFunction*) UObject::GObjObjects()->Data[ 74177 ];

	ANetherHUD_execAS_SetHealth_Parms AS_SetHealth_Parms;
	AS_SetHealth_Parms.currentHealth = currentHealth;
	AS_SetHealth_Parms.maxHealth = maxHealth;

	this->ProcessEvent ( pFnAS_SetHealth, &AS_SetHealth_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_RotateMiniMap
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// float                          Angle                          ( CPF_Parm )

void ANetherHUD::AS_RotateMiniMap ( float Angle )
{
	static UFunction* pFnAS_RotateMiniMap = NULL;

	if ( ! pFnAS_RotateMiniMap )
		pFnAS_RotateMiniMap = (UFunction*) UObject::GObjObjects()->Data[ 74175 ];

	ANetherHUD_execAS_RotateMiniMap_Parms AS_RotateMiniMap_Parms;
	AS_RotateMiniMap_Parms.Angle = Angle;

	this->ProcessEvent ( pFnAS_RotateMiniMap, &AS_RotateMiniMap_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_SetStaminaBar
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// float                          Percent                        ( CPF_Parm )

void ANetherHUD::AS_SetStaminaBar ( float Percent )
{
	static UFunction* pFnAS_SetStaminaBar = NULL;

	if ( ! pFnAS_SetStaminaBar )
		pFnAS_SetStaminaBar = (UFunction*) UObject::GObjObjects()->Data[ 74086 ];

	ANetherHUD_execAS_SetStaminaBar_Parms AS_SetStaminaBar_Parms;
	AS_SetStaminaBar_Parms.Percent = Percent;

	this->ProcessEvent ( pFnAS_SetStaminaBar, &AS_SetStaminaBar_Parms, NULL );
};

// Function NetherGame.NetherHUD.AS_SetHungerBar
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// float                          Percent                        ( CPF_Parm )

void ANetherHUD::AS_SetHungerBar ( float Percent )
{
	static UFunction* pFnAS_SetHungerBar = NULL;

	if ( ! pFnAS_SetHungerBar )
		pFnAS_SetHungerBar = (UFunction*) UObject::GObjObjects()->Data[ 74068 ];

	ANetherHUD_execAS_SetHungerBar_Parms AS_SetHungerBar_Parms;
	AS_SetHungerBar_Parms.Percent = Percent;

	this->ProcessEvent ( pFnAS_SetHungerBar, &AS_SetHungerBar_Parms, NULL );
};

// Function NetherGame.NetherHUD.GetHideChatMessages
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherHUD::GetHideChatMessages ( )
{
	static UFunction* pFnGetHideChatMessages = NULL;

	if ( ! pFnGetHideChatMessages )
		pFnGetHideChatMessages = (UFunction*) UObject::GObjObjects()->Data[ 74171 ];

	ANetherHUD_execGetHideChatMessages_Parms GetHideChatMessages_Parms;

	this->ProcessEvent ( pFnGetHideChatMessages, &GetHideChatMessages_Parms, NULL );

	return GetHideChatMessages_Parms.ReturnValue;
};

// Function NetherGame.NetherHUD.ToggleHideChatMessages
// [0x00020002] 
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void ANetherHUD::ToggleHideChatMessages ( unsigned long bValue )
{
	static UFunction* pFnToggleHideChatMessages = NULL;

	if ( ! pFnToggleHideChatMessages )
		pFnToggleHideChatMessages = (UFunction*) UObject::GObjObjects()->Data[ 74169 ];

	ANetherHUD_execToggleHideChatMessages_Parms ToggleHideChatMessages_Parms;
	ToggleHideChatMessages_Parms.bValue = bValue;

	this->ProcessEvent ( pFnToggleHideChatMessages, &ToggleHideChatMessages_Parms, NULL );
};

// Function NetherGame.NetherHUD.GetShowChatForNewMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherHUD::GetShowChatForNewMessage ( )
{
	static UFunction* pFnGetShowChatForNewMessage = NULL;

	if ( ! pFnGetShowChatForNewMessage )
		pFnGetShowChatForNewMessage = (UFunction*) UObject::GObjObjects()->Data[ 74167 ];

	ANetherHUD_execGetShowChatForNewMessage_Parms GetShowChatForNewMessage_Parms;

	this->ProcessEvent ( pFnGetShowChatForNewMessage, &GetShowChatForNewMessage_Parms, NULL );

	return GetShowChatForNewMessage_Parms.ReturnValue;
};

// Function NetherGame.NetherHUD.ToggleShowChatForNewMessage
// [0x00020002] 
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void ANetherHUD::ToggleShowChatForNewMessage ( unsigned long bValue )
{
	static UFunction* pFnToggleShowChatForNewMessage = NULL;

	if ( ! pFnToggleShowChatForNewMessage )
		pFnToggleShowChatForNewMessage = (UFunction*) UObject::GObjObjects()->Data[ 74165 ];

	ANetherHUD_execToggleShowChatForNewMessage_Parms ToggleShowChatForNewMessage_Parms;
	ToggleShowChatForNewMessage_Parms.bValue = bValue;

	this->ProcessEvent ( pFnToggleShowChatForNewMessage, &ToggleShowChatForNewMessage_Parms, NULL );
};

// Function NetherGame.NetherHUD.CloseMenuScreen
// [0x00020002] 
// Parameters infos:

void ANetherHUD::CloseMenuScreen ( )
{
	static UFunction* pFnCloseMenuScreen = NULL;

	if ( ! pFnCloseMenuScreen )
		pFnCloseMenuScreen = (UFunction*) UObject::GObjObjects()->Data[ 74164 ];

	ANetherHUD_execCloseMenuScreen_Parms CloseMenuScreen_Parms;

	this->ProcessEvent ( pFnCloseMenuScreen, &CloseMenuScreen_Parms, NULL );
};

// Function NetherGame.NetherHUD.StartClosingMenuScreen
// [0x00020002] 
// Parameters infos:

void ANetherHUD::StartClosingMenuScreen ( )
{
	static UFunction* pFnStartClosingMenuScreen = NULL;

	if ( ! pFnStartClosingMenuScreen )
		pFnStartClosingMenuScreen = (UFunction*) UObject::GObjObjects()->Data[ 74163 ];

	ANetherHUD_execStartClosingMenuScreen_Parms StartClosingMenuScreen_Parms;

	this->ProcessEvent ( pFnStartClosingMenuScreen, &StartClosingMenuScreen_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleMenuScreen
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StartingMenu                   ( CPF_Parm )
// unsigned long                  bCloseRegardless               ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::ToggleMenuScreen ( unsigned char StartingMenu, unsigned long bCloseRegardless )
{
	static UFunction* pFnToggleMenuScreen = NULL;

	if ( ! pFnToggleMenuScreen )
		pFnToggleMenuScreen = (UFunction*) UObject::GObjObjects()->Data[ 74114 ];

	ANetherHUD_execToggleMenuScreen_Parms ToggleMenuScreen_Parms;
	ToggleMenuScreen_Parms.StartingMenu = StartingMenu;
	ToggleMenuScreen_Parms.bCloseRegardless = bCloseRegardless;

	this->ProcessEvent ( pFnToggleMenuScreen, &ToggleMenuScreen_Parms, NULL );
};

// Function NetherGame.NetherHUD.SetBloodLevel
// [0x00020002] 
// Parameters infos:
// int                            BloodLevel                     ( CPF_Parm )

void ANetherHUD::SetBloodLevel ( int BloodLevel )
{
	static UFunction* pFnSetBloodLevel = NULL;

	if ( ! pFnSetBloodLevel )
		pFnSetBloodLevel = (UFunction*) UObject::GObjObjects()->Data[ 74150 ];

	ANetherHUD_execSetBloodLevel_Parms SetBloodLevel_Parms;
	SetBloodLevel_Parms.BloodLevel = BloodLevel;

	this->ProcessEvent ( pFnSetBloodLevel, &SetBloodLevel_Parms, NULL );
};

// Function NetherGame.NetherHUD.DecayBloodMeter
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void ANetherHUD::DecayBloodMeter ( float Amount )
{
	static UFunction* pFnDecayBloodMeter = NULL;

	if ( ! pFnDecayBloodMeter )
		pFnDecayBloodMeter = (UFunction*) UObject::GObjObjects()->Data[ 74147 ];

	ANetherHUD_execDecayBloodMeter_Parms DecayBloodMeter_Parms;
	DecayBloodMeter_Parms.Amount = Amount;

	this->ProcessEvent ( pFnDecayBloodMeter, &DecayBloodMeter_Parms, NULL );
};

// Function NetherGame.NetherHUD.SetBloodMeter
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void ANetherHUD::SetBloodMeter ( float Amount )
{
	static UFunction* pFnSetBloodMeter = NULL;

	if ( ! pFnSetBloodMeter )
		pFnSetBloodMeter = (UFunction*) UObject::GObjObjects()->Data[ 74145 ];

	ANetherHUD_execSetBloodMeter_Parms SetBloodMeter_Parms;
	SetBloodMeter_Parms.Amount = Amount;

	this->ProcessEvent ( pFnSetBloodMeter, &SetBloodMeter_Parms, NULL );
};

// Function NetherGame.NetherHUD.SetChatHeaderText
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 HeaderText                     ( CPF_Parm | CPF_NeedCtorLink )

void ANetherHUD::SetChatHeaderText ( struct FString HeaderText )
{
	static UFunction* pFnSetChatHeaderText = NULL;

	if ( ! pFnSetChatHeaderText )
		pFnSetChatHeaderText = (UFunction*) UObject::GObjObjects()->Data[ 74143 ];

	ANetherHUD_execSetChatHeaderText_Parms SetChatHeaderText_Parms;
	memcpy ( &SetChatHeaderText_Parms.HeaderText, &HeaderText, 0x10 );

	this->ProcessEvent ( pFnSetChatHeaderText, &SetChatHeaderText_Parms, NULL );
};

// Function NetherGame.NetherHUD.ShowBarterObjectivePopup
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 TradeDescription               ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         FunctionToConfirm              ( CPF_Parm | CPF_NeedCtorLink )
// class ANInteractiveObject_Barter* BarterObject                   ( CPF_Parm )
// unsigned long                  bPlayerHasItems                ( CPF_Parm )

void ANetherHUD::ShowBarterObjectivePopup ( struct FString TradeDescription, struct FScriptDelegate FunctionToConfirm, class ANInteractiveObject_Barter* BarterObject, unsigned long bPlayerHasItems )
{
	static UFunction* pFnShowBarterObjectivePopup = NULL;

	if ( ! pFnShowBarterObjectivePopup )
		pFnShowBarterObjectivePopup = (UFunction*) UObject::GObjObjects()->Data[ 74136 ];

	ANetherHUD_execShowBarterObjectivePopup_Parms ShowBarterObjectivePopup_Parms;
	memcpy ( &ShowBarterObjectivePopup_Parms.TradeDescription, &TradeDescription, 0x10 );
	memcpy ( &ShowBarterObjectivePopup_Parms.FunctionToConfirm, &FunctionToConfirm, 0x10 );
	ShowBarterObjectivePopup_Parms.BarterObject = BarterObject;
	ShowBarterObjectivePopup_Parms.bPlayerHasItems = bPlayerHasItems;

	this->ProcessEvent ( pFnShowBarterObjectivePopup, &ShowBarterObjectivePopup_Parms, NULL );
};

// Function NetherGame.NetherHUD.ShowPopupNotification
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 HeaderText                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BodyText                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ButtonText                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ANetherHUD::ShowPopupNotification ( struct FString HeaderText, struct FString BodyText, struct FString ButtonText )
{
	static UFunction* pFnShowPopupNotification = NULL;

	if ( ! pFnShowPopupNotification )
		pFnShowPopupNotification = (UFunction*) UObject::GObjObjects()->Data[ 74132 ];

	ANetherHUD_execShowPopupNotification_Parms ShowPopupNotification_Parms;
	memcpy ( &ShowPopupNotification_Parms.HeaderText, &HeaderText, 0x10 );
	memcpy ( &ShowPopupNotification_Parms.BodyText, &BodyText, 0x10 );
	memcpy ( &ShowPopupNotification_Parms.ButtonText, &ButtonText, 0x10 );

	this->ProcessEvent ( pFnShowPopupNotification, &ShowPopupNotification_Parms, NULL );
};

// Function NetherGame.NetherHUD.ConfirmWithPopup
// [0x00024002] 
// Parameters infos:
// struct FScriptDelegate         FunctionToConfirm              ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         FunctionToDecline              ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 HeaderText                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BodyText                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ConfirmButtonText              ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 CancelButtonText               ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ANetherHUD::ConfirmWithPopup ( struct FScriptDelegate FunctionToConfirm, struct FScriptDelegate FunctionToDecline, struct FString HeaderText, struct FString BodyText, struct FString ConfirmButtonText, struct FString CancelButtonText )
{
	static UFunction* pFnConfirmWithPopup = NULL;

	if ( ! pFnConfirmWithPopup )
		pFnConfirmWithPopup = (UFunction*) UObject::GObjObjects()->Data[ 74125 ];

	ANetherHUD_execConfirmWithPopup_Parms ConfirmWithPopup_Parms;
	memcpy ( &ConfirmWithPopup_Parms.FunctionToConfirm, &FunctionToConfirm, 0x10 );
	memcpy ( &ConfirmWithPopup_Parms.FunctionToDecline, &FunctionToDecline, 0x10 );
	memcpy ( &ConfirmWithPopup_Parms.HeaderText, &HeaderText, 0x10 );
	memcpy ( &ConfirmWithPopup_Parms.BodyText, &BodyText, 0x10 );
	memcpy ( &ConfirmWithPopup_Parms.ConfirmButtonText, &ConfirmButtonText, 0x10 );
	memcpy ( &ConfirmWithPopup_Parms.CancelButtonText, &CancelButtonText, 0x10 );

	this->ProcessEvent ( pFnConfirmWithPopup, &ConfirmWithPopup_Parms, NULL );
};

// Function NetherGame.NetherHUD.ClosePopup
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int ANetherHUD::ClosePopup ( class UGFxButton* Button )
{
	static UFunction* pFnClosePopup = NULL;

	if ( ! pFnClosePopup )
		pFnClosePopup = (UFunction*) UObject::GObjObjects()->Data[ 73600 ];

	ANetherHUD_execClosePopup_Parms ClosePopup_Parms;
	ClosePopup_Parms.Button = Button;

	this->ProcessEvent ( pFnClosePopup, &ClosePopup_Parms, NULL );

	return ClosePopup_Parms.ReturnValue;
};

// Function NetherGame.NetherHUD.CreatePopup
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ANetherHUD::CreatePopup ( )
{
	static UFunction* pFnCreatePopup = NULL;

	if ( ! pFnCreatePopup )
		pFnCreatePopup = (UFunction*) UObject::GObjObjects()->Data[ 74123 ];

	ANetherHUD_execCreatePopup_Parms CreatePopup_Parms;

	this->ProcessEvent ( pFnCreatePopup, &CreatePopup_Parms, NULL );
};

// Function NetherGame.NetherHUD.ClosePopupByID
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  IDToClose                      ( CPF_Parm )

bool ANetherHUD::ClosePopupByID ( unsigned char IDToClose )
{
	static UFunction* pFnClosePopupByID = NULL;

	if ( ! pFnClosePopupByID )
		pFnClosePopupByID = (UFunction*) UObject::GObjObjects()->Data[ 74120 ];

	ANetherHUD_execClosePopupByID_Parms ClosePopupByID_Parms;
	ClosePopupByID_Parms.IDToClose = IDToClose;

	this->ProcessEvent ( pFnClosePopupByID, &ClosePopupByID_Parms, NULL );

	return ClosePopupByID_Parms.ReturnValue;
};

// Function NetherGame.NetherHUD.OpenMenuScreen
// [0x00020002] 
// Parameters infos:

void ANetherHUD::OpenMenuScreen ( )
{
	static UFunction* pFnOpenMenuScreen = NULL;

	if ( ! pFnOpenMenuScreen )
		pFnOpenMenuScreen = (UFunction*) UObject::GObjObjects()->Data[ 74119 ];

	ANetherHUD_execOpenMenuScreen_Parms OpenMenuScreen_Parms;

	this->ProcessEvent ( pFnOpenMenuScreen, &OpenMenuScreen_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleCAP
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::ToggleCAP ( )
{
	static UFunction* pFnToggleCAP = NULL;

	if ( ! pFnToggleCAP )
		pFnToggleCAP = (UFunction*) UObject::GObjObjects()->Data[ 74118 ];

	ANetherHUD_execToggleCAP_Parms ToggleCAP_Parms;

	this->ProcessEvent ( pFnToggleCAP, &ToggleCAP_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleGeneralMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::ToggleGeneralMenu ( )
{
	static UFunction* pFnToggleGeneralMenu = NULL;

	if ( ! pFnToggleGeneralMenu )
		pFnToggleGeneralMenu = (UFunction*) UObject::GObjObjects()->Data[ 74117 ];

	ANetherHUD_execToggleGeneralMenu_Parms ToggleGeneralMenu_Parms;

	this->ProcessEvent ( pFnToggleGeneralMenu, &ToggleGeneralMenu_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleCharacter
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::ToggleCharacter ( )
{
	static UFunction* pFnToggleCharacter = NULL;

	if ( ! pFnToggleCharacter )
		pFnToggleCharacter = (UFunction*) UObject::GObjObjects()->Data[ 74116 ];

	ANetherHUD_execToggleCharacter_Parms ToggleCharacter_Parms;

	this->ProcessEvent ( pFnToggleCharacter, &ToggleCharacter_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::ToggleMap ( )
{
	static UFunction* pFnToggleMap = NULL;

	if ( ! pFnToggleMap )
		pFnToggleMap = (UFunction*) UObject::GObjObjects()->Data[ 74115 ];

	ANetherHUD_execToggleMap_Parms ToggleMap_Parms;

	this->ProcessEvent ( pFnToggleMap, &ToggleMap_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleInventory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::ToggleInventory ( )
{
	static UFunction* pFnToggleInventory = NULL;

	if ( ! pFnToggleInventory )
		pFnToggleInventory = (UFunction*) UObject::GObjObjects()->Data[ 74113 ];

	ANetherHUD_execToggleInventory_Parms ToggleInventory_Parms;

	this->ProcessEvent ( pFnToggleInventory, &ToggleInventory_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisableHudCursorMode
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bForceCloseChat                ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::DisableHudCursorMode ( unsigned long bForceCloseChat )
{
	static UFunction* pFnDisableHudCursorMode = NULL;

	if ( ! pFnDisableHudCursorMode )
		pFnDisableHudCursorMode = (UFunction*) UObject::GObjObjects()->Data[ 74111 ];

	ANetherHUD_execDisableHudCursorMode_Parms DisableHudCursorMode_Parms;
	DisableHudCursorMode_Parms.bForceCloseChat = bForceCloseChat;

	this->ProcessEvent ( pFnDisableHudCursorMode, &DisableHudCursorMode_Parms, NULL );
};

// Function NetherGame.NetherHUD.EnableHudCursorMode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::EnableHudCursorMode ( )
{
	static UFunction* pFnEnableHudCursorMode = NULL;

	if ( ! pFnEnableHudCursorMode )
		pFnEnableHudCursorMode = (UFunction*) UObject::GObjObjects()->Data[ 74103 ];

	ANetherHUD_execEnableHudCursorMode_Parms EnableHudCursorMode_Parms;

	this->ProcessEvent ( pFnEnableHudCursorMode, &EnableHudCursorMode_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleHUDCursorMode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::ToggleHUDCursorMode ( )
{
	static UFunction* pFnToggleHUDCursorMode = NULL;

	if ( ! pFnToggleHUDCursorMode )
		pFnToggleHUDCursorMode = (UFunction*) UObject::GObjObjects()->Data[ 74102 ];

	ANetherHUD_execToggleHUDCursorMode_Parms ToggleHUDCursorMode_Parms;

	this->ProcessEvent ( pFnToggleHUDCursorMode, &ToggleHUDCursorMode_Parms, NULL );
};

// Function NetherGame.NetherHUD.PlayQuickSlotUseAnimation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )

void ANetherHUD::PlayQuickSlotUseAnimation ( int SlotIndex )
{
	static UFunction* pFnPlayQuickSlotUseAnimation = NULL;

	if ( ! pFnPlayQuickSlotUseAnimation )
		pFnPlayQuickSlotUseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 74099 ];

	ANetherHUD_execPlayQuickSlotUseAnimation_Parms PlayQuickSlotUseAnimation_Parms;
	PlayQuickSlotUseAnimation_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnPlayQuickSlotUseAnimation, &PlayQuickSlotUseAnimation_Parms, NULL );
};

// Function NetherGame.NetherHUD.StopQuickSlotFillUpAnimation
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )
// unsigned long                  SkipAnimation                  ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::StopQuickSlotFillUpAnimation ( int SlotIndex, unsigned long SkipAnimation )
{
	static UFunction* pFnStopQuickSlotFillUpAnimation = NULL;

	if ( ! pFnStopQuickSlotFillUpAnimation )
		pFnStopQuickSlotFillUpAnimation = (UFunction*) UObject::GObjObjects()->Data[ 74096 ];

	ANetherHUD_execStopQuickSlotFillUpAnimation_Parms StopQuickSlotFillUpAnimation_Parms;
	StopQuickSlotFillUpAnimation_Parms.SlotIndex = SlotIndex;
	StopQuickSlotFillUpAnimation_Parms.SkipAnimation = SkipAnimation;

	this->ProcessEvent ( pFnStopQuickSlotFillUpAnimation, &StopQuickSlotFillUpAnimation_Parms, NULL );
};

// Function NetherGame.NetherHUD.StartQuickSlotFillUpAnimation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIndex                      ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

void ANetherHUD::StartQuickSlotFillUpAnimation ( int SlotIndex, float Duration )
{
	static UFunction* pFnStartQuickSlotFillUpAnimation = NULL;

	if ( ! pFnStartQuickSlotFillUpAnimation )
		pFnStartQuickSlotFillUpAnimation = (UFunction*) UObject::GObjObjects()->Data[ 74093 ];

	ANetherHUD_execStartQuickSlotFillUpAnimation_Parms StartQuickSlotFillUpAnimation_Parms;
	StartQuickSlotFillUpAnimation_Parms.SlotIndex = SlotIndex;
	StartQuickSlotFillUpAnimation_Parms.Duration = Duration;

	this->ProcessEvent ( pFnStartQuickSlotFillUpAnimation, &StartQuickSlotFillUpAnimation_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayObjectiveInfo
// [0x00020102] 
// Parameters infos:
// class ANetherPawn*             NPawn                          ( CPF_Parm )

void ANetherHUD::DisplayObjectiveInfo ( class ANetherPawn* NPawn )
{
	static UFunction* pFnDisplayObjectiveInfo = NULL;

	if ( ! pFnDisplayObjectiveInfo )
		pFnDisplayObjectiveInfo = (UFunction*) UObject::GObjObjects()->Data[ 74091 ];

	ANetherHUD_execDisplayObjectiveInfo_Parms DisplayObjectiveInfo_Parms;
	DisplayObjectiveInfo_Parms.NPawn = NPawn;

	this->ProcessEvent ( pFnDisplayObjectiveInfo, &DisplayObjectiveInfo_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayHealth
// [0x00020102] 
// Parameters infos:
// class ANetherPawn*             NPawn                          ( CPF_Parm )

void ANetherHUD::DisplayHealth ( class ANetherPawn* NPawn )
{
	static UFunction* pFnDisplayHealth = NULL;

	if ( ! pFnDisplayHealth )
		pFnDisplayHealth = (UFunction*) UObject::GObjObjects()->Data[ 74087 ];

	ANetherHUD_execDisplayHealth_Parms DisplayHealth_Parms;
	DisplayHealth_Parms.NPawn = NPawn;

	this->ProcessEvent ( pFnDisplayHealth, &DisplayHealth_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayStamina
// [0x00020102] 
// Parameters infos:
// class ANetherPawn*             NPawn                          ( CPF_Parm )

void ANetherHUD::DisplayStamina ( class ANetherPawn* NPawn )
{
	static UFunction* pFnDisplayStamina = NULL;

	if ( ! pFnDisplayStamina )
		pFnDisplayStamina = (UFunction*) UObject::GObjObjects()->Data[ 74077 ];

	ANetherHUD_execDisplayStamina_Parms DisplayStamina_Parms;
	DisplayStamina_Parms.NPawn = NPawn;

	this->ProcessEvent ( pFnDisplayStamina, &DisplayStamina_Parms, NULL );
};

// Function NetherGame.NetherHUD.StopPickupTimer
// [0x00020102] 
// Parameters infos:
// unsigned long                  bSkipAnimation                 ( CPF_Parm )

void ANetherHUD::StopPickupTimer ( unsigned long bSkipAnimation )
{
	static UFunction* pFnStopPickupTimer = NULL;

	if ( ! pFnStopPickupTimer )
		pFnStopPickupTimer = (UFunction*) UObject::GObjObjects()->Data[ 74075 ];

	ANetherHUD_execStopPickupTimer_Parms StopPickupTimer_Parms;
	StopPickupTimer_Parms.bSkipAnimation = bSkipAnimation;

	this->ProcessEvent ( pFnStopPickupTimer, &StopPickupTimer_Parms, NULL );
};

// Function NetherGame.NetherHUD.StartPickupTimer
// [0x00020102] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// class AInventory*              Inv                            ( CPF_Parm )

void ANetherHUD::StartPickupTimer ( float Duration, class AInventory* Inv )
{
	static UFunction* pFnStartPickupTimer = NULL;

	if ( ! pFnStartPickupTimer )
		pFnStartPickupTimer = (UFunction*) UObject::GObjObjects()->Data[ 74072 ];

	ANetherHUD_execStartPickupTimer_Parms StartPickupTimer_Parms;
	StartPickupTimer_Parms.Duration = Duration;
	StartPickupTimer_Parms.Inv = Inv;

	this->ProcessEvent ( pFnStartPickupTimer, &StartPickupTimer_Parms, NULL );
};

// Function NetherGame.NetherHUD.ClearPickupPrompt
// [0x00020102] 
// Parameters infos:

void ANetherHUD::ClearPickupPrompt ( )
{
	static UFunction* pFnClearPickupPrompt = NULL;

	if ( ! pFnClearPickupPrompt )
		pFnClearPickupPrompt = (UFunction*) UObject::GObjObjects()->Data[ 74071 ];

	ANetherHUD_execClearPickupPrompt_Parms ClearPickupPrompt_Parms;

	this->ProcessEvent ( pFnClearPickupPrompt, &ClearPickupPrompt_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayPickupPrompt
// [0x00020102] 
// Parameters infos:
// struct FString                 ActionText                     ( CPF_Parm | CPF_NeedCtorLink )

void ANetherHUD::DisplayPickupPrompt ( struct FString ActionText )
{
	static UFunction* pFnDisplayPickupPrompt = NULL;

	if ( ! pFnDisplayPickupPrompt )
		pFnDisplayPickupPrompt = (UFunction*) UObject::GObjObjects()->Data[ 74069 ];

	ANetherHUD_execDisplayPickupPrompt_Parms DisplayPickupPrompt_Parms;
	memcpy ( &DisplayPickupPrompt_Parms.ActionText, &ActionText, 0x10 );

	this->ProcessEvent ( pFnDisplayPickupPrompt, &DisplayPickupPrompt_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayHunger
// [0x00020102] 
// Parameters infos:
// class ANetherPawn*             NPawn                          ( CPF_Parm )

void ANetherHUD::DisplayHunger ( class ANetherPawn* NPawn )
{
	static UFunction* pFnDisplayHunger = NULL;

	if ( ! pFnDisplayHunger )
		pFnDisplayHunger = (UFunction*) UObject::GObjObjects()->Data[ 74061 ];

	ANetherHUD_execDisplayHunger_Parms DisplayHunger_Parms;
	DisplayHunger_Parms.NPawn = NPawn;

	this->ProcessEvent ( pFnDisplayHunger, &DisplayHunger_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayAmmo
// [0x00020102] 
// Parameters infos:
// class ANWeap*                  Weapon                         ( CPF_Parm )

void ANetherHUD::DisplayAmmo ( class ANWeap* Weapon )
{
	static UFunction* pFnDisplayAmmo = NULL;

	if ( ! pFnDisplayAmmo )
		pFnDisplayAmmo = (UFunction*) UObject::GObjObjects()->Data[ 74056 ];

	ANetherHUD_execDisplayAmmo_Parms DisplayAmmo_Parms;
	DisplayAmmo_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnDisplayAmmo, &DisplayAmmo_Parms, NULL );
};

// Function NetherGame.NetherHUD.HideHUD
// [0x00020002] 
// Parameters infos:

void ANetherHUD::HideHUD ( )
{
	static UFunction* pFnHideHUD = NULL;

	if ( ! pFnHideHUD )
		pFnHideHUD = (UFunction*) UObject::GObjObjects()->Data[ 74055 ];

	ANetherHUD_execHideHUD_Parms HideHUD_Parms;

	this->ProcessEvent ( pFnHideHUD, &HideHUD_Parms, NULL );
};

// Function NetherGame.NetherHUD.ShowHUD
// [0x00020002] 
// Parameters infos:

void ANetherHUD::ShowHUD ( )
{
	static UFunction* pFnShowHUD = NULL;

	if ( ! pFnShowHUD )
		pFnShowHUD = (UFunction*) UObject::GObjObjects()->Data[ 74054 ];

	ANetherHUD_execShowHUD_Parms ShowHUD_Parms;

	this->ProcessEvent ( pFnShowHUD, &ShowHUD_Parms, NULL );
};

// Function NetherGame.NetherHUD.HideQuickSlots
// [0x00020102] 
// Parameters infos:

void ANetherHUD::HideQuickSlots ( )
{
	static UFunction* pFnHideQuickSlots = NULL;

	if ( ! pFnHideQuickSlots )
		pFnHideQuickSlots = (UFunction*) UObject::GObjObjects()->Data[ 74052 ];

	ANetherHUD_execHideQuickSlots_Parms HideQuickSlots_Parms;

	this->ProcessEvent ( pFnHideQuickSlots, &HideQuickSlots_Parms, NULL );
};

// Function NetherGame.NetherHUD.ShowQuickSlots
// [0x00024102] 
// Parameters infos:
// unsigned long                  bAutoHide                      ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::ShowQuickSlots ( unsigned long bAutoHide )
{
	static UFunction* pFnShowQuickSlots = NULL;

	if ( ! pFnShowQuickSlots )
		pFnShowQuickSlots = (UFunction*) UObject::GObjObjects()->Data[ 74049 ];

	ANetherHUD_execShowQuickSlots_Parms ShowQuickSlots_Parms;
	ShowQuickSlots_Parms.bAutoHide = bAutoHide;

	this->ProcessEvent ( pFnShowQuickSlots, &ShowQuickSlots_Parms, NULL );
};

// Function NetherGame.NetherHUD.RefreshPlayerList
// [0x00020002] 
// Parameters infos:

void ANetherHUD::RefreshPlayerList ( )
{
	static UFunction* pFnRefreshPlayerList = NULL;

	if ( ! pFnRefreshPlayerList )
		pFnRefreshPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 74045 ];

	ANetherHUD_execRefreshPlayerList_Parms RefreshPlayerList_Parms;

	this->ProcessEvent ( pFnRefreshPlayerList, &RefreshPlayerList_Parms, NULL );
};

// Function NetherGame.NetherHUD.SubmitInputText
// [0x00020002] 
// Parameters infos:

void ANetherHUD::SubmitInputText ( )
{
	static UFunction* pFnSubmitInputText = NULL;

	if ( ! pFnSubmitInputText )
		pFnSubmitInputText = (UFunction*) UObject::GObjObjects()->Data[ 74041 ];

	ANetherHUD_execSubmitInputText_Parms SubmitInputText_Parms;

	this->ProcessEvent ( pFnSubmitInputText, &SubmitInputText_Parms, NULL );
};

// Function NetherGame.NetherHUD.RefreshQuickSlotIcons
// [0x00020102] 
// Parameters infos:

void ANetherHUD::RefreshQuickSlotIcons ( )
{
	static UFunction* pFnRefreshQuickSlotIcons = NULL;

	if ( ! pFnRefreshQuickSlotIcons )
		pFnRefreshQuickSlotIcons = (UFunction*) UObject::GObjObjects()->Data[ 74031 ];

	ANetherHUD_execRefreshQuickSlotIcons_Parms RefreshQuickSlotIcons_Parms;

	this->ProcessEvent ( pFnRefreshQuickSlotIcons, &RefreshQuickSlotIcons_Parms, NULL );
};

// Function NetherGame.NetherHUD.DrawPlayerHUD
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherHUD::DrawPlayerHUD ( )
{
	static UFunction* pFnDrawPlayerHUD = NULL;

	if ( ! pFnDrawPlayerHUD )
		pFnDrawPlayerHUD = (UFunction*) UObject::GObjObjects()->Data[ 74019 ];

	ANetherHUD_execDrawPlayerHUD_Parms DrawPlayerHUD_Parms;

	this->ProcessEvent ( pFnDrawPlayerHUD, &DrawPlayerHUD_Parms, NULL );
};

// Function NetherGame.NetherHUD.DrawHUD
// [0x00020102] 
// Parameters infos:

void ANetherHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 74018 ];

	ANetherHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function NetherGame.NetherHUD.DrawCrosshair
// [0x00820102] 
// Parameters infos:
// float                          Scale                          ( CPF_Parm )

void ANetherHUD::DrawCrosshair ( float Scale )
{
	static UFunction* pFnDrawCrosshair = NULL;

	if ( ! pFnDrawCrosshair )
		pFnDrawCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 74015 ];

	ANetherHUD_execDrawCrosshair_Parms DrawCrosshair_Parms;
	DrawCrosshair_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawCrosshair, &DrawCrosshair_Parms, NULL );
};

// Function NetherGame.NetherHUD.ClearHeaderText
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void ANetherHUD::ClearHeaderText ( )
{
	static UFunction* pFnClearHeaderText = NULL;

	if ( ! pFnClearHeaderText )
		pFnClearHeaderText = (UFunction*) UObject::GObjObjects()->Data[ 74014 ];

	ANetherHUD_execClearHeaderText_Parms ClearHeaderText_Parms;

	this->ProcessEvent ( pFnClearHeaderText, &ClearHeaderText_Parms, NULL );
};

// Function NetherGame.NetherHUD.SetHeaderText
// [0x00024302] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            FontSize                       ( CPF_OptionalParm | CPF_Parm )
// int                            FontColor                      ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::SetHeaderText ( struct FString Text, int FontSize, int FontColor )
{
	static UFunction* pFnSetHeaderText = NULL;

	if ( ! pFnSetHeaderText )
		pFnSetHeaderText = (UFunction*) UObject::GObjObjects()->Data[ 74009 ];

	ANetherHUD_execSetHeaderText_Parms SetHeaderText_Parms;
	memcpy ( &SetHeaderText_Parms.Text, &Text, 0x10 );
	SetHeaderText_Parms.FontSize = FontSize;
	SetHeaderText_Parms.FontColor = FontColor;

	this->ProcessEvent ( pFnSetHeaderText, &SetHeaderText_Parms, NULL );
};

// Function NetherGame.NetherHUD.HideMessageWindow
// [0x00020002] 
// Parameters infos:

void ANetherHUD::HideMessageWindow ( )
{
	static UFunction* pFnHideMessageWindow = NULL;

	if ( ! pFnHideMessageWindow )
		pFnHideMessageWindow = (UFunction*) UObject::GObjObjects()->Data[ 74008 ];

	ANetherHUD_execHideMessageWindow_Parms HideMessageWindow_Parms;

	this->ProcessEvent ( pFnHideMessageWindow, &HideMessageWindow_Parms, NULL );
};

// Function NetherGame.NetherHUD.PostMessageToWindow
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            HexColor                       ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::PostMessageToWindow ( struct FString Message, int HexColor )
{
	static UFunction* pFnPostMessageToWindow = NULL;

	if ( ! pFnPostMessageToWindow )
		pFnPostMessageToWindow = (UFunction*) UObject::GObjObjects()->Data[ 74004 ];

	ANetherHUD_execPostMessageToWindow_Parms PostMessageToWindow_Parms;
	memcpy ( &PostMessageToWindow_Parms.Message, &Message, 0x10 );
	PostMessageToWindow_Parms.HexColor = HexColor;

	this->ProcessEvent ( pFnPostMessageToWindow, &PostMessageToWindow_Parms, NULL );
};

// Function NetherGame.NetherHUD.Message
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   MsgType                        ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime )
{
	static UFunction* pFnMessage = NULL;

	if ( ! pFnMessage )
		pFnMessage = (UFunction*) UObject::GObjObjects()->Data[ 73998 ];

	ANetherHUD_execMessage_Parms Message_Parms;
	Message_Parms.PRI = PRI;
	memcpy ( &Message_Parms.msg, &msg, 0x10 );
	memcpy ( &Message_Parms.MsgType, &MsgType, 0x8 );
	Message_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnMessage, &Message_Parms, NULL );
};

// Function NetherGame.NetherHUD.ToggleChatFade
// [0x00020002] 
// Parameters infos:

void ANetherHUD::ToggleChatFade ( )
{
	static UFunction* pFnToggleChatFade = NULL;

	if ( ! pFnToggleChatFade )
		pFnToggleChatFade = (UFunction*) UObject::GObjObjects()->Data[ 73997 ];

	ANetherHUD_execToggleChatFade_Parms ToggleChatFade_Parms;

	this->ProcessEvent ( pFnToggleChatFade, &ToggleChatFade_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayConsoleMessages
// [0x00020000] 
// Parameters infos:

void ANetherHUD::DisplayConsoleMessages ( )
{
	static UFunction* pFnDisplayConsoleMessages = NULL;

	if ( ! pFnDisplayConsoleMessages )
		pFnDisplayConsoleMessages = (UFunction*) UObject::GObjObjects()->Data[ 73996 ];

	ANetherHUD_execDisplayConsoleMessages_Parms DisplayConsoleMessages_Parms;

	this->ProcessEvent ( pFnDisplayConsoleMessages, &DisplayConsoleMessages_Parms, NULL );
};

// Function NetherGame.NetherHUD.DisplayLocalMessages
// [0x00020000] 
// Parameters infos:

void ANetherHUD::DisplayLocalMessages ( )
{
	static UFunction* pFnDisplayLocalMessages = NULL;

	if ( ! pFnDisplayLocalMessages )
		pFnDisplayLocalMessages = (UFunction*) UObject::GObjObjects()->Data[ 73995 ];

	ANetherHUD_execDisplayLocalMessages_Parms DisplayLocalMessages_Parms;

	this->ProcessEvent ( pFnDisplayLocalMessages, &DisplayLocalMessages_Parms, NULL );
};

// Function NetherGame.NetherHUD.PostNote
// [0x00020B02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          NoteTime                       ( CPF_Parm )

void ANetherHUD::PostNote ( struct FString Text, float NoteTime )
{
	static UFunction* pFnPostNote = NULL;

	if ( ! pFnPostNote )
		pFnPostNote = (UFunction*) UObject::GObjObjects()->Data[ 73992 ];

	ANetherHUD_execPostNote_Parms PostNote_Parms;
	memcpy ( &PostNote_Parms.Text, &Text, 0x10 );
	PostNote_Parms.NoteTime = NoteTime;

	this->ProcessEvent ( pFnPostNote, &PostNote_Parms, NULL );
};

// Function NetherGame.NetherHUD.PostBigMessage
// [0x00024B02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bShowImmediately               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShowOnlyIfUnique              ( CPF_OptionalParm | CPF_Parm )
// float                          Width                          ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bClearQueue                    ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::PostBigMessage ( struct FString Text, unsigned long bShowImmediately, unsigned long bShowOnlyIfUnique, float Width, float Duration, unsigned long bClearQueue )
{
	static UFunction* pFnPostBigMessage = NULL;

	if ( ! pFnPostBigMessage )
		pFnPostBigMessage = (UFunction*) UObject::GObjObjects()->Data[ 73983 ];

	ANetherHUD_execPostBigMessage_Parms PostBigMessage_Parms;
	memcpy ( &PostBigMessage_Parms.Text, &Text, 0x10 );
	PostBigMessage_Parms.bShowImmediately = bShowImmediately;
	PostBigMessage_Parms.bShowOnlyIfUnique = bShowOnlyIfUnique;
	PostBigMessage_Parms.Width = Width;
	PostBigMessage_Parms.Duration = Duration;
	PostBigMessage_Parms.bClearQueue = bClearQueue;

	this->ProcessEvent ( pFnPostBigMessage, &PostBigMessage_Parms, NULL );
};

// Function NetherGame.NetherHUD.PostNotification
// [0x00024B02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bShowImmediately               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShowOnlyIfUnique              ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::PostNotification ( struct FString Text, unsigned long bShowImmediately, unsigned long bShowOnlyIfUnique )
{
	static UFunction* pFnPostNotification = NULL;

	if ( ! pFnPostNotification )
		pFnPostNotification = (UFunction*) UObject::GObjObjects()->Data[ 73979 ];

	ANetherHUD_execPostNotification_Parms PostNotification_Parms;
	memcpy ( &PostNotification_Parms.Text, &Text, 0x10 );
	PostNotification_Parms.bShowImmediately = bShowImmediately;
	PostNotification_Parms.bShowOnlyIfUnique = bShowOnlyIfUnique;

	this->ProcessEvent ( pFnPostNotification, &PostNotification_Parms, NULL );
};

// Function NetherGame.NetherHUD.PostMessage
// [0x00024B02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            PosX                           ( CPF_OptionalParm | CPF_Parm )
// int                            PosY                           ( CPF_OptionalParm | CPF_Parm )
// int                            FontSize                       ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Align                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            FontColor                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShowImmediately               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShowOnlyIfUnique              ( CPF_OptionalParm | CPF_Parm )
// float                          Width                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bClearQueue                    ( CPF_OptionalParm | CPF_Parm )

void ANetherHUD::PostMessage ( struct FString Text, float Duration, int PosX, int PosY, int FontSize, struct FString Align, int FontColor, unsigned long bShowImmediately, unsigned long bShowOnlyIfUnique, float Width, unsigned long bClearQueue )
{
	static UFunction* pFnPostMessage = NULL;

	if ( ! pFnPostMessage )
		pFnPostMessage = (UFunction*) UObject::GObjObjects()->Data[ 73967 ];

	ANetherHUD_execPostMessage_Parms PostMessage_Parms;
	memcpy ( &PostMessage_Parms.Text, &Text, 0x10 );
	PostMessage_Parms.Duration = Duration;
	PostMessage_Parms.PosX = PosX;
	PostMessage_Parms.PosY = PosY;
	PostMessage_Parms.FontSize = FontSize;
	memcpy ( &PostMessage_Parms.Align, &Align, 0x10 );
	PostMessage_Parms.FontColor = FontColor;
	PostMessage_Parms.bShowImmediately = bShowImmediately;
	PostMessage_Parms.bShowOnlyIfUnique = bShowOnlyIfUnique;
	PostMessage_Parms.Width = Width;
	PostMessage_Parms.bClearQueue = bClearQueue;

	this->ProcessEvent ( pFnPostMessage, &PostMessage_Parms, NULL );
};

// Function NetherGame.NetherHUD.InitializePlayerHUD
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherHUD::InitializePlayerHUD ( )
{
	static UFunction* pFnInitializePlayerHUD = NULL;

	if ( ! pFnInitializePlayerHUD )
		pFnInitializePlayerHUD = (UFunction*) UObject::GObjObjects()->Data[ 73965 ];

	ANetherHUD_execInitializePlayerHUD_Parms InitializePlayerHUD_Parms;

	this->ProcessEvent ( pFnInitializePlayerHUD, &InitializePlayerHUD_Parms, NULL );
};

// Function NetherGame.NetherHUD.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANetherHUD::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 73964 ];

	ANetherHUD_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherPlayerControllerBase.Debug_DeleteServerDocs
// [0x002200C3] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerControllerBase::Debug_DeleteServerDocs ( )
{
	static UFunction* pFnDebug_DeleteServerDocs = NULL;

	if ( ! pFnDebug_DeleteServerDocs )
		pFnDebug_DeleteServerDocs = (UFunction*) UObject::GObjObjects()->Data[ 73730 ];

	ANetherPlayerControllerBase_execDebug_DeleteServerDocs_Parms Debug_DeleteServerDocs_Parms;

	this->ProcessEvent ( pFnDebug_DeleteServerDocs, &Debug_DeleteServerDocs_Parms, NULL );
};

// Function NetherGame.NetherPlayerControllerBase.DebugDeleteServerDocs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerControllerBase::DebugDeleteServerDocs ( )
{
	static UFunction* pFnDebugDeleteServerDocs = NULL;

	if ( ! pFnDebugDeleteServerDocs )
		pFnDebugDeleteServerDocs = (UFunction*) UObject::GObjObjects()->Data[ 73729 ];

	ANetherPlayerControllerBase_execDebugDeleteServerDocs_Parms DebugDeleteServerDocs_Parms;

	this->ProcessEvent ( pFnDebugDeleteServerDocs, &DebugDeleteServerDocs_Parms, NULL );
};

// Function NetherGame.NetherPlayerControllerBase.ShouldDeleteServerDocsOnStartup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerControllerBase::ShouldDeleteServerDocsOnStartup ( )
{
	static UFunction* pFnShouldDeleteServerDocsOnStartup = NULL;

	if ( ! pFnShouldDeleteServerDocsOnStartup )
		pFnShouldDeleteServerDocsOnStartup = (UFunction*) UObject::GObjObjects()->Data[ 73727 ];

	ANetherPlayerControllerBase_execShouldDeleteServerDocsOnStartup_Parms ShouldDeleteServerDocsOnStartup_Parms;

	pFnShouldDeleteServerDocsOnStartup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDeleteServerDocsOnStartup, &ShouldDeleteServerDocsOnStartup_Parms, NULL );

	pFnShouldDeleteServerDocsOnStartup->FunctionFlags |= 0x400;

	return ShouldDeleteServerDocsOnStartup_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerControllerBase.ClientLoggedIn
// [0x010201C0] 
// Parameters infos:

void ANetherPlayerControllerBase::ClientLoggedIn ( )
{
	static UFunction* pFnClientLoggedIn = NULL;

	if ( ! pFnClientLoggedIn )
		pFnClientLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 73726 ];

	ANetherPlayerControllerBase_execClientLoggedIn_Parms ClientLoggedIn_Parms;

	this->ProcessEvent ( pFnClientLoggedIn, &ClientLoggedIn_Parms, NULL );
};

// Function NetherGame.NetherServerDocument.ClearAsyncOps
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANetherServerDocument::ClearAsyncOps ( )
{
	static UFunction* pFnClearAsyncOps = NULL;

	if ( ! pFnClearAsyncOps )
		pFnClearAsyncOps = (UFunction*) UObject::GObjObjects()->Data[ 72495 ];

	ANetherServerDocument_execClearAsyncOps_Parms ClearAsyncOps_Parms;

	pFnClearAsyncOps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAsyncOps, &ClearAsyncOps_Parms, NULL );

	pFnClearAsyncOps->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherServerDocument.GetDocumentTags
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FString >       DocumentTags                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ANetherServerDocument::eventGetDocumentTags ( TArray< struct FString >* DocumentTags )
{
	static UFunction* pFnGetDocumentTags = NULL;

	if ( ! pFnGetDocumentTags )
		pFnGetDocumentTags = (UFunction*) UObject::GObjObjects()->Data[ 72492 ];

	ANetherServerDocument_eventGetDocumentTags_Parms GetDocumentTags_Parms;

	this->ProcessEvent ( pFnGetDocumentTags, &GetDocumentTags_Parms, NULL );

	if ( DocumentTags )
		memcpy ( DocumentTags, &GetDocumentTags_Parms.DocumentTags, 0x10 );
};

// Function NetherGame.NetherServerDocument.OnDocumentUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerDocument::eventOnDocumentUpdate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 72489 ];

	ANetherServerDocument_eventOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NetherServerDocument.OnDocumentCreate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerDocument::eventOnDocumentCreate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentCreate = NULL;

	if ( ! pFnOnDocumentCreate )
		pFnOnDocumentCreate = (UFunction*) UObject::GObjObjects()->Data[ 72487 ];

	ANetherServerDocument_eventOnDocumentCreate_Parms OnDocumentCreate_Parms;
	OnDocumentCreate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentCreate, &OnDocumentCreate_Parms, NULL );
};

// Function NetherGame.NetherServerDocument.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANetherServerDocument::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 72485 ];

	ANetherServerDocument_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherServerDocument.ResetToDefault
// [0x00020000] 
// Parameters infos:

void ANetherServerDocument::ResetToDefault ( )
{
	static UFunction* pFnResetToDefault = NULL;

	if ( ! pFnResetToDefault )
		pFnResetToDefault = (UFunction*) UObject::GObjObjects()->Data[ 72484 ];

	ANetherServerDocument_execResetToDefault_Parms ResetToDefault_Parms;

	this->ProcessEvent ( pFnResetToDefault, &ResetToDefault_Parms, NULL );
};

// Function NetherGame.NetherServerDocument.AutoSaveDocument
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherServerDocument::AutoSaveDocument ( )
{
	static UFunction* pFnAutoSaveDocument = NULL;

	if ( ! pFnAutoSaveDocument )
		pFnAutoSaveDocument = (UFunction*) UObject::GObjObjects()->Data[ 72482 ];

	ANetherServerDocument_execAutoSaveDocument_Parms AutoSaveDocument_Parms;

	this->ProcessEvent ( pFnAutoSaveDocument, &AutoSaveDocument_Parms, NULL );

	return AutoSaveDocument_Parms.ReturnValue;
};

// Function NetherGame.NetherServerDocument.SafeToSave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherServerDocument::SafeToSave ( )
{
	static UFunction* pFnSafeToSave = NULL;

	if ( ! pFnSafeToSave )
		pFnSafeToSave = (UFunction*) UObject::GObjObjects()->Data[ 72480 ];

	ANetherServerDocument_execSafeToSave_Parms SafeToSave_Parms;

	this->ProcessEvent ( pFnSafeToSave, &SafeToSave_Parms, NULL );

	return SafeToSave_Parms.ReturnValue;
};

// Function NetherGame.NetherServerDocument.ShouldAutoSaveDocument
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherServerDocument::ShouldAutoSaveDocument ( )
{
	static UFunction* pFnShouldAutoSaveDocument = NULL;

	if ( ! pFnShouldAutoSaveDocument )
		pFnShouldAutoSaveDocument = (UFunction*) UObject::GObjObjects()->Data[ 72478 ];

	ANetherServerDocument_execShouldAutoSaveDocument_Parms ShouldAutoSaveDocument_Parms;

	this->ProcessEvent ( pFnShouldAutoSaveDocument, &ShouldAutoSaveDocument_Parms, NULL );

	return ShouldAutoSaveDocument_Parms.ReturnValue;
};

// Function NetherGame.NetherServerDocument.SaveDocument
// [0x00020002] 
// Parameters infos:

void ANetherServerDocument::SaveDocument ( )
{
	static UFunction* pFnSaveDocument = NULL;

	if ( ! pFnSaveDocument )
		pFnSaveDocument = (UFunction*) UObject::GObjObjects()->Data[ 72476 ];

	ANetherServerDocument_execSaveDocument_Parms SaveDocument_Parms;

	this->ProcessEvent ( pFnSaveDocument, &SaveDocument_Parms, NULL );
};

// Function NetherGame.NetherServerDocument.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANetherServerDocument::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 72475 ];

	ANetherServerDocument_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function NetherGame.NetherServerDocument.GetDocumentName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherServerDocument::eventGetDocumentName ( )
{
	static UFunction* pFnGetDocumentName = NULL;

	if ( ! pFnGetDocumentName )
		pFnGetDocumentName = (UFunction*) UObject::GObjObjects()->Data[ 72473 ];

	ANetherServerDocument_eventGetDocumentName_Parms GetDocumentName_Parms;

	this->ProcessEvent ( pFnGetDocumentName, &GetDocumentName_Parms, NULL );

	return GetDocumentName_Parms.ReturnValue;
};

// Function NetherGame.NetherServerDocumentClassOverride.GetDocumentTags
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FString >       DocumentTags                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ANetherServerDocumentClassOverride::eventGetDocumentTags ( TArray< struct FString >* DocumentTags )
{
	static UFunction* pFnGetDocumentTags = NULL;

	if ( ! pFnGetDocumentTags )
		pFnGetDocumentTags = (UFunction*) UObject::GObjObjects()->Data[ 78399 ];

	ANetherServerDocumentClassOverride_eventGetDocumentTags_Parms GetDocumentTags_Parms;

	this->ProcessEvent ( pFnGetDocumentTags, &GetDocumentTags_Parms, NULL );

	if ( DocumentTags )
		memcpy ( DocumentTags, &GetDocumentTags_Parms.DocumentTags, 0x10 );
};

// Function NetherGame.NetherServerDocumentClassOverride.SaveDocument
// [0x00020000] 
// Parameters infos:

void ANetherServerDocumentClassOverride::SaveDocument ( )
{
	static UFunction* pFnSaveDocument = NULL;

	if ( ! pFnSaveDocument )
		pFnSaveDocument = (UFunction*) UObject::GObjObjects()->Data[ 78398 ];

	ANetherServerDocumentClassOverride_execSaveDocument_Parms SaveDocument_Parms;

	this->ProcessEvent ( pFnSaveDocument, &SaveDocument_Parms, NULL );
};

// Function NetherGame.NetherServerDocumentClassOverride.OnDocumentUpdate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerDocumentClassOverride::eventOnDocumentUpdate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 78396 ];

	ANetherServerDocumentClassOverride_eventOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NetherServerDocumentClassOverride.UpdateDocumentTimer
// [0x00020002] 
// Parameters infos:

void ANetherServerDocumentClassOverride::UpdateDocumentTimer ( )
{
	static UFunction* pFnUpdateDocumentTimer = NULL;

	if ( ! pFnUpdateDocumentTimer )
		pFnUpdateDocumentTimer = (UFunction*) UObject::GObjObjects()->Data[ 78394 ];

	ANetherServerDocumentClassOverride_execUpdateDocumentTimer_Parms UpdateDocumentTimer_Parms;

	this->ProcessEvent ( pFnUpdateDocumentTimer, &UpdateDocumentTimer_Parms, NULL );
};

// Function NetherGame.NetherServerDocumentClassOverride.SyncDocumentToServer
// [0x00020000] 
// Parameters infos:

void ANetherServerDocumentClassOverride::SyncDocumentToServer ( )
{
	static UFunction* pFnSyncDocumentToServer = NULL;

	if ( ! pFnSyncDocumentToServer )
		pFnSyncDocumentToServer = (UFunction*) UObject::GObjObjects()->Data[ 78393 ];

	ANetherServerDocumentClassOverride_execSyncDocumentToServer_Parms SyncDocumentToServer_Parms;

	this->ProcessEvent ( pFnSyncDocumentToServer, &SyncDocumentToServer_Parms, NULL );
};

// Function NetherGame.NetherServerDocumentClassOverride.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANetherServerDocumentClassOverride::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 78392 ];

	ANetherServerDocumentClassOverride_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherServerDocumentClassOverride.GetDocumentName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherServerDocumentClassOverride::eventGetDocumentName ( )
{
	static UFunction* pFnGetDocumentName = NULL;

	if ( ! pFnGetDocumentName )
		pFnGetDocumentName = (UFunction*) UObject::GObjObjects()->Data[ 78390 ];

	ANetherServerDocumentClassOverride_eventGetDocumentName_Parms GetDocumentName_Parms;

	this->ProcessEvent ( pFnGetDocumentName, &GetDocumentName_Parms, NULL );

	return GetDocumentName_Parms.ReturnValue;
};

// Function NetherGame.NetherServerPlayerDocument.GetDocumentTags
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FString >       DocumentTags                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ANetherServerPlayerDocument::eventGetDocumentTags ( TArray< struct FString >* DocumentTags )
{
	static UFunction* pFnGetDocumentTags = NULL;

	if ( ! pFnGetDocumentTags )
		pFnGetDocumentTags = (UFunction*) UObject::GObjObjects()->Data[ 72521 ];

	ANetherServerPlayerDocument_eventGetDocumentTags_Parms GetDocumentTags_Parms;

	this->ProcessEvent ( pFnGetDocumentTags, &GetDocumentTags_Parms, NULL );

	if ( DocumentTags )
		memcpy ( DocumentTags, &GetDocumentTags_Parms.DocumentTags, 0x10 );
};

// Function NetherGame.NetherServerPlayerDocument.GetDocumentName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherServerPlayerDocument::eventGetDocumentName ( )
{
	static UFunction* pFnGetDocumentName = NULL;

	if ( ! pFnGetDocumentName )
		pFnGetDocumentName = (UFunction*) UObject::GObjObjects()->Data[ 72519 ];

	ANetherServerPlayerDocument_eventGetDocumentName_Parms GetDocumentName_Parms;

	this->ProcessEvent ( pFnGetDocumentName, &GetDocumentName_Parms, NULL );

	return GetDocumentName_Parms.ReturnValue;
};

// Function NetherGame.NetherServerPlayerDocument.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANetherServerPlayerDocument::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 72515 ];

	ANetherServerPlayerDocument_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherServerPlayerDocument.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherServerPlayerDocument::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 72509 ];

	ANetherServerPlayerDocument_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherServerPlayerDocument.PreAutosave
// [0x00020000] 
// Parameters infos:

void ANetherServerPlayerDocument::PreAutosave ( )
{
	static UFunction* pFnPreAutosave = NULL;

	if ( ! pFnPreAutosave )
		pFnPreAutosave = (UFunction*) UObject::GObjObjects()->Data[ 72508 ];

	ANetherServerPlayerDocument_execPreAutosave_Parms PreAutosave_Parms;

	this->ProcessEvent ( pFnPreAutosave, &PreAutosave_Parms, NULL );
};

// Function NetherGame.NetherServerPlayerDocument.OnDocumentUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerPlayerDocument::eventOnDocumentUpdate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 72506 ];

	ANetherServerPlayerDocument_eventOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NetherServerPlayerDocument.OnDocumentCreate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerPlayerDocument::eventOnDocumentCreate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentCreate = NULL;

	if ( ! pFnOnDocumentCreate )
		pFnOnDocumentCreate = (UFunction*) UObject::GObjObjects()->Data[ 72502 ];

	ANetherServerPlayerDocument_eventOnDocumentCreate_Parms OnDocumentCreate_Parms;
	OnDocumentCreate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentCreate, &OnDocumentCreate_Parms, NULL );
};

// Function NetherGame.NetherServerPlayerDocument.InitForPlayer
// [0x00020002] 
// Parameters infos:
// class ANetherPlayerController* PC                             ( CPF_Parm )
// int                            CharacterIndex                 ( CPF_Parm )

void ANetherServerPlayerDocument::InitForPlayer ( class ANetherPlayerController* PC, int CharacterIndex )
{
	static UFunction* pFnInitForPlayer = NULL;

	if ( ! pFnInitForPlayer )
		pFnInitForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 72498 ];

	ANetherServerPlayerDocument_execInitForPlayer_Parms InitForPlayer_Parms;
	InitForPlayer_Parms.PC = PC;
	InitForPlayer_Parms.CharacterIndex = CharacterIndex;

	this->ProcessEvent ( pFnInitForPlayer, &InitForPlayer_Parms, NULL );
};

// Function NetherGame.NThrownObject.OnLifeExpired
// [0x00020002] 
// Parameters infos:

void ANThrownObject::OnLifeExpired ( )
{
	static UFunction* pFnOnLifeExpired = NULL;

	if ( ! pFnOnLifeExpired )
		pFnOnLifeExpired = (UFunction*) UObject::GObjObjects()->Data[ 80771 ];

	ANThrownObject_execOnLifeExpired_Parms OnLifeExpired_Parms;

	this->ProcessEvent ( pFnOnLifeExpired, &OnLifeExpired_Parms, NULL );
};

// Function NetherGame.NThrownObject.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANThrownObject::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 80769 ];

	ANThrownObject_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NThrownObject.SetInitialState
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ANThrownObject::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 80767 ];

	ANThrownObject_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.GetAllPawns
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FHitPawn >      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          GrenadeRadius                  ( CPF_Parm )

TArray< struct FHitPawn > ANThrownObject_AOEGrenadeBase::GetAllPawns ( float GrenadeRadius )
{
	static UFunction* pFnGetAllPawns = NULL;

	if ( ! pFnGetAllPawns )
		pFnGetAllPawns = (UFunction*) UObject::GObjObjects()->Data[ 80798 ];

	ANThrownObject_AOEGrenadeBase_execGetAllPawns_Parms GetAllPawns_Parms;
	GetAllPawns_Parms.GrenadeRadius = GrenadeRadius;

	pFnGetAllPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllPawns, &GetAllPawns_Parms, NULL );

	pFnGetAllPawns->FunctionFlags |= 0x400;

	return GetAllPawns_Parms.ReturnValue;
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.ExplosionFX
// [0x00020102] 
// Parameters infos:

void ANThrownObject_AOEGrenadeBase::ExplosionFX ( )
{
	static UFunction* pFnExplosionFX = NULL;

	if ( ! pFnExplosionFX )
		pFnExplosionFX = (UFunction*) UObject::GObjObjects()->Data[ 80804 ];

	ANThrownObject_AOEGrenadeBase_execExplosionFX_Parms ExplosionFX_Parms;

	this->ProcessEvent ( pFnExplosionFX, &ExplosionFX_Parms, NULL );
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.AreaEffect
// [0x00020000] 
// Parameters infos:
// struct FHitPawn                InHitPawn                      ( CPF_Parm )

void ANThrownObject_AOEGrenadeBase::AreaEffect ( struct FHitPawn InHitPawn )
{
	static UFunction* pFnAreaEffect = NULL;

	if ( ! pFnAreaEffect )
		pFnAreaEffect = (UFunction*) UObject::GObjObjects()->Data[ 80802 ];

	ANThrownObject_AOEGrenadeBase_execAreaEffect_Parms AreaEffect_Parms;
	memcpy ( &AreaEffect_Parms.InHitPawn, &InHitPawn, 0xC );

	this->ProcessEvent ( pFnAreaEffect, &AreaEffect_Parms, NULL );
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.CheckGrenadeLOS
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PawnToCheck                    ( CPF_Parm )

bool ANThrownObject_AOEGrenadeBase::CheckGrenadeLOS ( class APawn* PawnToCheck )
{
	static UFunction* pFnCheckGrenadeLOS = NULL;

	if ( ! pFnCheckGrenadeLOS )
		pFnCheckGrenadeLOS = (UFunction*) UObject::GObjObjects()->Data[ 80799 ];

	ANThrownObject_AOEGrenadeBase_execCheckGrenadeLOS_Parms CheckGrenadeLOS_Parms;
	CheckGrenadeLOS_Parms.PawnToCheck = PawnToCheck;

	this->ProcessEvent ( pFnCheckGrenadeLOS, &CheckGrenadeLOS_Parms, NULL );

	return CheckGrenadeLOS_Parms.ReturnValue;
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.ExplosionAOE
// [0x00820002] 
// Parameters infos:

void ANThrownObject_AOEGrenadeBase::ExplosionAOE ( )
{
	static UFunction* pFnExplosionAOE = NULL;

	if ( ! pFnExplosionAOE )
		pFnExplosionAOE = (UFunction*) UObject::GObjObjects()->Data[ 80794 ];

	ANThrownObject_AOEGrenadeBase_execExplosionAOE_Parms ExplosionAOE_Parms;

	this->ProcessEvent ( pFnExplosionAOE, &ExplosionAOE_Parms, NULL );
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANThrownObject_AOEGrenadeBase::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 80792 ];

	ANThrownObject_AOEGrenadeBase_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANThrownObject_AOEGrenadeBase::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 80790 ];

	ANThrownObject_AOEGrenadeBase_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NThrownObject_AOEGrenadeBase.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANThrownObject_AOEGrenadeBase::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 80789 ];

	ANThrownObject_AOEGrenadeBase_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function NetherGame.OnlineAuthInterfaceNether.VerifySteamClientAuthSession
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// int                            ClientIP                       ( CPF_Parm )
// int                            ClientPort                     ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

bool UOnlineAuthInterfaceNether::VerifySteamClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int AuthTicketUID )
{
	static UFunction* pFnVerifySteamClientAuthSession = NULL;

	if ( ! pFnVerifySteamClientAuthSession )
		pFnVerifySteamClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 82196 ];

	UOnlineAuthInterfaceNether_execVerifySteamClientAuthSession_Parms VerifySteamClientAuthSession_Parms;
	memcpy ( &VerifySteamClientAuthSession_Parms.ClientUID, &ClientUID, 0x8 );
	VerifySteamClientAuthSession_Parms.ClientIP = ClientIP;
	VerifySteamClientAuthSession_Parms.ClientPort = ClientPort;
	VerifySteamClientAuthSession_Parms.AuthTicketUID = AuthTicketUID;

	pFnVerifySteamClientAuthSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifySteamClientAuthSession, &VerifySteamClientAuthSession_Parms, NULL );

	pFnVerifySteamClientAuthSession->FunctionFlags |= 0x400;

	return VerifySteamClientAuthSession_Parms.ReturnValue;
};

// Function NetherGame.OnlineAuthInterfaceNether.VerifyClientAuthSession
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// int                            ClientIP                       ( CPF_Parm )
// int                            ClientPort                     ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

bool UOnlineAuthInterfaceNether::VerifyClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int AuthTicketUID )
{
	static UFunction* pFnVerifyClientAuthSession = NULL;

	if ( ! pFnVerifyClientAuthSession )
		pFnVerifyClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 82190 ];

	UOnlineAuthInterfaceNether_execVerifyClientAuthSession_Parms VerifyClientAuthSession_Parms;
	memcpy ( &VerifyClientAuthSession_Parms.ClientUID, &ClientUID, 0x8 );
	VerifyClientAuthSession_Parms.ClientIP = ClientIP;
	VerifyClientAuthSession_Parms.ClientPort = ClientPort;
	VerifyClientAuthSession_Parms.AuthTicketUID = AuthTicketUID;

	pFnVerifyClientAuthSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyClientAuthSession, &VerifyClientAuthSession_Parms, NULL );

	pFnVerifyClientAuthSession->FunctionFlags |= 0x400;

	return VerifyClientAuthSession_Parms.ReturnValue;
};

// Function NetherGame.OnlineAuthInterfaceNether.CreateClientAuthSession
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// int                            ServerIP                       ( CPF_Parm )
// int                            ServerPort                     ( CPF_Parm )
// unsigned long                  bSecure                        ( CPF_Parm )
// int                            OutAuthTicketUID               ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterfaceNether::CreateClientAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure, int* OutAuthTicketUID )
{
	static UFunction* pFnCreateClientAuthSession = NULL;

	if ( ! pFnCreateClientAuthSession )
		pFnCreateClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 82183 ];

	UOnlineAuthInterfaceNether_execCreateClientAuthSession_Parms CreateClientAuthSession_Parms;
	memcpy ( &CreateClientAuthSession_Parms.ServerUID, &ServerUID, 0x8 );
	CreateClientAuthSession_Parms.ServerIP = ServerIP;
	CreateClientAuthSession_Parms.ServerPort = ServerPort;
	CreateClientAuthSession_Parms.bSecure = bSecure;

	pFnCreateClientAuthSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateClientAuthSession, &CreateClientAuthSession_Parms, NULL );

	pFnCreateClientAuthSession->FunctionFlags |= 0x400;

	if ( OutAuthTicketUID )
		*OutAuthTicketUID = CreateClientAuthSession_Parms.OutAuthTicketUID;

	return CreateClientAuthSession_Parms.ReturnValue;
};

// Function NetherGame.OnlineSubsystemNether.GetCurrentUTCTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineSubsystemNether::GetCurrentUTCTime ( )
{
	static UFunction* pFnGetCurrentUTCTime = NULL;

	if ( ! pFnGetCurrentUTCTime )
		pFnGetCurrentUTCTime = (UFunction*) UObject::GObjObjects()->Data[ 78176 ];

	UOnlineSubsystemNether_execGetCurrentUTCTime_Parms GetCurrentUTCTime_Parms;

	pFnGetCurrentUTCTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentUTCTime, &GetCurrentUTCTime_Parms, NULL );

	pFnGetCurrentUTCTime->FunctionFlags |= 0x400;

	return GetCurrentUTCTime_Parms.ReturnValue;
};

// Function NetherGame.OnlineSubsystemNether.GetSecondsFromTimeString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 TimeString                     ( CPF_Parm | CPF_NeedCtorLink )

int UOnlineSubsystemNether::GetSecondsFromTimeString ( struct FString TimeString )
{
	static UFunction* pFnGetSecondsFromTimeString = NULL;

	if ( ! pFnGetSecondsFromTimeString )
		pFnGetSecondsFromTimeString = (UFunction*) UObject::GObjObjects()->Data[ 78174 ];

	UOnlineSubsystemNether_execGetSecondsFromTimeString_Parms GetSecondsFromTimeString_Parms;
	memcpy ( &GetSecondsFromTimeString_Parms.TimeString, &TimeString, 0x10 );

	pFnGetSecondsFromTimeString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSecondsFromTimeString, &GetSecondsFromTimeString_Parms, NULL );

	pFnGetSecondsFromTimeString->FunctionFlags |= 0x400;

	return GetSecondsFromTimeString_Parms.ReturnValue;
};

// Function NetherGame.OnlineSubsystemNether.Mber_GetData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANetherServerDocument*   Data                           ( CPF_Parm )

void UOnlineSubsystemNether::Mber_GetData ( class ANetherServerDocument* Data )
{
	static UFunction* pFnMber_GetData = NULL;

	if ( ! pFnMber_GetData )
		pFnMber_GetData = (UFunction*) UObject::GObjObjects()->Data[ 82232 ];

	UOnlineSubsystemNether_execMber_GetData_Parms Mber_GetData_Parms;
	Mber_GetData_Parms.Data = Data;

	pFnMber_GetData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_GetData, &Mber_GetData_Parms, NULL );

	pFnMber_GetData->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ClientGetAuthToken
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineSubsystemNether::Mber_ClientGetAuthToken ( )
{
	static UFunction* pFnMber_ClientGetAuthToken = NULL;

	if ( ! pFnMber_ClientGetAuthToken )
		pFnMber_ClientGetAuthToken = (UFunction*) UObject::GObjObjects()->Data[ 76181 ];

	UOnlineSubsystemNether_execMber_ClientGetAuthToken_Parms Mber_ClientGetAuthToken_Parms;

	pFnMber_ClientGetAuthToken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ClientGetAuthToken, &Mber_ClientGetAuthToken_Parms, NULL );

	pFnMber_ClientGetAuthToken->FunctionFlags |= 0x400;

	return Mber_ClientGetAuthToken_Parms.ReturnValue;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ClientLogin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystemNether::Mber_ClientLogin ( )
{
	static UFunction* pFnMber_ClientLogin = NULL;

	if ( ! pFnMber_ClientLogin )
		pFnMber_ClientLogin = (UFunction*) UObject::GObjObjects()->Data[ 73718 ];

	UOnlineSubsystemNether_execMber_ClientLogin_Parms Mber_ClientLogin_Parms;

	pFnMber_ClientLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ClientLogin, &Mber_ClientLogin_Parms, NULL );

	pFnMber_ClientLogin->FunctionFlags |= 0x400;

	return Mber_ClientLogin_Parms.ReturnValue;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerList
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FServerDesc >   ServerListArray                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineSubsystemNether::Mber_ServerList ( TArray< struct FServerDesc >* ServerListArray )
{
	static UFunction* pFnMber_ServerList = NULL;

	if ( ! pFnMber_ServerList )
		pFnMber_ServerList = (UFunction*) UObject::GObjObjects()->Data[ 82229 ];

	UOnlineSubsystemNether_execMber_ServerList_Parms Mber_ServerList_Parms;

	pFnMber_ServerList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerList, &Mber_ServerList_Parms, NULL );

	pFnMber_ServerList->FunctionFlags |= 0x400;

	if ( ServerListArray )
		memcpy ( ServerListArray, &Mber_ServerList_Parms.ServerListArray, 0x10 );
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerHeartbeat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ServerTick                     ( CPF_Parm )

void UOnlineSubsystemNether::Mber_ServerHeartbeat ( float ServerTick )
{
	static UFunction* pFnMber_ServerHeartbeat = NULL;

	if ( ! pFnMber_ServerHeartbeat )
		pFnMber_ServerHeartbeat = (UFunction*) UObject::GObjObjects()->Data[ 82227 ];

	UOnlineSubsystemNether_execMber_ServerHeartbeat_Parms Mber_ServerHeartbeat_Parms;
	Mber_ServerHeartbeat_Parms.ServerTick = ServerTick;

	pFnMber_ServerHeartbeat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerHeartbeat, &Mber_ServerHeartbeat_Parms, NULL );

	pFnMber_ServerHeartbeat->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerRegister
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineSubsystemNether::Mber_ServerRegister ( )
{
	static UFunction* pFnMber_ServerRegister = NULL;

	if ( ! pFnMber_ServerRegister )
		pFnMber_ServerRegister = (UFunction*) UObject::GObjObjects()->Data[ 82226 ];

	UOnlineSubsystemNether_execMber_ServerRegister_Parms Mber_ServerRegister_Parms;

	pFnMber_ServerRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerRegister, &Mber_ServerRegister_Parms, NULL );

	pFnMber_ServerRegister->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerBanPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 PlayerID                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystemNether::Mber_ServerBanPlayer ( struct FString PlayerID )
{
	static UFunction* pFnMber_ServerBanPlayer = NULL;

	if ( ! pFnMber_ServerBanPlayer )
		pFnMber_ServerBanPlayer = (UFunction*) UObject::GObjObjects()->Data[ 82224 ];

	UOnlineSubsystemNether_execMber_ServerBanPlayer_Parms Mber_ServerBanPlayer_Parms;
	memcpy ( &Mber_ServerBanPlayer_Parms.PlayerID, &PlayerID, 0x10 );

	pFnMber_ServerBanPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerBanPlayer, &Mber_ServerBanPlayer_Parms, NULL );

	pFnMber_ServerBanPlayer->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerCleanupPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANetherPlayerController* PC                             ( CPF_Parm )

void UOnlineSubsystemNether::Mber_ServerCleanupPlayer ( class ANetherPlayerController* PC )
{
	static UFunction* pFnMber_ServerCleanupPlayer = NULL;

	if ( ! pFnMber_ServerCleanupPlayer )
		pFnMber_ServerCleanupPlayer = (UFunction*) UObject::GObjObjects()->Data[ 82222 ];

	UOnlineSubsystemNether_execMber_ServerCleanupPlayer_Parms Mber_ServerCleanupPlayer_Parms;
	Mber_ServerCleanupPlayer_Parms.PC = PC;

	pFnMber_ServerCleanupPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerCleanupPlayer, &Mber_ServerCleanupPlayer_Parms, NULL );

	pFnMber_ServerCleanupPlayer->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerSpendGoldFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANetherPlayerController* PC                             ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )
// int                            AmountSpent                    ( CPF_Parm )

void UOnlineSubsystemNether::Mber_ServerSpendGoldFor ( class ANetherPlayerController* PC, struct FString Reason, int AmountSpent )
{
	static UFunction* pFnMber_ServerSpendGoldFor = NULL;

	if ( ! pFnMber_ServerSpendGoldFor )
		pFnMber_ServerSpendGoldFor = (UFunction*) UObject::GObjObjects()->Data[ 82218 ];

	UOnlineSubsystemNether_execMber_ServerSpendGoldFor_Parms Mber_ServerSpendGoldFor_Parms;
	Mber_ServerSpendGoldFor_Parms.PC = PC;
	memcpy ( &Mber_ServerSpendGoldFor_Parms.Reason, &Reason, 0x10 );
	Mber_ServerSpendGoldFor_Parms.AmountSpent = AmountSpent;

	pFnMber_ServerSpendGoldFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerSpendGoldFor, &Mber_ServerSpendGoldFor_Parms, NULL );

	pFnMber_ServerSpendGoldFor->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerUpdateGoldAmount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANetherPlayerController* PC                             ( CPF_Parm )

void UOnlineSubsystemNether::Mber_ServerUpdateGoldAmount ( class ANetherPlayerController* PC )
{
	static UFunction* pFnMber_ServerUpdateGoldAmount = NULL;

	if ( ! pFnMber_ServerUpdateGoldAmount )
		pFnMber_ServerUpdateGoldAmount = (UFunction*) UObject::GObjObjects()->Data[ 82216 ];

	UOnlineSubsystemNether_execMber_ServerUpdateGoldAmount_Parms Mber_ServerUpdateGoldAmount_Parms;
	Mber_ServerUpdateGoldAmount_Parms.PC = PC;

	pFnMber_ServerUpdateGoldAmount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerUpdateGoldAmount, &Mber_ServerUpdateGoldAmount_Parms, NULL );

	pFnMber_ServerUpdateGoldAmount->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerDeleteServerDocs
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANetherPlayerControllerBase* PC                             ( CPF_Parm )

void UOnlineSubsystemNether::Mber_ServerDeleteServerDocs ( class ANetherPlayerControllerBase* PC )
{
	static UFunction* pFnMber_ServerDeleteServerDocs = NULL;

	if ( ! pFnMber_ServerDeleteServerDocs )
		pFnMber_ServerDeleteServerDocs = (UFunction*) UObject::GObjObjects()->Data[ 82214 ];

	UOnlineSubsystemNether_execMber_ServerDeleteServerDocs_Parms Mber_ServerDeleteServerDocs_Parms;
	Mber_ServerDeleteServerDocs_Parms.PC = PC;

	pFnMber_ServerDeleteServerDocs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerDeleteServerDocs, &Mber_ServerDeleteServerDocs_Parms, NULL );

	pFnMber_ServerDeleteServerDocs->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerAuthorizePlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANetherPlayerControllerBase* PC                             ( CPF_Parm )

bool UOnlineSubsystemNether::Mber_ServerAuthorizePlayer ( class ANetherPlayerControllerBase* PC )
{
	static UFunction* pFnMber_ServerAuthorizePlayer = NULL;

	if ( ! pFnMber_ServerAuthorizePlayer )
		pFnMber_ServerAuthorizePlayer = (UFunction*) UObject::GObjObjects()->Data[ 73797 ];

	UOnlineSubsystemNether_execMber_ServerAuthorizePlayer_Parms Mber_ServerAuthorizePlayer_Parms;
	Mber_ServerAuthorizePlayer_Parms.PC = PC;

	pFnMber_ServerAuthorizePlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerAuthorizePlayer, &Mber_ServerAuthorizePlayer_Parms, NULL );

	pFnMber_ServerAuthorizePlayer->FunctionFlags |= 0x400;

	return Mber_ServerAuthorizePlayer_Parms.ReturnValue;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerCreateData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANetherServerDocument*   Data                           ( CPF_Parm )

void UOnlineSubsystemNether::Mber_ServerCreateData ( class ANetherServerDocument* Data )
{
	static UFunction* pFnMber_ServerCreateData = NULL;

	if ( ! pFnMber_ServerCreateData )
		pFnMber_ServerCreateData = (UFunction*) UObject::GObjObjects()->Data[ 82211 ];

	UOnlineSubsystemNether_execMber_ServerCreateData_Parms Mber_ServerCreateData_Parms;
	Mber_ServerCreateData_Parms.Data = Data;

	pFnMber_ServerCreateData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerCreateData, &Mber_ServerCreateData_Parms, NULL );

	pFnMber_ServerCreateData->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerWriteData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANetherServerDocument*   Data                           ( CPF_Parm )

void UOnlineSubsystemNether::Mber_ServerWriteData ( class ANetherServerDocument* Data )
{
	static UFunction* pFnMber_ServerWriteData = NULL;

	if ( ! pFnMber_ServerWriteData )
		pFnMber_ServerWriteData = (UFunction*) UObject::GObjObjects()->Data[ 82209 ];

	UOnlineSubsystemNether_execMber_ServerWriteData_Parms Mber_ServerWriteData_Parms;
	Mber_ServerWriteData_Parms.Data = Data;

	pFnMber_ServerWriteData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerWriteData, &Mber_ServerWriteData_Parms, NULL );

	pFnMber_ServerWriteData->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.Mber_ServerLogin
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineSubsystemNether::Mber_ServerLogin ( )
{
	static UFunction* pFnMber_ServerLogin = NULL;

	if ( ! pFnMber_ServerLogin )
		pFnMber_ServerLogin = (UFunction*) UObject::GObjObjects()->Data[ 82208 ];

	UOnlineSubsystemNether_execMber_ServerLogin_Parms Mber_ServerLogin_Parms;

	pFnMber_ServerLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMber_ServerLogin, &Mber_ServerLogin_Parms, NULL );

	pFnMber_ServerLogin->FunctionFlags |= 0x400;
};

// Function NetherGame.OnlineSubsystemNether.CreateAuthInterface
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UOnlineAuthInterfaceSteamworks* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineAuthInterfaceSteamworks* UOnlineSubsystemNether::CreateAuthInterface ( )
{
	static UFunction* pFnCreateAuthInterface = NULL;

	if ( ! pFnCreateAuthInterface )
		pFnCreateAuthInterface = (UFunction*) UObject::GObjObjects()->Data[ 82206 ];

	UOnlineSubsystemNether_execCreateAuthInterface_Parms CreateAuthInterface_Parms;

	pFnCreateAuthInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateAuthInterface, &CreateAuthInterface_Parms, NULL );

	pFnCreateAuthInterface->FunctionFlags |= 0x400;

	return CreateAuthInterface_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByAggro.GetAggroDirection
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttackerDir                    ( CPF_Parm )

unsigned char UNetherAnimBlendByAggro::GetAggroDirection ( struct FVector AttackerDir )
{
	static UFunction* pFnGetAggroDirection = NULL;

	if ( ! pFnGetAggroDirection )
		pFnGetAggroDirection = (UFunction*) UObject::GObjObjects()->Data[ 70644 ];

	UNetherAnimBlendByAggro_execGetAggroDirection_Parms GetAggroDirection_Parms;
	memcpy ( &GetAggroDirection_Parms.AttackerDir, &AttackerDir, 0xC );

	this->ProcessEvent ( pFnGetAggroDirection, &GetAggroDirection_Parms, NULL );

	return GetAggroDirection_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByAggro.AnimStopAggroAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNetherAnimBlendByAggro::eventAnimStopAggroAction ( )
{
	static UFunction* pFnAnimStopAggroAction = NULL;

	if ( ! pFnAnimStopAggroAction )
		pFnAnimStopAggroAction = (UFunction*) UObject::GObjObjects()->Data[ 73128 ];

	UNetherAnimBlendByAggro_eventAnimStopAggroAction_Parms AnimStopAggroAction_Parms;

	this->ProcessEvent ( pFnAnimStopAggroAction, &AnimStopAggroAction_Parms, NULL );
};

// Function NetherGame.NetherAnimBlendByAggro.AnimPlayAggroAction
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AggroAction                    ( CPF_Parm )

float UNetherAnimBlendByAggro::AnimPlayAggroAction ( unsigned char AggroAction )
{
	static UFunction* pFnAnimPlayAggroAction = NULL;

	if ( ! pFnAnimPlayAggroAction )
		pFnAnimPlayAggroAction = (UFunction*) UObject::GObjObjects()->Data[ 70646 ];

	UNetherAnimBlendByAggro_execAnimPlayAggroAction_Parms AnimPlayAggroAction_Parms;
	AnimPlayAggroAction_Parms.AggroAction = AggroAction;

	this->ProcessEvent ( pFnAnimPlayAggroAction, &AnimPlayAggroAction_Parms, NULL );

	return AnimPlayAggroAction_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByHitReact.GetHitReactDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttackerDir                    ( CPF_Parm )

unsigned char UNetherAnimBlendByHitReact::GetHitReactDirection ( struct FVector AttackerDir )
{
	static UFunction* pFnGetHitReactDirection = NULL;

	if ( ! pFnGetHitReactDirection )
		pFnGetHitReactDirection = (UFunction*) UObject::GObjObjects()->Data[ 73155 ];

	UNetherAnimBlendByHitReact_execGetHitReactDirection_Parms GetHitReactDirection_Parms;
	memcpy ( &GetHitReactDirection_Parms.AttackerDir, &AttackerDir, 0xC );

	pFnGetHitReactDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHitReactDirection, &GetHitReactDirection_Parms, NULL );

	pFnGetHitReactDirection->FunctionFlags |= 0x400;

	return GetHitReactDirection_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByHitReact.AnimStopHitReact
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UNetherAnimBlendByHitReact::AnimStopHitReact ( )
{
	static UFunction* pFnAnimStopHitReact = NULL;

	if ( ! pFnAnimStopHitReact )
		pFnAnimStopHitReact = (UFunction*) UObject::GObjObjects()->Data[ 70712 ];

	UNetherAnimBlendByHitReact_execAnimStopHitReact_Parms AnimStopHitReact_Parms;

	pFnAnimStopHitReact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimStopHitReact, &AnimStopHitReact_Parms, NULL );

	pFnAnimStopHitReact->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherAnimBlendByHitReact.AnimPlayHitReact
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AttackerDir                    ( CPF_Parm )
// unsigned char                  PlayerPosture                  ( CPF_Parm )
// unsigned long                  bIsMeleeDamage                 ( CPF_Parm )
// unsigned long                  bIsMeleeBlocking               ( CPF_Parm )

float UNetherAnimBlendByHitReact::AnimPlayHitReact ( struct FVector AttackerDir, unsigned char PlayerPosture, unsigned long bIsMeleeDamage, unsigned long bIsMeleeBlocking )
{
	static UFunction* pFnAnimPlayHitReact = NULL;

	if ( ! pFnAnimPlayHitReact )
		pFnAnimPlayHitReact = (UFunction*) UObject::GObjObjects()->Data[ 70624 ];

	UNetherAnimBlendByHitReact_execAnimPlayHitReact_Parms AnimPlayHitReact_Parms;
	memcpy ( &AnimPlayHitReact_Parms.AttackerDir, &AttackerDir, 0xC );
	AnimPlayHitReact_Parms.PlayerPosture = PlayerPosture;
	AnimPlayHitReact_Parms.bIsMeleeDamage = bIsMeleeDamage;
	AnimPlayHitReact_Parms.bIsMeleeBlocking = bIsMeleeBlocking;

	pFnAnimPlayHitReact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimPlayHitReact, &AnimPlayHitReact_Parms, NULL );

	pFnAnimPlayHitReact->FunctionFlags |= 0x400;

	return AnimPlayHitReact_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByHitReact.IsPlayingAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherAnimBlendByHitReact::IsPlayingAnim ( )
{
	static UFunction* pFnIsPlayingAnim = NULL;

	if ( ! pFnIsPlayingAnim )
		pFnIsPlayingAnim = (UFunction*) UObject::GObjObjects()->Data[ 73149 ];

	UNetherAnimBlendByHitReact_execIsPlayingAnim_Parms IsPlayingAnim_Parms;

	pFnIsPlayingAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingAnim, &IsPlayingAnim_Parms, NULL );

	pFnIsPlayingAnim->FunctionFlags |= 0x400;

	return IsPlayingAnim_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByMeleeAction.StopMeleeAction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UNetherAnimBlendByMeleeAction::StopMeleeAction ( )
{
	static UFunction* pFnStopMeleeAction = NULL;

	if ( ! pFnStopMeleeAction )
		pFnStopMeleeAction = (UFunction*) UObject::GObjObjects()->Data[ 73178 ];

	UNetherAnimBlendByMeleeAction_execStopMeleeAction_Parms StopMeleeAction_Parms;

	pFnStopMeleeAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMeleeAction, &StopMeleeAction_Parms, NULL );

	pFnStopMeleeAction->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherAnimBlendByMeleeAction.BeginMeleeBlock
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UNetherAnimBlendByMeleeAction::BeginMeleeBlock ( )
{
	static UFunction* pFnBeginMeleeBlock = NULL;

	if ( ! pFnBeginMeleeBlock )
		pFnBeginMeleeBlock = (UFunction*) UObject::GObjObjects()->Data[ 73177 ];

	UNetherAnimBlendByMeleeAction_execBeginMeleeBlock_Parms BeginMeleeBlock_Parms;

	pFnBeginMeleeBlock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginMeleeBlock, &BeginMeleeBlock_Parms, NULL );

	pFnBeginMeleeBlock->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherAnimBlendByMeleeAction.ReleaseMeleeAttack
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsExhausted                   ( CPF_OptionalParm | CPF_Parm )
// float                          AnimDuration                   ( CPF_Parm | CPF_OutParm )

unsigned char UNetherAnimBlendByMeleeAction::ReleaseMeleeAttack ( unsigned long bIsExhausted, float* AnimDuration )
{
	static UFunction* pFnReleaseMeleeAttack = NULL;

	if ( ! pFnReleaseMeleeAttack )
		pFnReleaseMeleeAttack = (UFunction*) UObject::GObjObjects()->Data[ 73173 ];

	UNetherAnimBlendByMeleeAction_execReleaseMeleeAttack_Parms ReleaseMeleeAttack_Parms;
	ReleaseMeleeAttack_Parms.bIsExhausted = bIsExhausted;

	pFnReleaseMeleeAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseMeleeAttack, &ReleaseMeleeAttack_Parms, NULL );

	pFnReleaseMeleeAttack->FunctionFlags |= 0x400;

	if ( AnimDuration )
		*AnimDuration = ReleaseMeleeAttack_Parms.AnimDuration;

	return ReleaseMeleeAttack_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByMeleeAction.BeginMeleeHeavyAttack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UNetherAnimBlendByMeleeAction::BeginMeleeHeavyAttack ( )
{
	static UFunction* pFnBeginMeleeHeavyAttack = NULL;

	if ( ! pFnBeginMeleeHeavyAttack )
		pFnBeginMeleeHeavyAttack = (UFunction*) UObject::GObjObjects()->Data[ 73172 ];

	UNetherAnimBlendByMeleeAction_execBeginMeleeHeavyAttack_Parms BeginMeleeHeavyAttack_Parms;

	pFnBeginMeleeHeavyAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginMeleeHeavyAttack, &BeginMeleeHeavyAttack_Parms, NULL );

	pFnBeginMeleeHeavyAttack->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherAnimBlendByOneOff.EndCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

void UNetherAnimBlendByOneOff::EndCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnEndCustomAnim = NULL;

	if ( ! pFnEndCustomAnim )
		pFnEndCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 70721 ];

	UNetherAnimBlendByOneOff_execEndCustomAnim_Parms EndCustomAnim_Parms;
	EndCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnEndCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndCustomAnim, &EndCustomAnim_Parms, NULL );

	pFnEndCustomAnim->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherAnimBlendByOneOff.IsPlayingAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherAnimBlendByOneOff::IsPlayingAnim ( )
{
	static UFunction* pFnIsPlayingAnim = NULL;

	if ( ! pFnIsPlayingAnim )
		pFnIsPlayingAnim = (UFunction*) UObject::GObjObjects()->Data[ 73185 ];

	UNetherAnimBlendByOneOff_execIsPlayingAnim_Parms IsPlayingAnim_Parms;

	pFnIsPlayingAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingAnim, &IsPlayingAnim_Parms, NULL );

	pFnIsPlayingAnim->FunctionFlags |= 0x400;

	return IsPlayingAnim_Parms.ReturnValue;
};

// Function NetherGame.NetherAnimBlendByOneOff.BeginCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CustomAnimName                 ( CPF_Parm )
// float                          AnimRate                       ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

float UNetherAnimBlendByOneOff::BeginCustomAnim ( struct FName CustomAnimName, float AnimRate, float BlendInTime, float BlendOutTime )
{
	static UFunction* pFnBeginCustomAnim = NULL;

	if ( ! pFnBeginCustomAnim )
		pFnBeginCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 70719 ];

	UNetherAnimBlendByOneOff_execBeginCustomAnim_Parms BeginCustomAnim_Parms;
	memcpy ( &BeginCustomAnim_Parms.CustomAnimName, &CustomAnimName, 0x8 );
	BeginCustomAnim_Parms.AnimRate = AnimRate;
	BeginCustomAnim_Parms.BlendInTime = BlendInTime;
	BeginCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnBeginCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginCustomAnim, &BeginCustomAnim_Parms, NULL );

	pFnBeginCustomAnim->FunctionFlags |= 0x400;

	return BeginCustomAnim_Parms.ReturnValue;
};

// Function NetherGame.NetherCameraMode_Socket.OnBecomeActive
// [0x00020002] 
// Parameters infos:
// class APawn*                   CameraTarget                   ( CPF_Parm )
// class UGameThirdPersonCameraMode* PrevMode                       ( CPF_Parm )

void UNetherCameraMode_Socket::OnBecomeActive ( class APawn* CameraTarget, class UGameThirdPersonCameraMode* PrevMode )
{
	static UFunction* pFnOnBecomeActive = NULL;

	if ( ! pFnOnBecomeActive )
		pFnOnBecomeActive = (UFunction*) UObject::GObjObjects()->Data[ 73198 ];

	UNetherCameraMode_Socket_execOnBecomeActive_Parms OnBecomeActive_Parms;
	OnBecomeActive_Parms.CameraTarget = CameraTarget;
	OnBecomeActive_Parms.PrevMode = PrevMode;

	this->ProcessEvent ( pFnOnBecomeActive, &OnBecomeActive_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClearAsyncOps
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANetherPlayerController::ClearAsyncOps ( )
{
	static UFunction* pFnClearAsyncOps = NULL;

	if ( ! pFnClearAsyncOps )
		pFnClearAsyncOps = (UFunction*) UObject::GObjObjects()->Data[ 75384 ];

	ANetherPlayerController_execClearAsyncOps_Parms ClearAsyncOps_Parms;

	pFnClearAsyncOps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAsyncOps, &ClearAsyncOps_Parms, NULL );

	pFnClearAsyncOps->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherPlayerController.CheckBulletWhip
// [0x00820002] 
// Parameters infos:
// class UAkEvent*                BulletWhip                     ( CPF_Parm )
// struct FVector                 FireLocation                   ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ANetherPlayerController::CheckBulletWhip ( class UAkEvent* BulletWhip, struct FVector FireLocation, struct FVector FireDir, struct FVector HitLocation )
{
	static UFunction* pFnCheckBulletWhip = NULL;

	if ( ! pFnCheckBulletWhip )
		pFnCheckBulletWhip = (UFunction*) UObject::GObjObjects()->Data[ 75385 ];

	ANetherPlayerController_execCheckBulletWhip_Parms CheckBulletWhip_Parms;
	CheckBulletWhip_Parms.BulletWhip = BulletWhip;
	memcpy ( &CheckBulletWhip_Parms.FireLocation, &FireLocation, 0xC );
	memcpy ( &CheckBulletWhip_Parms.FireDir, &FireDir, 0xC );
	memcpy ( &CheckBulletWhip_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnCheckBulletWhip, &CheckBulletWhip_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UpdateGoldAmount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::UpdateGoldAmount ( )
{
	static UFunction* pFnUpdateGoldAmount = NULL;

	if ( ! pFnUpdateGoldAmount )
		pFnUpdateGoldAmount = (UFunction*) UObject::GObjObjects()->Data[ 75386 ];

	ANetherPlayerController_execUpdateGoldAmount_Parms UpdateGoldAmount_Parms;

	this->ProcessEvent ( pFnUpdateGoldAmount, &UpdateGoldAmount_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TryPurchaseTemplatePremium
// [0x002200C2] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TemplateID                     ( CPF_Parm )

bool ANetherPlayerController::TryPurchaseTemplatePremium ( int TemplateID )
{
	static UFunction* pFnTryPurchaseTemplatePremium = NULL;

	if ( ! pFnTryPurchaseTemplatePremium )
		pFnTryPurchaseTemplatePremium = (UFunction*) UObject::GObjObjects()->Data[ 75394 ];

	ANetherPlayerController_execTryPurchaseTemplatePremium_Parms TryPurchaseTemplatePremium_Parms;
	TryPurchaseTemplatePremium_Parms.TemplateID = TemplateID;

	this->ProcessEvent ( pFnTryPurchaseTemplatePremium, &TryPurchaseTemplatePremium_Parms, NULL );

	return TryPurchaseTemplatePremium_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.TryPurchaseItemPremium
// [0x002200C2] 
// Parameters infos:
// int                            ItemId                         ( CPF_Parm )

void ANetherPlayerController::TryPurchaseItemPremium ( int ItemId )
{
	static UFunction* pFnTryPurchaseItemPremium = NULL;

	if ( ! pFnTryPurchaseItemPremium )
		pFnTryPurchaseItemPremium = (UFunction*) UObject::GObjObjects()->Data[ 75397 ];

	ANetherPlayerController_execTryPurchaseItemPremium_Parms TryPurchaseItemPremium_Parms;
	TryPurchaseItemPremium_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnTryPurchaseItemPremium, &TryPurchaseItemPremium_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TryPurchaseItem
// [0x002200C2] 
// Parameters infos:
// int                            ItemId                         ( CPF_Parm )

void ANetherPlayerController::TryPurchaseItem ( int ItemId )
{
	static UFunction* pFnTryPurchaseItem = NULL;

	if ( ! pFnTryPurchaseItem )
		pFnTryPurchaseItem = (UFunction*) UObject::GObjObjects()->Data[ 75406 ];

	ANetherPlayerController_execTryPurchaseItem_Parms TryPurchaseItem_Parms;
	TryPurchaseItem_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnTryPurchaseItem, &TryPurchaseItem_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetFirstOpenSlot
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemType                       ( CPF_Parm )

int ANetherPlayerController::GetFirstOpenSlot ( int ItemType )
{
	static UFunction* pFnGetFirstOpenSlot = NULL;

	if ( ! pFnGetFirstOpenSlot )
		pFnGetFirstOpenSlot = (UFunction*) UObject::GObjObjects()->Data[ 74666 ];

	ANetherPlayerController_execGetFirstOpenSlot_Parms GetFirstOpenSlot_Parms;
	GetFirstOpenSlot_Parms.ItemType = ItemType;

	this->ProcessEvent ( pFnGetFirstOpenSlot, &GetFirstOpenSlot_Parms, NULL );

	return GetFirstOpenSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ClientResetInventoryUI
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::ClientResetInventoryUI ( )
{
	static UFunction* pFnClientResetInventoryUI = NULL;

	if ( ! pFnClientResetInventoryUI )
		pFnClientResetInventoryUI = (UFunction*) UObject::GObjObjects()->Data[ 75416 ];

	ANetherPlayerController_execClientResetInventoryUI_Parms ClientResetInventoryUI_Parms;

	this->ProcessEvent ( pFnClientResetInventoryUI, &ClientResetInventoryUI_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerTrySellItem
// [0x002200C2] 
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )

void ANetherPlayerController::ServerTrySellItem ( int SlotNumber )
{
	static UFunction* pFnServerTrySellItem = NULL;

	if ( ! pFnServerTrySellItem )
		pFnServerTrySellItem = (UFunction*) UObject::GObjObjects()->Data[ 75419 ];

	ANetherPlayerController_execServerTrySellItem_Parms ServerTrySellItem_Parms;
	ServerTrySellItem_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnServerTrySellItem, &ServerTrySellItem_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CompleteTrade
// [0x002200C2] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )
// class UObject*                 BarterObject                   ( CPF_Parm )

int ANetherPlayerController::CompleteTrade ( class UGFxButton* Button, class UObject* BarterObject )
{
	static UFunction* pFnCompleteTrade = NULL;

	if ( ! pFnCompleteTrade )
		pFnCompleteTrade = (UFunction*) UObject::GObjObjects()->Data[ 75423 ];

	ANetherPlayerController_execCompleteTrade_Parms CompleteTrade_Parms;
	CompleteTrade_Parms.Button = Button;
	CompleteTrade_Parms.BarterObject = BarterObject;

	this->ProcessEvent ( pFnCompleteTrade, &CompleteTrade_Parms, NULL );

	return CompleteTrade_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ClientShowBarterPopup
// [0x010201C2] 
// Parameters infos:
// struct FString                 TradeDescription               ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bPlayerHasItems                ( CPF_Parm )
// class ANInteractiveObject_Barter* BarterObject                   ( CPF_Parm )

void ANetherPlayerController::ClientShowBarterPopup ( struct FString TradeDescription, unsigned long bPlayerHasItems, class ANInteractiveObject_Barter* BarterObject )
{
	static UFunction* pFnClientShowBarterPopup = NULL;

	if ( ! pFnClientShowBarterPopup )
		pFnClientShowBarterPopup = (UFunction*) UObject::GObjObjects()->Data[ 75434 ];

	ANetherPlayerController_execClientShowBarterPopup_Parms ClientShowBarterPopup_Parms;
	memcpy ( &ClientShowBarterPopup_Parms.TradeDescription, &TradeDescription, 0x10 );
	ClientShowBarterPopup_Parms.bPlayerHasItems = bPlayerHasItems;
	ClientShowBarterPopup_Parms.BarterObject = BarterObject;

	this->ProcessEvent ( pFnClientShowBarterPopup, &ClientShowBarterPopup_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientPlayLocalSound
// [0x010201C2] 
// Parameters infos:
// class UAkEvent*                Sound                          ( CPF_Parm )

void ANetherPlayerController::ClientPlayLocalSound ( class UAkEvent* Sound )
{
	static UFunction* pFnClientPlayLocalSound = NULL;

	if ( ! pFnClientPlayLocalSound )
		pFnClientPlayLocalSound = (UFunction*) UObject::GObjObjects()->Data[ 75438 ];

	ANetherPlayerController_execClientPlayLocalSound_Parms ClientPlayLocalSound_Parms;
	ClientPlayLocalSound_Parms.Sound = Sound;

	this->ProcessEvent ( pFnClientPlayLocalSound, &ClientPlayLocalSound_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClearClientHeader
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::ClearClientHeader ( )
{
	static UFunction* pFnClearClientHeader = NULL;

	if ( ! pFnClearClientHeader )
		pFnClearClientHeader = (UFunction*) UObject::GObjObjects()->Data[ 75442 ];

	ANetherPlayerController_execClearClientHeader_Parms ClearClientHeader_Parms;

	this->ProcessEvent ( pFnClearClientHeader, &ClearClientHeader_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UpdateClientHeader
// [0x010201C2] 
// Parameters infos:
// struct FString                 HeaderContents                 ( CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::UpdateClientHeader ( struct FString HeaderContents )
{
	static UFunction* pFnUpdateClientHeader = NULL;

	if ( ! pFnUpdateClientHeader )
		pFnUpdateClientHeader = (UFunction*) UObject::GObjObjects()->Data[ 75444 ];

	ANetherPlayerController_execUpdateClientHeader_Parms UpdateClientHeader_Parms;
	memcpy ( &UpdateClientHeader_Parms.HeaderContents, &HeaderContents, 0x10 );

	this->ProcessEvent ( pFnUpdateClientHeader, &UpdateClientHeader_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientPostNote
// [0x010201C2] 
// Parameters infos:
// struct FString                 Note                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          NoteTime                       ( CPF_Parm )

void ANetherPlayerController::ClientPostNote ( struct FString Note, float NoteTime )
{
	static UFunction* pFnClientPostNote = NULL;

	if ( ! pFnClientPostNote )
		pFnClientPostNote = (UFunction*) UObject::GObjObjects()->Data[ 75445 ];

	ANetherPlayerController_execClientPostNote_Parms ClientPostNote_Parms;
	memcpy ( &ClientPostNote_Parms.Note, &Note, 0x10 );
	ClientPostNote_Parms.NoteTime = NoteTime;

	this->ProcessEvent ( pFnClientPostNote, &ClientPostNote_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PostABigMessageToClient
// [0x010241C2] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bShowImmediately               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bClearQueue                    ( CPF_OptionalParm | CPF_Parm )

void ANetherPlayerController::PostABigMessageToClient ( struct FString Message, unsigned long bShowImmediately, unsigned long bClearQueue )
{
	static UFunction* pFnPostABigMessageToClient = NULL;

	if ( ! pFnPostABigMessageToClient )
		pFnPostABigMessageToClient = (UFunction*) UObject::GObjObjects()->Data[ 75447 ];

	ANetherPlayerController_execPostABigMessageToClient_Parms PostABigMessageToClient_Parms;
	memcpy ( &PostABigMessageToClient_Parms.Message, &Message, 0x10 );
	PostABigMessageToClient_Parms.bShowImmediately = bShowImmediately;
	PostABigMessageToClient_Parms.bClearQueue = bClearQueue;

	this->ProcessEvent ( pFnPostABigMessageToClient, &PostABigMessageToClient_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientStopPickupTimer
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bSkipAnimation                 ( CPF_Parm )

void ANetherPlayerController::ClientStopPickupTimer ( unsigned long bSkipAnimation )
{
	static UFunction* pFnClientStopPickupTimer = NULL;

	if ( ! pFnClientStopPickupTimer )
		pFnClientStopPickupTimer = (UFunction*) UObject::GObjObjects()->Data[ 75450 ];

	ANetherPlayerController_execClientStopPickupTimer_Parms ClientStopPickupTimer_Parms;
	ClientStopPickupTimer_Parms.bSkipAnimation = bSkipAnimation;

	this->ProcessEvent ( pFnClientStopPickupTimer, &ClientStopPickupTimer_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientStartPickUpTimer
// [0x010201C2] 
// Parameters infos:
// float                          AdjustedPickUpTime             ( CPF_Parm )
// class AInventory*              Inv                            ( CPF_Parm )

void ANetherPlayerController::ClientStartPickUpTimer ( float AdjustedPickUpTime, class AInventory* Inv )
{
	static UFunction* pFnClientStartPickUpTimer = NULL;

	if ( ! pFnClientStartPickUpTimer )
		pFnClientStartPickUpTimer = (UFunction*) UObject::GObjObjects()->Data[ 75454 ];

	ANetherPlayerController_execClientStartPickUpTimer_Parms ClientStartPickUpTimer_Parms;
	ClientStartPickUpTimer_Parms.AdjustedPickUpTime = AdjustedPickUpTime;
	ClientStartPickUpTimer_Parms.Inv = Inv;

	this->ProcessEvent ( pFnClientStartPickUpTimer, &ClientStartPickUpTimer_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.NetherServerStopUse
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::NetherServerStopUse ( )
{
	static UFunction* pFnNetherServerStopUse = NULL;

	if ( ! pFnNetherServerStopUse )
		pFnNetherServerStopUse = (UFunction*) UObject::GObjObjects()->Data[ 75456 ];

	ANetherPlayerController_execNetherServerStopUse_Parms NetherServerStopUse_Parms;

	this->ProcessEvent ( pFnNetherServerStopUse, &NetherServerStopUse_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.StopUse
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::StopUse ( )
{
	static UFunction* pFnStopUse = NULL;

	if ( ! pFnStopUse )
		pFnStopUse = (UFunction*) UObject::GObjObjects()->Data[ 75459 ];

	ANetherPlayerController_execStopUse_Parms StopUse_Parms;

	this->ProcessEvent ( pFnStopUse, &StopUse_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.NetherServerUse
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::NetherServerUse ( )
{
	static UFunction* pFnNetherServerUse = NULL;

	if ( ! pFnNetherServerUse )
		pFnNetherServerUse = (UFunction*) UObject::GObjObjects()->Data[ 75460 ];

	ANetherPlayerController_execNetherServerUse_Parms NetherServerUse_Parms;

	this->ProcessEvent ( pFnNetherServerUse, &NetherServerUse_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.Use
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::Use ( )
{
	static UFunction* pFnUse = NULL;

	if ( ! pFnUse )
		pFnUse = (UFunction*) UObject::GObjObjects()->Data[ 75461 ];

	ANetherPlayerController_execUse_Parms Use_Parms;

	this->ProcessEvent ( pFnUse, &Use_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.FindPickup
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ANetherPlayerController::FindPickup ( )
{
	static UFunction* pFnFindPickup = NULL;

	if ( ! pFnFindPickup )
		pFnFindPickup = (UFunction*) UObject::GObjObjects()->Data[ 75463 ];

	ANetherPlayerController_execFindPickup_Parms FindPickup_Parms;

	this->ProcessEvent ( pFnFindPickup, &FindPickup_Parms, NULL );

	return FindPickup_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.IsValidPickup
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool ANetherPlayerController::IsValidPickup ( class AActor* Pickup )
{
	static UFunction* pFnIsValidPickup = NULL;

	if ( ! pFnIsValidPickup )
		pFnIsValidPickup = (UFunction*) UObject::GObjObjects()->Data[ 75464 ];

	ANetherPlayerController_execIsValidPickup_Parms IsValidPickup_Parms;
	IsValidPickup_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnIsValidPickup, &IsValidPickup_Parms, NULL );

	return IsValidPickup_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ResetAttributes
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::ResetAttributes ( )
{
	static UFunction* pFnResetAttributes = NULL;

	if ( ! pFnResetAttributes )
		pFnResetAttributes = (UFunction*) UObject::GObjObjects()->Data[ 75480 ];

	ANetherPlayerController_execResetAttributes_Parms ResetAttributes_Parms;

	this->ProcessEvent ( pFnResetAttributes, &ResetAttributes_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientPawnDied
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::ClientPawnDied ( )
{
	static UFunction* pFnClientPawnDied = NULL;

	if ( ! pFnClientPawnDied )
		pFnClientPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 75493 ];

	ANetherPlayerController_execClientPawnDied_Parms ClientPawnDied_Parms;

	this->ProcessEvent ( pFnClientPawnDied, &ClientPawnDied_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )

void ANetherPlayerController::PawnDied ( class APawn* inPawn )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 75494 ];

	ANetherPlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ANetherPlayerController::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 75496 ];

	ANetherPlayerController_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetBloodLevelNoiseScale
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPlayerController::eventGetBloodLevelNoiseScale ( )
{
	static UFunction* pFnGetBloodLevelNoiseScale = NULL;

	if ( ! pFnGetBloodLevelNoiseScale )
		pFnGetBloodLevelNoiseScale = (UFunction*) UObject::GObjObjects()->Data[ 75500 ];

	ANetherPlayerController_eventGetBloodLevelNoiseScale_Parms GetBloodLevelNoiseScale_Parms;

	this->ProcessEvent ( pFnGetBloodLevelNoiseScale, &GetBloodLevelNoiseScale_Parms, NULL );

	return GetBloodLevelNoiseScale_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetBloodLevel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetBloodLevel ( )
{
	static UFunction* pFnGetBloodLevel = NULL;

	if ( ! pFnGetBloodLevel )
		pFnGetBloodLevel = (UFunction*) UObject::GObjObjects()->Data[ 75505 ];

	ANetherPlayerController_execGetBloodLevel_Parms GetBloodLevel_Parms;

	this->ProcessEvent ( pFnGetBloodLevel, &GetBloodLevel_Parms, NULL );

	return GetBloodLevel_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.AddBloodPoint
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::AddBloodPoint ( )
{
	static UFunction* pFnAddBloodPoint = NULL;

	if ( ! pFnAddBloodPoint )
		pFnAddBloodPoint = (UFunction*) UObject::GObjObjects()->Data[ 75511 ];

	ANetherPlayerController_execAddBloodPoint_Parms AddBloodPoint_Parms;

	this->ProcessEvent ( pFnAddBloodPoint, &AddBloodPoint_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CountdownBloodMeter
// [0x00020102] 
// Parameters infos:

void ANetherPlayerController::CountdownBloodMeter ( )
{
	static UFunction* pFnCountdownBloodMeter = NULL;

	if ( ! pFnCountdownBloodMeter )
		pFnCountdownBloodMeter = (UFunction*) UObject::GObjObjects()->Data[ 75513 ];

	ANetherPlayerController_execCountdownBloodMeter_Parms CountdownBloodMeter_Parms;

	this->ProcessEvent ( pFnCountdownBloodMeter, &CountdownBloodMeter_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.OnBloodPointsChanged
// [0x00020102] 
// Parameters infos:
// int                            NewBloodPoints                 ( CPF_Parm )

void ANetherPlayerController::OnBloodPointsChanged ( int NewBloodPoints )
{
	static UFunction* pFnOnBloodPointsChanged = NULL;

	if ( ! pFnOnBloodPointsChanged )
		pFnOnBloodPointsChanged = (UFunction*) UObject::GObjObjects()->Data[ 75514 ];

	ANetherPlayerController_execOnBloodPointsChanged_Parms OnBloodPointsChanged_Parms;
	OnBloodPointsChanged_Parms.NewBloodPoints = NewBloodPoints;

	this->ProcessEvent ( pFnOnBloodPointsChanged, &OnBloodPointsChanged_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANetherPlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 75515 ];

	ANetherPlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerTestBloodPointAdd
// [0x002200C0] 
// Parameters infos:

void ANetherPlayerController::ServerTestBloodPointAdd ( )
{
	static UFunction* pFnServerTestBloodPointAdd = NULL;

	if ( ! pFnServerTestBloodPointAdd )
		pFnServerTestBloodPointAdd = (UFunction*) UObject::GObjObjects()->Data[ 75517 ];

	ANetherPlayerController_execServerTestBloodPointAdd_Parms ServerTestBloodPointAdd_Parms;

	this->ProcessEvent ( pFnServerTestBloodPointAdd, &ServerTestBloodPointAdd_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TestBloodPointAdd
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::TestBloodPointAdd ( )
{
	static UFunction* pFnTestBloodPointAdd = NULL;

	if ( ! pFnTestBloodPointAdd )
		pFnTestBloodPointAdd = (UFunction*) UObject::GObjObjects()->Data[ 75518 ];

	ANetherPlayerController_execTestBloodPointAdd_Parms TestBloodPointAdd_Parms;

	this->ProcessEvent ( pFnTestBloodPointAdd, &TestBloodPointAdd_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientSetMenuGroupSoundState
// [0x010201C2] 
// Parameters infos:
// struct FName                   InState                        ( CPF_Parm )

void ANetherPlayerController::ClientSetMenuGroupSoundState ( struct FName InState )
{
	static UFunction* pFnClientSetMenuGroupSoundState = NULL;

	if ( ! pFnClientSetMenuGroupSoundState )
		pFnClientSetMenuGroupSoundState = (UFunction*) UObject::GObjObjects()->Data[ 75633 ];

	ANetherPlayerController_execClientSetMenuGroupSoundState_Parms ClientSetMenuGroupSoundState_Parms;
	memcpy ( &ClientSetMenuGroupSoundState_Parms.InState, &InState, 0x8 );

	this->ProcessEvent ( pFnClientSetMenuGroupSoundState, &ClientSetMenuGroupSoundState_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientDisconnect
// [0x010201C0] 
// Parameters infos:

void ANetherPlayerController::ClientDisconnect ( )
{
	static UFunction* pFnClientDisconnect = NULL;

	if ( ! pFnClientDisconnect )
		pFnClientDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 75635 ];

	ANetherPlayerController_execClientDisconnect_Parms ClientDisconnect_Parms;

	this->ProcessEvent ( pFnClientDisconnect, &ClientDisconnect_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerEnablePlayerMovement
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerEnablePlayerMovement ( )
{
	static UFunction* pFnServerEnablePlayerMovement = NULL;

	if ( ! pFnServerEnablePlayerMovement )
		pFnServerEnablePlayerMovement = (UFunction*) UObject::GObjObjects()->Data[ 75591 ];

	ANetherPlayerController_execServerEnablePlayerMovement_Parms ServerEnablePlayerMovement_Parms;

	this->ProcessEvent ( pFnServerEnablePlayerMovement, &ServerEnablePlayerMovement_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.EnablePlayerMovement
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::EnablePlayerMovement ( )
{
	static UFunction* pFnEnablePlayerMovement = NULL;

	if ( ! pFnEnablePlayerMovement )
		pFnEnablePlayerMovement = (UFunction*) UObject::GObjObjects()->Data[ 75645 ];

	ANetherPlayerController_execEnablePlayerMovement_Parms EnablePlayerMovement_Parms;

	this->ProcessEvent ( pFnEnablePlayerMovement, &EnablePlayerMovement_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerDisablePlayerMovement
// [0x002200C2] 
// Parameters infos:
// struct FName                   DisabledState                  ( CPF_Parm )

void ANetherPlayerController::ServerDisablePlayerMovement ( struct FName DisabledState )
{
	static UFunction* pFnServerDisablePlayerMovement = NULL;

	if ( ! pFnServerDisablePlayerMovement )
		pFnServerDisablePlayerMovement = (UFunction*) UObject::GObjObjects()->Data[ 75647 ];

	ANetherPlayerController_execServerDisablePlayerMovement_Parms ServerDisablePlayerMovement_Parms;
	memcpy ( &ServerDisablePlayerMovement_Parms.DisabledState, &DisabledState, 0x8 );

	this->ProcessEvent ( pFnServerDisablePlayerMovement, &ServerDisablePlayerMovement_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DisablePlayerMovement
// [0x00024002] 
// Parameters infos:
// struct FName                   DisabledState                  ( CPF_OptionalParm | CPF_Parm )

void ANetherPlayerController::DisablePlayerMovement ( struct FName DisabledState )
{
	static UFunction* pFnDisablePlayerMovement = NULL;

	if ( ! pFnDisablePlayerMovement )
		pFnDisablePlayerMovement = (UFunction*) UObject::GObjObjects()->Data[ 75657 ];

	ANetherPlayerController_execDisablePlayerMovement_Parms DisablePlayerMovement_Parms;
	memcpy ( &DisablePlayerMovement_Parms.DisabledState, &DisabledState, 0x8 );

	this->ProcessEvent ( pFnDisablePlayerMovement, &DisablePlayerMovement_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PlayerIsDisconnecting
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::PlayerIsDisconnecting ( )
{
	static UFunction* pFnPlayerIsDisconnecting = NULL;

	if ( ! pFnPlayerIsDisconnecting )
		pFnPlayerIsDisconnecting = (UFunction*) UObject::GObjObjects()->Data[ 75641 ];

	ANetherPlayerController_execPlayerIsDisconnecting_Parms PlayerIsDisconnecting_Parms;

	this->ProcessEvent ( pFnPlayerIsDisconnecting, &PlayerIsDisconnecting_Parms, NULL );

	return PlayerIsDisconnecting_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.IsPlayerGrabbingItem
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::IsPlayerGrabbingItem ( )
{
	static UFunction* pFnIsPlayerGrabbingItem = NULL;

	if ( ! pFnIsPlayerGrabbingItem )
		pFnIsPlayerGrabbingItem = (UFunction*) UObject::GObjObjects()->Data[ 75642 ];

	ANetherPlayerController_execIsPlayerGrabbingItem_Parms IsPlayerGrabbingItem_Parms;

	this->ProcessEvent ( pFnIsPlayerGrabbingItem, &IsPlayerGrabbingItem_Parms, NULL );

	return IsPlayerGrabbingItem_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.PlayerIsUpdatingWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::PlayerIsUpdatingWeapon ( )
{
	static UFunction* pFnPlayerIsUpdatingWeapon = NULL;

	if ( ! pFnPlayerIsUpdatingWeapon )
		pFnPlayerIsUpdatingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74107 ];

	ANetherPlayerController_execPlayerIsUpdatingWeapon_Parms PlayerIsUpdatingWeapon_Parms;

	this->ProcessEvent ( pFnPlayerIsUpdatingWeapon, &PlayerIsUpdatingWeapon_Parms, NULL );

	return PlayerIsUpdatingWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.OnEndWeaponUpdate
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::OnEndWeaponUpdate ( )
{
	static UFunction* pFnOnEndWeaponUpdate = NULL;

	if ( ! pFnOnEndWeaponUpdate )
		pFnOnEndWeaponUpdate = (UFunction*) UObject::GObjObjects()->Data[ 75593 ];

	ANetherPlayerController_execOnEndWeaponUpdate_Parms OnEndWeaponUpdate_Parms;

	this->ProcessEvent ( pFnOnEndWeaponUpdate, &OnEndWeaponUpdate_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.OnBeginWeaponUpdate
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::OnBeginWeaponUpdate ( )
{
	static UFunction* pFnOnBeginWeaponUpdate = NULL;

	if ( ! pFnOnBeginWeaponUpdate )
		pFnOnBeginWeaponUpdate = (UFunction*) UObject::GObjObjects()->Data[ 75692 ];

	ANetherPlayerController_execOnBeginWeaponUpdate_Parms OnBeginWeaponUpdate_Parms;

	this->ProcessEvent ( pFnOnBeginWeaponUpdate, &OnBeginWeaponUpdate_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PlayerIsDisabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::PlayerIsDisabled ( )
{
	static UFunction* pFnPlayerIsDisabled = NULL;

	if ( ! pFnPlayerIsDisabled )
		pFnPlayerIsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 74105 ];

	ANetherPlayerController_execPlayerIsDisabled_Parms PlayerIsDisabled_Parms;

	this->ProcessEvent ( pFnPlayerIsDisabled, &PlayerIsDisabled_Parms, NULL );

	return PlayerIsDisabled_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.Taunt
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// int                            TauntIndex                     ( CPF_Parm )

void ANetherPlayerController::Taunt ( int TauntIndex )
{
	static UFunction* pFnTaunt = NULL;

	if ( ! pFnTaunt )
		pFnTaunt = (UFunction*) UObject::GObjObjects()->Data[ 75622 ];

	ANetherPlayerController_execTaunt_Parms Taunt_Parms;
	Taunt_Parms.TauntIndex = TauntIndex;

	this->ProcessEvent ( pFnTaunt, &Taunt_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PlayBeepSound
// [0x00020100] 
// Parameters infos:

void ANetherPlayerController::PlayBeepSound ( )
{
	static UFunction* pFnPlayBeepSound = NULL;

	if ( ! pFnPlayBeepSound )
		pFnPlayBeepSound = (UFunction*) UObject::GObjObjects()->Data[ 75693 ];

	ANetherPlayerController_execPlayBeepSound_Parms PlayBeepSound_Parms;

	this->ProcessEvent ( pFnPlayBeepSound, &PlayBeepSound_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CanAffordCost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InNormalCost                   ( CPF_Parm )
// int                            InPremiumCost                  ( CPF_Parm )

bool ANetherPlayerController::CanAffordCost ( int InNormalCost, int InPremiumCost )
{
	static UFunction* pFnCanAffordCost = NULL;

	if ( ! pFnCanAffordCost )
		pFnCanAffordCost = (UFunction*) UObject::GObjObjects()->Data[ 75695 ];

	ANetherPlayerController_execCanAffordCost_Parms CanAffordCost_Parms;
	CanAffordCost_Parms.InNormalCost = InNormalCost;
	CanAffordCost_Parms.InPremiumCost = InPremiumCost;

	this->ProcessEvent ( pFnCanAffordCost, &CanAffordCost_Parms, NULL );

	return CanAffordCost_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.SpendGC
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AmountToSpend                  ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool ANetherPlayerController::SpendGC ( int AmountToSpend, struct FString Reason )
{
	static UFunction* pFnSpendGC = NULL;

	if ( ! pFnSpendGC )
		pFnSpendGC = (UFunction*) UObject::GObjObjects()->Data[ 75696 ];

	ANetherPlayerController_execSpendGC_Parms SpendGC_Parms;
	SpendGC_Parms.AmountToSpend = AmountToSpend;
	memcpy ( &SpendGC_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnSpendGC, &SpendGC_Parms, NULL );

	return SpendGC_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.SpendMoney
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AmountToSpend                  ( CPF_Parm )

bool ANetherPlayerController::SpendMoney ( int AmountToSpend )
{
	static UFunction* pFnSpendMoney = NULL;

	if ( ! pFnSpendMoney )
		pFnSpendMoney = (UFunction*) UObject::GObjObjects()->Data[ 74557 ];

	ANetherPlayerController_execSpendMoney_Parms SpendMoney_Parms;
	SpendMoney_Parms.AmountToSpend = AmountToSpend;

	this->ProcessEvent ( pFnSpendMoney, &SpendMoney_Parms, NULL );

	return SpendMoney_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetAttributeBonus
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AttributeType                  ( CPF_Parm )

float ANetherPlayerController::GetAttributeBonus ( unsigned char AttributeType )
{
	static UFunction* pFnGetAttributeBonus = NULL;

	if ( ! pFnGetAttributeBonus )
		pFnGetAttributeBonus = (UFunction*) UObject::GObjObjects()->Data[ 70456 ];

	ANetherPlayerController_execGetAttributeBonus_Parms GetAttributeBonus_Parms;
	GetAttributeBonus_Parms.AttributeType = AttributeType;

	this->ProcessEvent ( pFnGetAttributeBonus, &GetAttributeBonus_Parms, NULL );

	return GetAttributeBonus_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetAttributeLevel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AttributeType                  ( CPF_Parm )

int ANetherPlayerController::GetAttributeLevel ( unsigned char AttributeType )
{
	static UFunction* pFnGetAttributeLevel = NULL;

	if ( ! pFnGetAttributeLevel )
		pFnGetAttributeLevel = (UFunction*) UObject::GObjObjects()->Data[ 70458 ];

	ANetherPlayerController_execGetAttributeLevel_Parms GetAttributeLevel_Parms;
	GetAttributeLevel_Parms.AttributeType = AttributeType;

	this->ProcessEvent ( pFnGetAttributeLevel, &GetAttributeLevel_Parms, NULL );

	return GetAttributeLevel_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetAttributeDiscription
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  AttributeType                  ( CPF_Parm )

struct FString ANetherPlayerController::GetAttributeDiscription ( unsigned char AttributeType )
{
	static UFunction* pFnGetAttributeDiscription = NULL;

	if ( ! pFnGetAttributeDiscription )
		pFnGetAttributeDiscription = (UFunction*) UObject::GObjObjects()->Data[ 75713 ];

	ANetherPlayerController_execGetAttributeDiscription_Parms GetAttributeDiscription_Parms;
	GetAttributeDiscription_Parms.AttributeType = AttributeType;

	this->ProcessEvent ( pFnGetAttributeDiscription, &GetAttributeDiscription_Parms, NULL );

	return GetAttributeDiscription_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetAttributeName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  AttributeType                  ( CPF_Parm )

struct FString ANetherPlayerController::GetAttributeName ( unsigned char AttributeType )
{
	static UFunction* pFnGetAttributeName = NULL;

	if ( ! pFnGetAttributeName )
		pFnGetAttributeName = (UFunction*) UObject::GObjObjects()->Data[ 70454 ];

	ANetherPlayerController_execGetAttributeName_Parms GetAttributeName_Parms;
	GetAttributeName_Parms.AttributeType = AttributeType;

	this->ProcessEvent ( pFnGetAttributeName, &GetAttributeName_Parms, NULL );

	return GetAttributeName_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ServerAskToBuyStatPoint
// [0x002200C2] 
// Parameters infos:
// unsigned char                  AttributeType                  ( CPF_Parm )

void ANetherPlayerController::ServerAskToBuyStatPoint ( unsigned char AttributeType )
{
	static UFunction* pFnServerAskToBuyStatPoint = NULL;

	if ( ! pFnServerAskToBuyStatPoint )
		pFnServerAskToBuyStatPoint = (UFunction*) UObject::GObjObjects()->Data[ 75723 ];

	ANetherPlayerController_execServerAskToBuyStatPoint_Parms ServerAskToBuyStatPoint_Parms;
	ServerAskToBuyStatPoint_Parms.AttributeType = AttributeType;

	this->ProcessEvent ( pFnServerAskToBuyStatPoint, &ServerAskToBuyStatPoint_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CheckSkillUnlock
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AttributeType                  ( CPF_Parm )
// int                            SkillNumber                    ( CPF_Parm )

bool ANetherPlayerController::CheckSkillUnlock ( unsigned char AttributeType, int SkillNumber )
{
	static UFunction* pFnCheckSkillUnlock = NULL;

	if ( ! pFnCheckSkillUnlock )
		pFnCheckSkillUnlock = (UFunction*) UObject::GObjObjects()->Data[ 75731 ];

	ANetherPlayerController_execCheckSkillUnlock_Parms CheckSkillUnlock_Parms;
	CheckSkillUnlock_Parms.AttributeType = AttributeType;
	CheckSkillUnlock_Parms.SkillNumber = SkillNumber;

	this->ProcessEvent ( pFnCheckSkillUnlock, &CheckSkillUnlock_Parms, NULL );

	return CheckSkillUnlock_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetAttributeMaxLevel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetAttributeMaxLevel ( )
{
	static UFunction* pFnGetAttributeMaxLevel = NULL;

	if ( ! pFnGetAttributeMaxLevel )
		pFnGetAttributeMaxLevel = (UFunction*) UObject::GObjObjects()->Data[ 70449 ];

	ANetherPlayerController_execGetAttributeMaxLevel_Parms GetAttributeMaxLevel_Parms;

	this->ProcessEvent ( pFnGetAttributeMaxLevel, &GetAttributeMaxLevel_Parms, NULL );

	return GetAttributeMaxLevel_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetCash
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetCash ( )
{
	static UFunction* pFnGetCash = NULL;

	if ( ! pFnGetCash )
		pFnGetCash = (UFunction*) UObject::GObjObjects()->Data[ 73429 ];

	ANetherPlayerController_execGetCash_Parms GetCash_Parms;

	this->ProcessEvent ( pFnGetCash, &GetCash_Parms, NULL );

	return GetCash_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetGold
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetGold ( )
{
	static UFunction* pFnGetGold = NULL;

	if ( ! pFnGetGold )
		pFnGetGold = (UFunction*) UObject::GObjObjects()->Data[ 73427 ];

	ANetherPlayerController_execGetGold_Parms GetGold_Parms;

	this->ProcessEvent ( pFnGetGold, &GetGold_Parms, NULL );

	return GetGold_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetCiviliansKilledStat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetCiviliansKilledStat ( )
{
	static UFunction* pFnGetCiviliansKilledStat = NULL;

	if ( ! pFnGetCiviliansKilledStat )
		pFnGetCiviliansKilledStat = (UFunction*) UObject::GObjObjects()->Data[ 75739 ];

	ANetherPlayerController_execGetCiviliansKilledStat_Parms GetCiviliansKilledStat_Parms;

	this->ProcessEvent ( pFnGetCiviliansKilledStat, &GetCiviliansKilledStat_Parms, NULL );

	return GetCiviliansKilledStat_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetEnemiesKilledStat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetEnemiesKilledStat ( )
{
	static UFunction* pFnGetEnemiesKilledStat = NULL;

	if ( ! pFnGetEnemiesKilledStat )
		pFnGetEnemiesKilledStat = (UFunction*) UObject::GObjObjects()->Data[ 73433 ];

	ANetherPlayerController_execGetEnemiesKilledStat_Parms GetEnemiesKilledStat_Parms;

	this->ProcessEvent ( pFnGetEnemiesKilledStat, &GetEnemiesKilledStat_Parms, NULL );

	return GetEnemiesKilledStat_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetBanditsKilledStat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetBanditsKilledStat ( )
{
	static UFunction* pFnGetBanditsKilledStat = NULL;

	if ( ! pFnGetBanditsKilledStat )
		pFnGetBanditsKilledStat = (UFunction*) UObject::GObjObjects()->Data[ 75742 ];

	ANetherPlayerController_execGetBanditsKilledStat_Parms GetBanditsKilledStat_Parms;

	this->ProcessEvent ( pFnGetBanditsKilledStat, &GetBanditsKilledStat_Parms, NULL );

	return GetBanditsKilledStat_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetPlayersKilledStat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetPlayersKilledStat ( )
{
	static UFunction* pFnGetPlayersKilledStat = NULL;

	if ( ! pFnGetPlayersKilledStat )
		pFnGetPlayersKilledStat = (UFunction*) UObject::GObjObjects()->Data[ 73431 ];

	ANetherPlayerController_execGetPlayersKilledStat_Parms GetPlayersKilledStat_Parms;

	this->ProcessEvent ( pFnGetPlayersKilledStat, &GetPlayersKilledStat_Parms, NULL );

	return GetPlayersKilledStat_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.CleanupPreviewMesh
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::CleanupPreviewMesh ( )
{
	static UFunction* pFnCleanupPreviewMesh = NULL;

	if ( ! pFnCleanupPreviewMesh )
		pFnCleanupPreviewMesh = (UFunction*) UObject::GObjObjects()->Data[ 75744 ];

	ANetherPlayerController_execCleanupPreviewMesh_Parms CleanupPreviewMesh_Parms;

	this->ProcessEvent ( pFnCleanupPreviewMesh, &CleanupPreviewMesh_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.SpawnPreviewMesh
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::SpawnPreviewMesh ( )
{
	static UFunction* pFnSpawnPreviewMesh = NULL;

	if ( ! pFnSpawnPreviewMesh )
		pFnSpawnPreviewMesh = (UFunction*) UObject::GObjObjects()->Data[ 75745 ];

	ANetherPlayerController_execSpawnPreviewMesh_Parms SpawnPreviewMesh_Parms;

	this->ProcessEvent ( pFnSpawnPreviewMesh, &SpawnPreviewMesh_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TrySetCharacterTemplate
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            TemplateID                     ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            Body                           ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )

void ANetherPlayerController::TrySetCharacterTemplate ( int TemplateID, int Head, int Body, int Legs )
{
	static UFunction* pFnTrySetCharacterTemplate = NULL;

	if ( ! pFnTrySetCharacterTemplate )
		pFnTrySetCharacterTemplate = (UFunction*) UObject::GObjObjects()->Data[ 75749 ];

	ANetherPlayerController_execTrySetCharacterTemplate_Parms TrySetCharacterTemplate_Parms;
	TrySetCharacterTemplate_Parms.TemplateID = TemplateID;
	TrySetCharacterTemplate_Parms.Head = Head;
	TrySetCharacterTemplate_Parms.Body = Body;
	TrySetCharacterTemplate_Parms.Legs = Legs;

	this->ProcessEvent ( pFnTrySetCharacterTemplate, &TrySetCharacterTemplate_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.AreValidTemplateSettings
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TemplateID                     ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            Body                           ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )

bool ANetherPlayerController::AreValidTemplateSettings ( int TemplateID, int Head, int Body, int Legs )
{
	static UFunction* pFnAreValidTemplateSettings = NULL;

	if ( ! pFnAreValidTemplateSettings )
		pFnAreValidTemplateSettings = (UFunction*) UObject::GObjObjects()->Data[ 75757 ];

	ANetherPlayerController_execAreValidTemplateSettings_Parms AreValidTemplateSettings_Parms;
	AreValidTemplateSettings_Parms.TemplateID = TemplateID;
	AreValidTemplateSettings_Parms.Head = Head;
	AreValidTemplateSettings_Parms.Body = Body;
	AreValidTemplateSettings_Parms.Legs = Legs;

	this->ProcessEvent ( pFnAreValidTemplateSettings, &AreValidTemplateSettings_Parms, NULL );

	return AreValidTemplateSettings_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ServerSetCharacterTemplate
// [0x002200C2] 
// Parameters infos:
// int                            TemplateID                     ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            Body                           ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )

void ANetherPlayerController::ServerSetCharacterTemplate ( int TemplateID, int Head, int Body, int Legs )
{
	static UFunction* pFnServerSetCharacterTemplate = NULL;

	if ( ! pFnServerSetCharacterTemplate )
		pFnServerSetCharacterTemplate = (UFunction*) UObject::GObjObjects()->Data[ 75768 ];

	ANetherPlayerController_execServerSetCharacterTemplate_Parms ServerSetCharacterTemplate_Parms;
	ServerSetCharacterTemplate_Parms.TemplateID = TemplateID;
	ServerSetCharacterTemplate_Parms.Head = Head;
	ServerSetCharacterTemplate_Parms.Body = Body;
	ServerSetCharacterTemplate_Parms.Legs = Legs;

	this->ProcessEvent ( pFnServerSetCharacterTemplate, &ServerSetCharacterTemplate_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.SetCharacterTemplate
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            TemplateID                     ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            Body                           ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )

void ANetherPlayerController::SetCharacterTemplate ( int TemplateID, int Head, int Body, int Legs )
{
	static UFunction* pFnSetCharacterTemplate = NULL;

	if ( ! pFnSetCharacterTemplate )
		pFnSetCharacterTemplate = (UFunction*) UObject::GObjObjects()->Data[ 75775 ];

	ANetherPlayerController_execSetCharacterTemplate_Parms SetCharacterTemplate_Parms;
	SetCharacterTemplate_Parms.TemplateID = TemplateID;
	SetCharacterTemplate_Parms.Head = Head;
	SetCharacterTemplate_Parms.Body = Body;
	SetCharacterTemplate_Parms.Legs = Legs;

	this->ProcessEvent ( pFnSetCharacterTemplate, &SetCharacterTemplate_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.HasPickedCharacter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::HasPickedCharacter ( )
{
	static UFunction* pFnHasPickedCharacter = NULL;

	if ( ! pFnHasPickedCharacter )
		pFnHasPickedCharacter = (UFunction*) UObject::GObjObjects()->Data[ 73247 ];

	ANetherPlayerController_execHasPickedCharacter_Parms HasPickedCharacter_Parms;

	this->ProcessEvent ( pFnHasPickedCharacter, &HasPickedCharacter_Parms, NULL );

	return HasPickedCharacter_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ClientPlayerPickedCharacter
// [0x010201C3] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::ClientPlayerPickedCharacter ( )
{
	static UFunction* pFnClientPlayerPickedCharacter = NULL;

	if ( ! pFnClientPlayerPickedCharacter )
		pFnClientPlayerPickedCharacter = (UFunction*) UObject::GObjObjects()->Data[ 75665 ];

	ANetherPlayerController_execClientPlayerPickedCharacter_Parms ClientPlayerPickedCharacter_Parms;

	this->ProcessEvent ( pFnClientPlayerPickedCharacter, &ClientPlayerPickedCharacter_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PlayerPickedCharacter
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::PlayerPickedCharacter ( )
{
	static UFunction* pFnPlayerPickedCharacter = NULL;

	if ( ! pFnPlayerPickedCharacter )
		pFnPlayerPickedCharacter = (UFunction*) UObject::GObjObjects()->Data[ 75661 ];

	ANetherPlayerController_execPlayerPickedCharacter_Parms PlayerPickedCharacter_Parms;

	this->ProcessEvent ( pFnPlayerPickedCharacter, &PlayerPickedCharacter_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerStartSpectating
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerStartSpectating ( )
{
	static UFunction* pFnServerStartSpectating = NULL;

	if ( ! pFnServerStartSpectating )
		pFnServerStartSpectating = (UFunction*) UObject::GObjObjects()->Data[ 75663 ];

	ANetherPlayerController_execServerStartSpectating_Parms ServerStartSpectating_Parms;

	this->ProcessEvent ( pFnServerStartSpectating, &ServerStartSpectating_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.StartSpectating
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::StartSpectating ( )
{
	static UFunction* pFnStartSpectating = NULL;

	if ( ! pFnStartSpectating )
		pFnStartSpectating = (UFunction*) UObject::GObjObjects()->Data[ 75785 ];

	ANetherPlayerController_execStartSpectating_Parms StartSpectating_Parms;

	this->ProcessEvent ( pFnStartSpectating, &StartSpectating_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TogglePersistentGlobalInventory
// [0x00020101] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::TogglePersistentGlobalInventory ( )
{
	static UFunction* pFnTogglePersistentGlobalInventory = NULL;

	if ( ! pFnTogglePersistentGlobalInventory )
		pFnTogglePersistentGlobalInventory = (UFunction*) UObject::GObjObjects()->Data[ 73502 ];

	ANetherPlayerController_execTogglePersistentGlobalInventory_Parms TogglePersistentGlobalInventory_Parms;

	this->ProcessEvent ( pFnTogglePersistentGlobalInventory, &TogglePersistentGlobalInventory_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.IsInventoryScreenOpen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::IsInventoryScreenOpen ( )
{
	static UFunction* pFnIsInventoryScreenOpen = NULL;

	if ( ! pFnIsInventoryScreenOpen )
		pFnIsInventoryScreenOpen = (UFunction*) UObject::GObjObjects()->Data[ 73990 ];

	ANetherPlayerController_execIsInventoryScreenOpen_Parms IsInventoryScreenOpen_Parms;

	this->ProcessEvent ( pFnIsInventoryScreenOpen, &IsInventoryScreenOpen_Parms, NULL );

	return IsInventoryScreenOpen_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.CanOpenMenu
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::CanOpenMenu ( )
{
	static UFunction* pFnCanOpenMenu = NULL;

	if ( ! pFnCanOpenMenu )
		pFnCanOpenMenu = (UFunction*) UObject::GObjObjects()->Data[ 74160 ];

	ANetherPlayerController_execCanOpenMenu_Parms CanOpenMenu_Parms;

	this->ProcessEvent ( pFnCanOpenMenu, &CanOpenMenu_Parms, NULL );

	return CanOpenMenu_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.SpawnStore
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherServerDocument_Store* StoreDoc                       ( CPF_Parm )

void ANetherPlayerController::SpawnStore ( class ANetherServerDocument_Store* StoreDoc )
{
	static UFunction* pFnSpawnStore = NULL;

	if ( ! pFnSpawnStore )
		pFnSpawnStore = (UFunction*) UObject::GObjObjects()->Data[ 73800 ];

	ANetherPlayerController_execSpawnStore_Parms SpawnStore_Parms;
	SpawnStore_Parms.StoreDoc = StoreDoc;

	this->ProcessEvent ( pFnSpawnStore, &SpawnStore_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.AttemptUseQuickSlot
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::AttemptUseQuickSlot ( )
{
	static UFunction* pFnAttemptUseQuickSlot = NULL;

	if ( ! pFnAttemptUseQuickSlot )
		pFnAttemptUseQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 75791 ];

	ANetherPlayerController_execAttemptUseQuickSlot_Parms AttemptUseQuickSlot_Parms;

	this->ProcessEvent ( pFnAttemptUseQuickSlot, &AttemptUseQuickSlot_Parms, NULL );

	return AttemptUseQuickSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.OnQuickSlotHoldTimerComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::OnQuickSlotHoldTimerComplete ( )
{
	static UFunction* pFnOnQuickSlotHoldTimerComplete = NULL;

	if ( ! pFnOnQuickSlotHoldTimerComplete )
		pFnOnQuickSlotHoldTimerComplete = (UFunction*) UObject::GObjObjects()->Data[ 75796 ];

	ANetherPlayerController_execOnQuickSlotHoldTimerComplete_Parms OnQuickSlotHoldTimerComplete_Parms;

	this->ProcessEvent ( pFnOnQuickSlotHoldTimerComplete, &OnQuickSlotHoldTimerComplete_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.QuickSlotReleased
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            QuickSlotNum                   ( CPF_Parm )
// unsigned long                  bItemUsed                      ( CPF_OptionalParm | CPF_Parm )

void ANetherPlayerController::QuickSlotReleased ( int QuickSlotNum, unsigned long bItemUsed )
{
	static UFunction* pFnQuickSlotReleased = NULL;

	if ( ! pFnQuickSlotReleased )
		pFnQuickSlotReleased = (UFunction*) UObject::GObjObjects()->Data[ 75800 ];

	ANetherPlayerController_execQuickSlotReleased_Parms QuickSlotReleased_Parms;
	QuickSlotReleased_Parms.QuickSlotNum = QuickSlotNum;
	QuickSlotReleased_Parms.bItemUsed = bItemUsed;

	this->ProcessEvent ( pFnQuickSlotReleased, &QuickSlotReleased_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.StartUsingQuickSlot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            QuickSlotNum                   ( CPF_Parm )

void ANetherPlayerController::StartUsingQuickSlot ( int QuickSlotNum )
{
	static UFunction* pFnStartUsingQuickSlot = NULL;

	if ( ! pFnStartUsingQuickSlot )
		pFnStartUsingQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 75524 ];

	ANetherPlayerController_execStartUsingQuickSlot_Parms StartUsingQuickSlot_Parms;
	StartUsingQuickSlot_Parms.QuickSlotNum = QuickSlotNum;

	this->ProcessEvent ( pFnStartUsingQuickSlot, &StartUsingQuickSlot_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.RequestDisconnect
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::RequestDisconnect ( )
{
	static UFunction* pFnRequestDisconnect = NULL;

	if ( ! pFnRequestDisconnect )
		pFnRequestDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 75527 ];

	ANetherPlayerController_execRequestDisconnect_Parms RequestDisconnect_Parms;

	this->ProcessEvent ( pFnRequestDisconnect, &RequestDisconnect_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ToggleHUDCursor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::ToggleHUDCursor ( )
{
	static UFunction* pFnToggleHUDCursor = NULL;

	if ( ! pFnToggleHUDCursor )
		pFnToggleHUDCursor = (UFunction*) UObject::GObjObjects()->Data[ 75805 ];

	ANetherPlayerController_execToggleHUDCursor_Parms ToggleHUDCursor_Parms;

	this->ProcessEvent ( pFnToggleHUDCursor, &ToggleHUDCursor_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientShowStartScreen
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::ClientShowStartScreen ( )
{
	static UFunction* pFnClientShowStartScreen = NULL;

	if ( ! pFnClientShowStartScreen )
		pFnClientShowStartScreen = (UFunction*) UObject::GObjObjects()->Data[ 75806 ];

	ANetherPlayerController_execClientShowStartScreen_Parms ClientShowStartScreen_Parms;

	this->ProcessEvent ( pFnClientShowStartScreen, &ClientShowStartScreen_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DeathButtonExit
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int ANetherPlayerController::DeathButtonExit ( class UGFxButton* Button )
{
	static UFunction* pFnDeathButtonExit = NULL;

	if ( ! pFnDeathButtonExit )
		pFnDeathButtonExit = (UFunction*) UObject::GObjObjects()->Data[ 75807 ];

	ANetherPlayerController_execDeathButtonExit_Parms DeathButtonExit_Parms;
	DeathButtonExit_Parms.Button = Button;

	this->ProcessEvent ( pFnDeathButtonExit, &DeathButtonExit_Parms, NULL );

	return DeathButtonExit_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.DeathButtonContinue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int ANetherPlayerController::DeathButtonContinue ( class UGFxButton* Button )
{
	static UFunction* pFnDeathButtonContinue = NULL;

	if ( ! pFnDeathButtonContinue )
		pFnDeathButtonContinue = (UFunction*) UObject::GObjObjects()->Data[ 75808 ];

	ANetherPlayerController_execDeathButtonContinue_Parms DeathButtonContinue_Parms;
	DeathButtonContinue_Parms.Button = Button;

	this->ProcessEvent ( pFnDeathButtonContinue, &DeathButtonContinue_Parms, NULL );

	return DeathButtonContinue_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ClientPostChatMessage
// [0x010241C2] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            HexColor                       ( CPF_OptionalParm | CPF_Parm )

void ANetherPlayerController::ClientPostChatMessage ( struct FString Message, int HexColor )
{
	static UFunction* pFnClientPostChatMessage = NULL;

	if ( ! pFnClientPostChatMessage )
		pFnClientPostChatMessage = (UFunction*) UObject::GObjObjects()->Data[ 75812 ];

	ANetherPlayerController_execClientPostChatMessage_Parms ClientPostChatMessage_Parms;
	memcpy ( &ClientPostChatMessage_Parms.Message, &Message, 0x10 );
	ClientPostChatMessage_Parms.HexColor = HexColor;

	this->ProcessEvent ( pFnClientPostChatMessage, &ClientPostChatMessage_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientShowDeathMessage
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::ClientShowDeathMessage ( )
{
	static UFunction* pFnClientShowDeathMessage = NULL;

	if ( ! pFnClientShowDeathMessage )
		pFnClientShowDeathMessage = (UFunction*) UObject::GObjObjects()->Data[ 75816 ];

	ANetherPlayerController_execClientShowDeathMessage_Parms ClientShowDeathMessage_Parms;

	this->ProcessEvent ( pFnClientShowDeathMessage, &ClientShowDeathMessage_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.BringUpStartScreenAfterDeath
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::BringUpStartScreenAfterDeath ( )
{
	static UFunction* pFnBringUpStartScreenAfterDeath = NULL;

	if ( ! pFnBringUpStartScreenAfterDeath )
		pFnBringUpStartScreenAfterDeath = (UFunction*) UObject::GObjObjects()->Data[ 75499 ];

	ANetherPlayerController_execBringUpStartScreenAfterDeath_Parms BringUpStartScreenAfterDeath_Parms;

	this->ProcessEvent ( pFnBringUpStartScreenAfterDeath, &BringUpStartScreenAfterDeath_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ToggleChatFade
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::ToggleChatFade ( )
{
	static UFunction* pFnToggleChatFade = NULL;

	if ( ! pFnToggleChatFade )
		pFnToggleChatFade = (UFunction*) UObject::GObjObjects()->Data[ 75820 ];

	ANetherPlayerController_execToggleChatFade_Parms ToggleChatFade_Parms;

	this->ProcessEvent ( pFnToggleChatFade, &ToggleChatFade_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerEquipMeleeWeapon
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerEquipMeleeWeapon ( )
{
	static UFunction* pFnServerEquipMeleeWeapon = NULL;

	if ( ! pFnServerEquipMeleeWeapon )
		pFnServerEquipMeleeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75821 ];

	ANetherPlayerController_execServerEquipMeleeWeapon_Parms ServerEquipMeleeWeapon_Parms;

	this->ProcessEvent ( pFnServerEquipMeleeWeapon, &ServerEquipMeleeWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.EquipMeleeWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::EquipMeleeWeapon ( )
{
	static UFunction* pFnEquipMeleeWeapon = NULL;

	if ( ! pFnEquipMeleeWeapon )
		pFnEquipMeleeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75534 ];

	ANetherPlayerController_execEquipMeleeWeapon_Parms EquipMeleeWeapon_Parms;

	this->ProcessEvent ( pFnEquipMeleeWeapon, &EquipMeleeWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerEquipSidearmWeapon
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerEquipSidearmWeapon ( )
{
	static UFunction* pFnServerEquipSidearmWeapon = NULL;

	if ( ! pFnServerEquipSidearmWeapon )
		pFnServerEquipSidearmWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75536 ];

	ANetherPlayerController_execServerEquipSidearmWeapon_Parms ServerEquipSidearmWeapon_Parms;

	this->ProcessEvent ( pFnServerEquipSidearmWeapon, &ServerEquipSidearmWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.EquipSidearmWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::EquipSidearmWeapon ( )
{
	static UFunction* pFnEquipSidearmWeapon = NULL;

	if ( ! pFnEquipSidearmWeapon )
		pFnEquipSidearmWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75538 ];

	ANetherPlayerController_execEquipSidearmWeapon_Parms EquipSidearmWeapon_Parms;

	this->ProcessEvent ( pFnEquipSidearmWeapon, &EquipSidearmWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerEquipRangedWeapon
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerEquipRangedWeapon ( )
{
	static UFunction* pFnServerEquipRangedWeapon = NULL;

	if ( ! pFnServerEquipRangedWeapon )
		pFnServerEquipRangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75539 ];

	ANetherPlayerController_execServerEquipRangedWeapon_Parms ServerEquipRangedWeapon_Parms;

	this->ProcessEvent ( pFnServerEquipRangedWeapon, &ServerEquipRangedWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.EquipRangedWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::EquipRangedWeapon ( )
{
	static UFunction* pFnEquipRangedWeapon = NULL;

	if ( ! pFnEquipRangedWeapon )
		pFnEquipRangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75541 ];

	ANetherPlayerController_execEquipRangedWeapon_Parms EquipRangedWeapon_Parms;

	this->ProcessEvent ( pFnEquipRangedWeapon, &EquipRangedWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.KilledPlayer
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::KilledPlayer ( )
{
	static UFunction* pFnKilledPlayer = NULL;

	if ( ! pFnKilledPlayer )
		pFnKilledPlayer = (UFunction*) UObject::GObjObjects()->Data[ 75542 ];

	ANetherPlayerController_execKilledPlayer_Parms KilledPlayer_Parms;

	this->ProcessEvent ( pFnKilledPlayer, &KilledPlayer_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.KilledEnemy
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::KilledEnemy ( )
{
	static UFunction* pFnKilledEnemy = NULL;

	if ( ! pFnKilledEnemy )
		pFnKilledEnemy = (UFunction*) UObject::GObjObjects()->Data[ 75822 ];

	ANetherPlayerController_execKilledEnemy_Parms KilledEnemy_Parms;

	this->ProcessEvent ( pFnKilledEnemy, &KilledEnemy_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.AddCash
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CashGiven                      ( CPF_Parm )

bool ANetherPlayerController::AddCash ( int CashGiven )
{
	static UFunction* pFnAddCash = NULL;

	if ( ! pFnAddCash )
		pFnAddCash = (UFunction*) UObject::GObjObjects()->Data[ 72407 ];

	ANetherPlayerController_execAddCash_Parms AddCash_Parms;
	AddCash_Parms.CashGiven = CashGiven;

	this->ProcessEvent ( pFnAddCash, &AddCash_Parms, NULL );

	return AddCash_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.AddXP
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            XPGiven                        ( CPF_Parm )

bool ANetherPlayerController::eventAddXP ( int XPGiven )
{
	static UFunction* pFnAddXP = NULL;

	if ( ! pFnAddXP )
		pFnAddXP = (UFunction*) UObject::GObjObjects()->Data[ 71050 ];

	ANetherPlayerController_eventAddXP_Parms AddXP_Parms;
	AddXP_Parms.XPGiven = XPGiven;

	this->ProcessEvent ( pFnAddXP, &AddXP_Parms, NULL );

	return AddXP_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.AddXPInRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            XPGiven                        ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

bool ANetherPlayerController::eventAddXPInRadius ( int XPGiven, float Radius )
{
	static UFunction* pFnAddXPInRadius = NULL;

	if ( ! pFnAddXPInRadius )
		pFnAddXPInRadius = (UFunction*) UObject::GObjObjects()->Data[ 75825 ];

	ANetherPlayerController_eventAddXPInRadius_Parms AddXPInRadius_Parms;
	AddXPInRadius_Parms.XPGiven = XPGiven;
	AddXPInRadius_Parms.Radius = Radius;

	this->ProcessEvent ( pFnAddXPInRadius, &AddXPInRadius_Parms, NULL );

	return AddXPInRadius_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.MoveToGlobalInventory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NInv                           ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )

bool ANetherPlayerController::MoveToGlobalInventory ( class AInventory* NInv, int SlotNumber )
{
	static UFunction* pFnMoveToGlobalInventory = NULL;

	if ( ! pFnMoveToGlobalInventory )
		pFnMoveToGlobalInventory = (UFunction*) UObject::GObjObjects()->Data[ 75827 ];

	ANetherPlayerController_execMoveToGlobalInventory_Parms MoveToGlobalInventory_Parms;
	MoveToGlobalInventory_Parms.NInv = NInv;
	MoveToGlobalInventory_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnMoveToGlobalInventory, &MoveToGlobalInventory_Parms, NULL );

	return MoveToGlobalInventory_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.SetInventorySlotInDocuments
// [0x00024002] 
// Parameters infos:
// int                            Slot                           ( CPF_Parm )
// class AInventory*              NInv                           ( CPF_Parm )
// unsigned long                  bForceSave                     ( CPF_OptionalParm | CPF_Parm )

void ANetherPlayerController::SetInventorySlotInDocuments ( int Slot, class AInventory* NInv, unsigned long bForceSave )
{
	static UFunction* pFnSetInventorySlotInDocuments = NULL;

	if ( ! pFnSetInventorySlotInDocuments )
		pFnSetInventorySlotInDocuments = (UFunction*) UObject::GObjObjects()->Data[ 75833 ];

	ANetherPlayerController_execSetInventorySlotInDocuments_Parms SetInventorySlotInDocuments_Parms;
	SetInventorySlotInDocuments_Parms.Slot = Slot;
	SetInventorySlotInDocuments_Parms.NInv = NInv;
	SetInventorySlotInDocuments_Parms.bForceSave = bForceSave;

	this->ProcessEvent ( pFnSetInventorySlotInDocuments, &SetInventorySlotInDocuments_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClearInventorySlotInDocuments
// [0x00024002] 
// Parameters infos:
// int                            Slot                           ( CPF_Parm )
// unsigned long                  bForceSave                     ( CPF_OptionalParm | CPF_Parm )

void ANetherPlayerController::ClearInventorySlotInDocuments ( int Slot, unsigned long bForceSave )
{
	static UFunction* pFnClearInventorySlotInDocuments = NULL;

	if ( ! pFnClearInventorySlotInDocuments )
		pFnClearInventorySlotInDocuments = (UFunction*) UObject::GObjObjects()->Data[ 75837 ];

	ANetherPlayerController_execClearInventorySlotInDocuments_Parms ClearInventorySlotInDocuments_Parms;
	ClearInventorySlotInDocuments_Parms.Slot = Slot;
	ClearInventorySlotInDocuments_Parms.bForceSave = bForceSave;

	this->ProcessEvent ( pFnClearInventorySlotInDocuments, &ClearInventorySlotInDocuments_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.AttemptQuickslotFromDocs
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NInv                           ( CPF_Parm )

bool ANetherPlayerController::AttemptQuickslotFromDocs ( class AInventory* NInv )
{
	static UFunction* pFnAttemptQuickslotFromDocs = NULL;

	if ( ! pFnAttemptQuickslotFromDocs )
		pFnAttemptQuickslotFromDocs = (UFunction*) UObject::GObjObjects()->Data[ 74473 ];

	ANetherPlayerController_execAttemptQuickslotFromDocs_Parms AttemptQuickslotFromDocs_Parms;
	AttemptQuickslotFromDocs_Parms.NInv = NInv;

	this->ProcessEvent ( pFnAttemptQuickslotFromDocs, &AttemptQuickslotFromDocs_Parms, NULL );

	return AttemptQuickslotFromDocs_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.SaveQuickslotItem
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NInv                           ( CPF_Parm )
// int                            Slot                           ( CPF_Parm )

bool ANetherPlayerController::SaveQuickslotItem ( class AInventory* NInv, int Slot )
{
	static UFunction* pFnSaveQuickslotItem = NULL;

	if ( ! pFnSaveQuickslotItem )
		pFnSaveQuickslotItem = (UFunction*) UObject::GObjObjects()->Data[ 74588 ];

	ANetherPlayerController_execSaveQuickslotItem_Parms SaveQuickslotItem_Parms;
	SaveQuickslotItem_Parms.NInv = NInv;
	SaveQuickslotItem_Parms.Slot = Slot;

	this->ProcessEvent ( pFnSaveQuickslotItem, &SaveQuickslotItem_Parms, NULL );

	return SaveQuickslotItem_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.SetSlot
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NInv                           ( CPF_Parm )
// int                            Slot                           ( CPF_Parm )
// unsigned long                  bForceSave                     ( CPF_OptionalParm | CPF_Parm )

bool ANetherPlayerController::SetSlot ( class AInventory* NInv, int Slot, unsigned long bForceSave )
{
	static UFunction* pFnSetSlot = NULL;

	if ( ! pFnSetSlot )
		pFnSetSlot = (UFunction*) UObject::GObjObjects()->Data[ 74500 ];

	ANetherPlayerController_execSetSlot_Parms SetSlot_Parms;
	SetSlot_Parms.NInv = NInv;
	SetSlot_Parms.Slot = Slot;
	SetSlot_Parms.bForceSave = bForceSave;

	this->ProcessEvent ( pFnSetSlot, &SetSlot_Parms, NULL );

	return SetSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ServerSetInventoryToQuickslot
// [0x002200C2] 
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )
// int                            QuickSlot                      ( CPF_Parm )

void ANetherPlayerController::ServerSetInventoryToQuickslot ( int SlotNumber, int QuickSlot )
{
	static UFunction* pFnServerSetInventoryToQuickslot = NULL;

	if ( ! pFnServerSetInventoryToQuickslot )
		pFnServerSetInventoryToQuickslot = (UFunction*) UObject::GObjObjects()->Data[ 75847 ];

	ANetherPlayerController_execServerSetInventoryToQuickslot_Parms ServerSetInventoryToQuickslot_Parms;
	ServerSetInventoryToQuickslot_Parms.SlotNumber = SlotNumber;
	ServerSetInventoryToQuickslot_Parms.QuickSlot = QuickSlot;

	this->ProcessEvent ( pFnServerSetInventoryToQuickslot, &ServerSetInventoryToQuickslot_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClearSlot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool ANetherPlayerController::ClearSlot ( class AInventory* Inv )
{
	static UFunction* pFnClearSlot = NULL;

	if ( ! pFnClearSlot )
		pFnClearSlot = (UFunction*) UObject::GObjObjects()->Data[ 74511 ];

	ANetherPlayerController_execClearSlot_Parms ClearSlot_Parms;
	ClearSlot_Parms.Inv = Inv;

	this->ProcessEvent ( pFnClearSlot, &ClearSlot_Parms, NULL );

	return ClearSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.TryToSwapSlots
// [0x002200C2] 
// Parameters infos:
// int                            SlotA                          ( CPF_Parm )
// int                            SlotB                          ( CPF_Parm )

void ANetherPlayerController::TryToSwapSlots ( int SlotA, int SlotB )
{
	static UFunction* pFnTryToSwapSlots = NULL;

	if ( ! pFnTryToSwapSlots )
		pFnTryToSwapSlots = (UFunction*) UObject::GObjObjects()->Data[ 75854 ];

	ANetherPlayerController_execTryToSwapSlots_Parms TryToSwapSlots_Parms;
	TryToSwapSlots_Parms.SlotA = SlotA;
	TryToSwapSlots_Parms.SlotB = SlotB;

	this->ProcessEvent ( pFnTryToSwapSlots, &TryToSwapSlots_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TryToSwapBackpack
// [0x002200C2] 
// Parameters infos:
// int                            NewBackpackSlot                ( CPF_Parm )

void ANetherPlayerController::TryToSwapBackpack ( int NewBackpackSlot )
{
	static UFunction* pFnTryToSwapBackpack = NULL;

	if ( ! pFnTryToSwapBackpack )
		pFnTryToSwapBackpack = (UFunction*) UObject::GObjObjects()->Data[ 75856 ];

	ANetherPlayerController_execTryToSwapBackpack_Parms TryToSwapBackpack_Parms;
	TryToSwapBackpack_Parms.NewBackpackSlot = NewBackpackSlot;

	this->ProcessEvent ( pFnTryToSwapBackpack, &TryToSwapBackpack_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.IsGlobalSlot
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Slot                           ( CPF_Parm )

bool ANetherPlayerController::IsGlobalSlot ( int Slot )
{
	static UFunction* pFnIsGlobalSlot = NULL;

	if ( ! pFnIsGlobalSlot )
		pFnIsGlobalSlot = (UFunction*) UObject::GObjObjects()->Data[ 75865 ];

	ANetherPlayerController_execIsGlobalSlot_Parms IsGlobalSlot_Parms;
	IsGlobalSlot_Parms.Slot = Slot;

	this->ProcessEvent ( pFnIsGlobalSlot, &IsGlobalSlot_Parms, NULL );

	return IsGlobalSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.EquipRArmItem
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool ANetherPlayerController::EquipRArmItem ( class AInventory* Inv )
{
	static UFunction* pFnEquipRArmItem = NULL;

	if ( ! pFnEquipRArmItem )
		pFnEquipRArmItem = (UFunction*) UObject::GObjObjects()->Data[ 75870 ];

	ANetherPlayerController_execEquipRArmItem_Parms EquipRArmItem_Parms;
	EquipRArmItem_Parms.Inv = Inv;

	this->ProcessEvent ( pFnEquipRArmItem, &EquipRArmItem_Parms, NULL );

	return EquipRArmItem_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.EquipLArmItem
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool ANetherPlayerController::EquipLArmItem ( class AInventory* Inv )
{
	static UFunction* pFnEquipLArmItem = NULL;

	if ( ! pFnEquipLArmItem )
		pFnEquipLArmItem = (UFunction*) UObject::GObjObjects()->Data[ 75873 ];

	ANetherPlayerController_execEquipLArmItem_Parms EquipLArmItem_Parms;
	EquipLArmItem_Parms.Inv = Inv;

	this->ProcessEvent ( pFnEquipLArmItem, &EquipLArmItem_Parms, NULL );

	return EquipLArmItem_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.EquipHeadItem
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool ANetherPlayerController::EquipHeadItem ( class AInventory* Inv )
{
	static UFunction* pFnEquipHeadItem = NULL;

	if ( ! pFnEquipHeadItem )
		pFnEquipHeadItem = (UFunction*) UObject::GObjObjects()->Data[ 75876 ];

	ANetherPlayerController_execEquipHeadItem_Parms EquipHeadItem_Parms;
	EquipHeadItem_Parms.Inv = Inv;

	this->ProcessEvent ( pFnEquipHeadItem, &EquipHeadItem_Parms, NULL );

	return EquipHeadItem_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.EquipInventoryItem
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool ANetherPlayerController::EquipInventoryItem ( class AInventory* Inv )
{
	static UFunction* pFnEquipInventoryItem = NULL;

	if ( ! pFnEquipInventoryItem )
		pFnEquipInventoryItem = (UFunction*) UObject::GObjObjects()->Data[ 75879 ];

	ANetherPlayerController_execEquipInventoryItem_Parms EquipInventoryItem_Parms;
	EquipInventoryItem_Parms.Inv = Inv;

	this->ProcessEvent ( pFnEquipInventoryItem, &EquipInventoryItem_Parms, NULL );

	return EquipInventoryItem_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ServerConsumeInventoryItem
// [0x002200C3] ( FUNC_Final )
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )

void ANetherPlayerController::ServerConsumeInventoryItem ( int SlotNumber )
{
	static UFunction* pFnServerConsumeInventoryItem = NULL;

	if ( ! pFnServerConsumeInventoryItem )
		pFnServerConsumeInventoryItem = (UFunction*) UObject::GObjObjects()->Data[ 75299 ];

	ANetherPlayerController_execServerConsumeInventoryItem_Parms ServerConsumeInventoryItem_Parms;
	ServerConsumeInventoryItem_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnServerConsumeInventoryItem, &ServerConsumeInventoryItem_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UnloadGun
// [0x002200C3] ( FUNC_Final )
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )

void ANetherPlayerController::UnloadGun ( int SlotNumber )
{
	static UFunction* pFnUnloadGun = NULL;

	if ( ! pFnUnloadGun )
		pFnUnloadGun = (UFunction*) UObject::GObjObjects()->Data[ 75294 ];

	ANetherPlayerController_execUnloadGun_Parms UnloadGun_Parms;
	UnloadGun_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnUnloadGun, &UnloadGun_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DropItemInFrontOfPlayer
// [0x002200C3] ( FUNC_Final )
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )

void ANetherPlayerController::DropItemInFrontOfPlayer ( int SlotNumber )
{
	static UFunction* pFnDropItemInFrontOfPlayer = NULL;

	if ( ! pFnDropItemInFrontOfPlayer )
		pFnDropItemInFrontOfPlayer = (UFunction*) UObject::GObjObjects()->Data[ 75290 ];

	ANetherPlayerController_execDropItemInFrontOfPlayer_Parms DropItemInFrontOfPlayer_Parms;
	DropItemInFrontOfPlayer_Parms.SlotNumber = SlotNumber;

	this->ProcessEvent ( pFnDropItemInFrontOfPlayer, &DropItemInFrontOfPlayer_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetBackpackSlots
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetBackpackSlots ( )
{
	static UFunction* pFnGetBackpackSlots = NULL;

	if ( ! pFnGetBackpackSlots )
		pFnGetBackpackSlots = (UFunction*) UObject::GObjObjects()->Data[ 73514 ];

	ANetherPlayerController_execGetBackpackSlots_Parms GetBackpackSlots_Parms;

	this->ProcessEvent ( pFnGetBackpackSlots, &GetBackpackSlots_Parms, NULL );

	return GetBackpackSlots_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetBackpackWeightCapacity
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPlayerController::GetBackpackWeightCapacity ( )
{
	static UFunction* pFnGetBackpackWeightCapacity = NULL;

	if ( ! pFnGetBackpackWeightCapacity )
		pFnGetBackpackWeightCapacity = (UFunction*) UObject::GObjObjects()->Data[ 75182 ];

	ANetherPlayerController_execGetBackpackWeightCapacity_Parms GetBackpackWeightCapacity_Parms;

	this->ProcessEvent ( pFnGetBackpackWeightCapacity, &GetBackpackWeightCapacity_Parms, NULL );

	return GetBackpackWeightCapacity_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetBackpackWeight
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPlayerController::GetBackpackWeight ( )
{
	static UFunction* pFnGetBackpackWeight = NULL;

	if ( ! pFnGetBackpackWeight )
		pFnGetBackpackWeight = (UFunction*) UObject::GObjObjects()->Data[ 75180 ];

	ANetherPlayerController_execGetBackpackWeight_Parms GetBackpackWeight_Parms;

	this->ProcessEvent ( pFnGetBackpackWeight, &GetBackpackWeight_Parms, NULL );

	return GetBackpackWeight_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.DropCurrentWeapon
// [0x00820102] 
// Parameters infos:

void ANetherPlayerController::DropCurrentWeapon ( )
{
	static UFunction* pFnDropCurrentWeapon = NULL;

	if ( ! pFnDropCurrentWeapon )
		pFnDropCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75893 ];

	ANetherPlayerController_execDropCurrentWeapon_Parms DropCurrentWeapon_Parms;

	this->ProcessEvent ( pFnDropCurrentWeapon, &DropCurrentWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientXPAdded
// [0x01020142] 
// Parameters infos:
// int                            XPGiven                        ( CPF_Parm )

void ANetherPlayerController::ClientXPAdded ( int XPGiven )
{
	static UFunction* pFnClientXPAdded = NULL;

	if ( ! pFnClientXPAdded )
		pFnClientXPAdded = (UFunction*) UObject::GObjObjects()->Data[ 75894 ];

	ANetherPlayerController_execClientXPAdded_Parms ClientXPAdded_Parms;
	ClientXPAdded_Parms.XPGiven = XPGiven;

	this->ProcessEvent ( pFnClientXPAdded, &ClientXPAdded_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.IsDebugAimEnabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::IsDebugAimEnabled ( )
{
	static UFunction* pFnIsDebugAimEnabled = NULL;

	if ( ! pFnIsDebugAimEnabled )
		pFnIsDebugAimEnabled = (UFunction*) UObject::GObjObjects()->Data[ 75896 ];

	ANetherPlayerController_execIsDebugAimEnabled_Parms IsDebugAimEnabled_Parms;

	this->ProcessEvent ( pFnIsDebugAimEnabled, &IsDebugAimEnabled_Parms, NULL );

	return IsDebugAimEnabled_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ToggleDebugAim
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::ToggleDebugAim ( )
{
	static UFunction* pFnToggleDebugAim = NULL;

	if ( ! pFnToggleDebugAim )
		pFnToggleDebugAim = (UFunction*) UObject::GObjObjects()->Data[ 75898 ];

	ANetherPlayerController_execToggleDebugAim_Parms ToggleDebugAim_Parms;

	this->ProcessEvent ( pFnToggleDebugAim, &ToggleDebugAim_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientCashAdded
// [0x01020142] 
// Parameters infos:
// int                            CashAmount                     ( CPF_Parm )

void ANetherPlayerController::ClientCashAdded ( int CashAmount )
{
	static UFunction* pFnClientCashAdded = NULL;

	if ( ! pFnClientCashAdded )
		pFnClientCashAdded = (UFunction*) UObject::GObjObjects()->Data[ 75901 ];

	ANetherPlayerController_execClientCashAdded_Parms ClientCashAdded_Parms;
	ClientCashAdded_Parms.CashAmount = CashAmount;

	this->ProcessEvent ( pFnClientCashAdded, &ClientCashAdded_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.InternalAddCash
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            CashToGive                     ( CPF_Parm )

void ANetherPlayerController::InternalAddCash ( int CashToGive )
{
	static UFunction* pFnInternalAddCash = NULL;

	if ( ! pFnInternalAddCash )
		pFnInternalAddCash = (UFunction*) UObject::GObjObjects()->Data[ 75824 ];

	ANetherPlayerController_execInternalAddCash_Parms InternalAddCash_Parms;
	InternalAddCash_Parms.CashToGive = CashToGive;

	this->ProcessEvent ( pFnInternalAddCash, &InternalAddCash_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.Debug_ServerGiveCash
// [0x002200C0] 
// Parameters infos:
// int                            CashToGive                     ( CPF_Parm )

void ANetherPlayerController::Debug_ServerGiveCash ( int CashToGive )
{
	static UFunction* pFnDebug_ServerGiveCash = NULL;

	if ( ! pFnDebug_ServerGiveCash )
		pFnDebug_ServerGiveCash = (UFunction*) UObject::GObjObjects()->Data[ 75903 ];

	ANetherPlayerController_execDebug_ServerGiveCash_Parms Debug_ServerGiveCash_Parms;
	Debug_ServerGiveCash_Parms.CashToGive = CashToGive;

	this->ProcessEvent ( pFnDebug_ServerGiveCash, &Debug_ServerGiveCash_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetUnusedStatPoints
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetUnusedStatPoints ( )
{
	static UFunction* pFnGetUnusedStatPoints = NULL;

	if ( ! pFnGetUnusedStatPoints )
		pFnGetUnusedStatPoints = (UFunction*) UObject::GObjObjects()->Data[ 73421 ];

	ANetherPlayerController_execGetUnusedStatPoints_Parms GetUnusedStatPoints_Parms;

	this->ProcessEvent ( pFnGetUnusedStatPoints, &GetUnusedStatPoints_Parms, NULL );

	return GetUnusedStatPoints_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ClientPlayerLeveledUp
// [0x01020142] 
// Parameters infos:
// int                            NewLevel                       ( CPF_Parm )

void ANetherPlayerController::ClientPlayerLeveledUp ( int NewLevel )
{
	static UFunction* pFnClientPlayerLeveledUp = NULL;

	if ( ! pFnClientPlayerLeveledUp )
		pFnClientPlayerLeveledUp = (UFunction*) UObject::GObjObjects()->Data[ 75906 ];

	ANetherPlayerController_execClientPlayerLeveledUp_Parms ClientPlayerLeveledUp_Parms;
	ClientPlayerLeveledUp_Parms.NewLevel = NewLevel;

	this->ProcessEvent ( pFnClientPlayerLeveledUp, &ClientPlayerLeveledUp_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CheckPlayerLevelUp
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::CheckPlayerLevelUp ( )
{
	static UFunction* pFnCheckPlayerLevelUp = NULL;

	if ( ! pFnCheckPlayerLevelUp )
		pFnCheckPlayerLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 75907 ];

	ANetherPlayerController_execCheckPlayerLevelUp_Parms CheckPlayerLevelUp_Parms;

	this->ProcessEvent ( pFnCheckPlayerLevelUp, &CheckPlayerLevelUp_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.InternalAddXP
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            XPToGive                       ( CPF_Parm )

void ANetherPlayerController::InternalAddXP ( int XPToGive )
{
	static UFunction* pFnInternalAddXP = NULL;

	if ( ! pFnInternalAddXP )
		pFnInternalAddXP = (UFunction*) UObject::GObjObjects()->Data[ 75433 ];

	ANetherPlayerController_execInternalAddXP_Parms InternalAddXP_Parms;
	InternalAddXP_Parms.XPToGive = XPToGive;

	this->ProcessEvent ( pFnInternalAddXP, &InternalAddXP_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.LogSpeedHack
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::LogSpeedHack ( )
{
	static UFunction* pFnLogSpeedHack = NULL;

	if ( ! pFnLogSpeedHack )
		pFnLogSpeedHack = (UFunction*) UObject::GObjObjects()->Data[ 75911 ];

	ANetherPlayerController_execLogSpeedHack_Parms LogSpeedHack_Parms;

	this->ProcessEvent ( pFnLogSpeedHack, &LogSpeedHack_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.Debug_ServerGiveXP
// [0x002200C0] 
// Parameters infos:
// int                            XPToGive                       ( CPF_Parm )

void ANetherPlayerController::Debug_ServerGiveXP ( int XPToGive )
{
	static UFunction* pFnDebug_ServerGiveXP = NULL;

	if ( ! pFnDebug_ServerGiveXP )
		pFnDebug_ServerGiveXP = (UFunction*) UObject::GObjObjects()->Data[ 75915 ];

	ANetherPlayerController_execDebug_ServerGiveXP_Parms Debug_ServerGiveXP_Parms;
	Debug_ServerGiveXP_Parms.XPToGive = XPToGive;

	this->ProcessEvent ( pFnDebug_ServerGiveXP, &Debug_ServerGiveXP_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetNextLevelXP
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetNextLevelXP ( )
{
	static UFunction* pFnGetNextLevelXP = NULL;

	if ( ! pFnGetNextLevelXP )
		pFnGetNextLevelXP = (UFunction*) UObject::GObjObjects()->Data[ 73425 ];

	ANetherPlayerController_execGetNextLevelXP_Parms GetNextLevelXP_Parms;

	this->ProcessEvent ( pFnGetNextLevelXP, &GetNextLevelXP_Parms, NULL );

	return GetNextLevelXP_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetPlayerXP
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetPlayerXP ( )
{
	static UFunction* pFnGetPlayerXP = NULL;

	if ( ! pFnGetPlayerXP )
		pFnGetPlayerXP = (UFunction*) UObject::GObjObjects()->Data[ 73423 ];

	ANetherPlayerController_execGetPlayerXP_Parms GetPlayerXP_Parms;

	this->ProcessEvent ( pFnGetPlayerXP, &GetPlayerXP_Parms, NULL );

	return GetPlayerXP_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetPlayerLevel
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetPlayerLevel ( )
{
	static UFunction* pFnGetPlayerLevel = NULL;

	if ( ! pFnGetPlayerLevel )
		pFnGetPlayerLevel = (UFunction*) UObject::GObjObjects()->Data[ 75120 ];

	ANetherPlayerController_execGetPlayerLevel_Parms GetPlayerLevel_Parms;

	this->ProcessEvent ( pFnGetPlayerLevel, &GetPlayerLevel_Parms, NULL );

	return GetPlayerLevel_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetPlayerMaxHealth
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetPlayerMaxHealth ( )
{
	static UFunction* pFnGetPlayerMaxHealth = NULL;

	if ( ! pFnGetPlayerMaxHealth )
		pFnGetPlayerMaxHealth = (UFunction*) UObject::GObjObjects()->Data[ 75919 ];

	ANetherPlayerController_execGetPlayerMaxHealth_Parms GetPlayerMaxHealth_Parms;

	this->ProcessEvent ( pFnGetPlayerMaxHealth, &GetPlayerMaxHealth_Parms, NULL );

	return GetPlayerMaxHealth_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetPlayerMaxStamina
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetPlayerMaxStamina ( )
{
	static UFunction* pFnGetPlayerMaxStamina = NULL;

	if ( ! pFnGetPlayerMaxStamina )
		pFnGetPlayerMaxStamina = (UFunction*) UObject::GObjObjects()->Data[ 75920 ];

	ANetherPlayerController_execGetPlayerMaxStamina_Parms GetPlayerMaxStamina_Parms;

	this->ProcessEvent ( pFnGetPlayerMaxStamina, &GetPlayerMaxStamina_Parms, NULL );

	return GetPlayerMaxStamina_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetPlayerHealth
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetPlayerHealth ( )
{
	static UFunction* pFnGetPlayerHealth = NULL;

	if ( ! pFnGetPlayerHealth )
		pFnGetPlayerHealth = (UFunction*) UObject::GObjObjects()->Data[ 75922 ];

	ANetherPlayerController_execGetPlayerHealth_Parms GetPlayerHealth_Parms;

	this->ProcessEvent ( pFnGetPlayerHealth, &GetPlayerHealth_Parms, NULL );

	return GetPlayerHealth_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetLogoutPosition
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANetherPlayerController::GetLogoutPosition ( )
{
	static UFunction* pFnGetLogoutPosition = NULL;

	if ( ! pFnGetLogoutPosition )
		pFnGetLogoutPosition = (UFunction*) UObject::GObjObjects()->Data[ 75924 ];

	ANetherPlayerController_execGetLogoutPosition_Parms GetLogoutPosition_Parms;

	this->ProcessEvent ( pFnGetLogoutPosition, &GetLogoutPosition_Parms, NULL );

	return GetLogoutPosition_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ServerWriteIfShouldLoadPos
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShould                        ( CPF_Parm )

void ANetherPlayerController::ServerWriteIfShouldLoadPos ( unsigned long bShould )
{
	static UFunction* pFnServerWriteIfShouldLoadPos = NULL;

	if ( ! pFnServerWriteIfShouldLoadPos )
		pFnServerWriteIfShouldLoadPos = (UFunction*) UObject::GObjObjects()->Data[ 75926 ];

	ANetherPlayerController_execServerWriteIfShouldLoadPos_Parms ServerWriteIfShouldLoadPos_Parms;
	ServerWriteIfShouldLoadPos_Parms.bShould = bShould;

	this->ProcessEvent ( pFnServerWriteIfShouldLoadPos, &ServerWriteIfShouldLoadPos_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UpdateCharacterLogoutPosition
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::UpdateCharacterLogoutPosition ( )
{
	static UFunction* pFnUpdateCharacterLogoutPosition = NULL;

	if ( ! pFnUpdateCharacterLogoutPosition )
		pFnUpdateCharacterLogoutPosition = (UFunction*) UObject::GObjObjects()->Data[ 75929 ];

	ANetherPlayerController_execUpdateCharacterLogoutPosition_Parms UpdateCharacterLogoutPosition_Parms;

	this->ProcessEvent ( pFnUpdateCharacterLogoutPosition, &UpdateCharacterLogoutPosition_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.NextWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75583 ];

	ANetherPlayerController_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PrevWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75584 ];

	ANetherPlayerController_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CanChangeWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::CanChangeWeapon ( )
{
	static UFunction* pFnCanChangeWeapon = NULL;

	if ( ! pFnCanChangeWeapon )
		pFnCanChangeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75586 ];

	ANetherPlayerController_execCanChangeWeapon_Parms CanChangeWeapon_Parms;

	this->ProcessEvent ( pFnCanChangeWeapon, &CanChangeWeapon_Parms, NULL );

	return CanChangeWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.CanAccessMarket
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::CanAccessMarket ( )
{
	static UFunction* pFnCanAccessMarket = NULL;

	if ( ! pFnCanAccessMarket )
		pFnCanAccessMarket = (UFunction*) UObject::GObjObjects()->Data[ 75113 ];

	ANetherPlayerController_execCanAccessMarket_Parms CanAccessMarket_Parms;

	this->ProcessEvent ( pFnCanAccessMarket, &CanAccessMarket_Parms, NULL );

	return CanAccessMarket_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.CanAccessGlobalInventory
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::CanAccessGlobalInventory ( )
{
	static UFunction* pFnCanAccessGlobalInventory = NULL;

	if ( ! pFnCanAccessGlobalInventory )
		pFnCanAccessGlobalInventory = (UFunction*) UObject::GObjObjects()->Data[ 75932 ];

	ANetherPlayerController_execCanAccessGlobalInventory_Parms CanAccessGlobalInventory_Parms;

	this->ProcessEvent ( pFnCanAccessGlobalInventory, &CanAccessGlobalInventory_Parms, NULL );

	return CanAccessGlobalInventory_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.RemoveFromInventory
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemToRemove                   ( CPF_Parm )
// int                            Count                          ( CPF_Parm )
// unsigned long                  CheckFirst                     ( CPF_OptionalParm | CPF_Parm )

bool ANetherPlayerController::RemoveFromInventory ( class UClass* ItemToRemove, int Count, unsigned long CheckFirst )
{
	static UFunction* pFnRemoveFromInventory = NULL;

	if ( ! pFnRemoveFromInventory )
		pFnRemoveFromInventory = (UFunction*) UObject::GObjObjects()->Data[ 75933 ];

	ANetherPlayerController_execRemoveFromInventory_Parms RemoveFromInventory_Parms;
	RemoveFromInventory_Parms.ItemToRemove = ItemToRemove;
	RemoveFromInventory_Parms.Count = Count;
	RemoveFromInventory_Parms.CheckFirst = CheckFirst;

	this->ProcessEvent ( pFnRemoveFromInventory, &RemoveFromInventory_Parms, NULL );

	return RemoveFromInventory_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.HasInInventory
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemToSearch                   ( CPF_Parm )
// int                            Count                          ( CPF_Parm )

bool ANetherPlayerController::HasInInventory ( class UClass* ItemToSearch, int Count )
{
	static UFunction* pFnHasInInventory = NULL;

	if ( ! pFnHasInInventory )
		pFnHasInInventory = (UFunction*) UObject::GObjObjects()->Data[ 75937 ];

	ANetherPlayerController_execHasInInventory_Parms HasInInventory_Parms;
	HasInInventory_Parms.ItemToSearch = ItemToSearch;
	HasInInventory_Parms.Count = Count;

	this->ProcessEvent ( pFnHasInInventory, &HasInInventory_Parms, NULL );

	return HasInInventory_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.RequestReload
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::RequestReload ( )
{
	static UFunction* pFnRequestReload = NULL;

	if ( ! pFnRequestReload )
		pFnRequestReload = (UFunction*) UObject::GObjObjects()->Data[ 75545 ];

	ANetherPlayerController_execRequestReload_Parms RequestReload_Parms;

	this->ProcessEvent ( pFnRequestReload, &RequestReload_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.FixFOV
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::FixFOV ( )
{
	static UFunction* pFnFixFOV = NULL;

	if ( ! pFnFixFOV )
		pFnFixFOV = (UFunction*) UObject::GObjObjects()->Data[ 75546 ];

	ANetherPlayerController_execFixFOV_Parms FixFOV_Parms;

	this->ProcessEvent ( pFnFixFOV, &FixFOV_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetFOV
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPlayerController::GetFOV ( )
{
	static UFunction* pFnGetFOV = NULL;

	if ( ! pFnGetFOV )
		pFnGetFOV = (UFunction*) UObject::GObjObjects()->Data[ 75955 ];

	ANetherPlayerController_execGetFOV_Parms GetFOV_Parms;

	this->ProcessEvent ( pFnGetFOV, &GetFOV_Parms, NULL );

	return GetFOV_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.UpdateRotation
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPlayerController::UpdateRotation ( float DeltaTime )
{
	static UFunction* pFnUpdateRotation = NULL;

	if ( ! pFnUpdateRotation )
		pFnUpdateRotation = (UFunction*) UObject::GObjObjects()->Data[ 75956 ];

	ANetherPlayerController_execUpdateRotation_Parms UpdateRotation_Parms;
	UpdateRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateRotation, &UpdateRotation_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerChangeCamera
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerChangeCamera ( )
{
	static UFunction* pFnServerChangeCamera = NULL;

	if ( ! pFnServerChangeCamera )
		pFnServerChangeCamera = (UFunction*) UObject::GObjObjects()->Data[ 75958 ];

	ANetherPlayerController_execServerChangeCamera_Parms ServerChangeCamera_Parms;

	this->ProcessEvent ( pFnServerChangeCamera, &ServerChangeCamera_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClearPostOverride
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::ClearPostOverride ( )
{
	static UFunction* pFnClearPostOverride = NULL;

	if ( ! pFnClearPostOverride )
		pFnClearPostOverride = (UFunction*) UObject::GObjObjects()->Data[ 75963 ];

	ANetherPlayerController_execClearPostOverride_Parms ClearPostOverride_Parms;

	this->ProcessEvent ( pFnClearPostOverride, &ClearPostOverride_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.FadeOutFlashbangEffect
// [0x00820002] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )

void ANetherPlayerController::FadeOutFlashbangEffect ( float Duration )
{
	static UFunction* pFnFadeOutFlashbangEffect = NULL;

	if ( ! pFnFadeOutFlashbangEffect )
		pFnFadeOutFlashbangEffect = (UFunction*) UObject::GObjObjects()->Data[ 75964 ];

	ANetherPlayerController_execFadeOutFlashbangEffect_Parms FadeOutFlashbangEffect_Parms;
	FadeOutFlashbangEffect_Parms.Duration = Duration;

	this->ProcessEvent ( pFnFadeOutFlashbangEffect, &FadeOutFlashbangEffect_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.StartFlashbangVisualEffect
// [0x00820002] 
// Parameters infos:

void ANetherPlayerController::StartFlashbangVisualEffect ( )
{
	static UFunction* pFnStartFlashbangVisualEffect = NULL;

	if ( ! pFnStartFlashbangVisualEffect )
		pFnStartFlashbangVisualEffect = (UFunction*) UObject::GObjObjects()->Data[ 75966 ];

	ANetherPlayerController_execStartFlashbangVisualEffect_Parms StartFlashbangVisualEffect_Parms;

	this->ProcessEvent ( pFnStartFlashbangVisualEffect, &StartFlashbangVisualEffect_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UpdateVisualStun
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPlayerController::UpdateVisualStun ( float DeltaTime )
{
	static UFunction* pFnUpdateVisualStun = NULL;

	if ( ! pFnUpdateVisualStun )
		pFnUpdateVisualStun = (UFunction*) UObject::GObjObjects()->Data[ 75971 ];

	ANetherPlayerController_execUpdateVisualStun_Parms UpdateVisualStun_Parms;
	UpdateVisualStun_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateVisualStun, &UpdateVisualStun_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UpdateAudioStun
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPlayerController::UpdateAudioStun ( float DeltaTime )
{
	static UFunction* pFnUpdateAudioStun = NULL;

	if ( ! pFnUpdateAudioStun )
		pFnUpdateAudioStun = (UFunction*) UObject::GObjObjects()->Data[ 75974 ];

	ANetherPlayerController_execUpdateAudioStun_Parms UpdateAudioStun_Parms;
	UpdateAudioStun_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateAudioStun, &UpdateAudioStun_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.EndFlashbangAudioEffect
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::EndFlashbangAudioEffect ( )
{
	static UFunction* pFnEndFlashbangAudioEffect = NULL;

	if ( ! pFnEndFlashbangAudioEffect )
		pFnEndFlashbangAudioEffect = (UFunction*) UObject::GObjObjects()->Data[ 75981 ];

	ANetherPlayerController_execEndFlashbangAudioEffect_Parms EndFlashbangAudioEffect_Parms;

	this->ProcessEvent ( pFnEndFlashbangAudioEffect, &EndFlashbangAudioEffect_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.StartFlashbangAudioEffect
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::StartFlashbangAudioEffect ( )
{
	static UFunction* pFnStartFlashbangAudioEffect = NULL;

	if ( ! pFnStartFlashbangAudioEffect )
		pFnStartFlashbangAudioEffect = (UFunction*) UObject::GObjObjects()->Data[ 75985 ];

	ANetherPlayerController_execStartFlashbangAudioEffect_Parms StartFlashbangAudioEffect_Parms;

	this->ProcessEvent ( pFnStartFlashbangAudioEffect, &StartFlashbangAudioEffect_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.StartFlashbangEffect
// [0x010201C2] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// unsigned long                  VisualEffect                   ( CPF_Parm )

void ANetherPlayerController::StartFlashbangEffect ( float Duration, unsigned long VisualEffect )
{
	static UFunction* pFnStartFlashbangEffect = NULL;

	if ( ! pFnStartFlashbangEffect )
		pFnStartFlashbangEffect = (UFunction*) UObject::GObjObjects()->Data[ 75987 ];

	ANetherPlayerController_execStartFlashbangEffect_Parms StartFlashbangEffect_Parms;
	StartFlashbangEffect_Parms.Duration = Duration;
	StartFlashbangEffect_Parms.VisualEffect = VisualEffect;

	this->ProcessEvent ( pFnStartFlashbangEffect, &StartFlashbangEffect_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ScaleBlur
// [0x00020002] 
// Parameters infos:
// float                          Scale                          ( CPF_Parm )

void ANetherPlayerController::ScaleBlur ( float Scale )
{
	static UFunction* pFnScaleBlur = NULL;

	if ( ! pFnScaleBlur )
		pFnScaleBlur = (UFunction*) UObject::GObjObjects()->Data[ 75989 ];

	ANetherPlayerController_execScaleBlur_Parms ScaleBlur_Parms;
	ScaleBlur_Parms.Scale = Scale;

	this->ProcessEvent ( pFnScaleBlur, &ScaleBlur_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetUberEffect
// [0x00020002] 
// Parameters infos:
// class UUberPostProcessEffect*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUberPostProcessEffect* ANetherPlayerController::GetUberEffect ( )
{
	static UFunction* pFnGetUberEffect = NULL;

	if ( ! pFnGetUberEffect )
		pFnGetUberEffect = (UFunction*) UObject::GObjObjects()->Data[ 75992 ];

	ANetherPlayerController_execGetUberEffect_Parms GetUberEffect_Parms;

	this->ProcessEvent ( pFnGetUberEffect, &GetUberEffect_Parms, NULL );

	return GetUberEffect_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ChangeCamera
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::ChangeCamera ( )
{
	static UFunction* pFnChangeCamera = NULL;

	if ( ! pFnChangeCamera )
		pFnChangeCamera = (UFunction*) UObject::GObjObjects()->Data[ 75554 ];

	ANetherPlayerController_execChangeCamera_Parms ChangeCamera_Parms;

	this->ProcessEvent ( pFnChangeCamera, &ChangeCamera_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UsePlayerCameraForViewPoint
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::UsePlayerCameraForViewPoint ( )
{
	static UFunction* pFnUsePlayerCameraForViewPoint = NULL;

	if ( ! pFnUsePlayerCameraForViewPoint )
		pFnUsePlayerCameraForViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 75555 ];

	ANetherPlayerController_execUsePlayerCameraForViewPoint_Parms UsePlayerCameraForViewPoint_Parms;

	this->ProcessEvent ( pFnUsePlayerCameraForViewPoint, &UsePlayerCameraForViewPoint_Parms, NULL );

	return UsePlayerCameraForViewPoint_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetServerIronsightsRot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ANetherPlayerController::GetServerIronsightsRot ( )
{
	static UFunction* pFnGetServerIronsightsRot = NULL;

	if ( ! pFnGetServerIronsightsRot )
		pFnGetServerIronsightsRot = (UFunction*) UObject::GObjObjects()->Data[ 75998 ];

	ANetherPlayerController_execGetServerIronsightsRot_Parms GetServerIronsightsRot_Parms;

	this->ProcessEvent ( pFnGetServerIronsightsRot, &GetServerIronsightsRot_Parms, NULL );

	return GetServerIronsightsRot_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetServerIronsightsStartLoc
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANetherPlayerController::GetServerIronsightsStartLoc ( )
{
	static UFunction* pFnGetServerIronsightsStartLoc = NULL;

	if ( ! pFnGetServerIronsightsStartLoc )
		pFnGetServerIronsightsStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 76000 ];

	ANetherPlayerController_execGetServerIronsightsStartLoc_Parms GetServerIronsightsStartLoc_Parms;

	this->ProcessEvent ( pFnGetServerIronsightsStartLoc, &GetServerIronsightsStartLoc_Parms, NULL );

	return GetServerIronsightsStartLoc_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.NetherServerMove
// [0x00220042] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  MoveFlags                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// unsigned long                  InbCrawl                       ( CPF_Parm )

void ANetherPlayerController::NetherServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned long InbCrawl )
{
	static UFunction* pFnNetherServerMove = NULL;

	if ( ! pFnNetherServerMove )
		pFnNetherServerMove = (UFunction*) UObject::GObjObjects()->Data[ 76003 ];

	ANetherPlayerController_execNetherServerMove_Parms NetherServerMove_Parms;
	NetherServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &NetherServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &NetherServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	NetherServerMove_Parms.MoveFlags = MoveFlags;
	NetherServerMove_Parms.ClientRoll = ClientRoll;
	NetherServerMove_Parms.View = View;
	NetherServerMove_Parms.InbCrawl = InbCrawl;

	this->ProcessEvent ( pFnNetherServerMove, &NetherServerMove_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.NetherShortServerMove
// [0x00220042] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  NewFlags                       ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// unsigned long                  InbCrawl                       ( CPF_Parm )

void ANetherPlayerController::NetherShortServerMove ( float TimeStamp, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View, unsigned long InbCrawl )
{
	static UFunction* pFnNetherShortServerMove = NULL;

	if ( ! pFnNetherShortServerMove )
		pFnNetherShortServerMove = (UFunction*) UObject::GObjObjects()->Data[ 76006 ];

	ANetherPlayerController_execNetherShortServerMove_Parms NetherShortServerMove_Parms;
	NetherShortServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &NetherShortServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	NetherShortServerMove_Parms.NewFlags = NewFlags;
	NetherShortServerMove_Parms.ClientRoll = ClientRoll;
	NetherShortServerMove_Parms.View = View;
	NetherShortServerMove_Parms.InbCrawl = InbCrawl;

	this->ProcessEvent ( pFnNetherShortServerMove, &NetherShortServerMove_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.RMServerMove
// [0x00220042] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  MoveFlags                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// unsigned long                  InbCrawl                       ( CPF_Parm )

void ANetherPlayerController::RMServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned long InbCrawl )
{
	static UFunction* pFnRMServerMove = NULL;

	if ( ! pFnRMServerMove )
		pFnRMServerMove = (UFunction*) UObject::GObjObjects()->Data[ 76014 ];

	ANetherPlayerController_execRMServerMove_Parms RMServerMove_Parms;
	RMServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &RMServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &RMServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	RMServerMove_Parms.MoveFlags = MoveFlags;
	RMServerMove_Parms.ClientRoll = ClientRoll;
	RMServerMove_Parms.View = View;
	RMServerMove_Parms.InbCrawl = InbCrawl;

	this->ProcessEvent ( pFnRMServerMove, &RMServerMove_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.NetherIronsightsServerMove
// [0x00220042] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  MoveFlags                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// unsigned long                  InbCrawl                       ( CPF_Parm )
// struct FVector                 IronLoc                        ( CPF_Parm )
// int                            IronAim                        ( CPF_Parm )

void ANetherPlayerController::NetherIronsightsServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned long InbCrawl, struct FVector IronLoc, int IronAim )
{
	static UFunction* pFnNetherIronsightsServerMove = NULL;

	if ( ! pFnNetherIronsightsServerMove )
		pFnNetherIronsightsServerMove = (UFunction*) UObject::GObjObjects()->Data[ 76021 ];

	ANetherPlayerController_execNetherIronsightsServerMove_Parms NetherIronsightsServerMove_Parms;
	NetherIronsightsServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &NetherIronsightsServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &NetherIronsightsServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	NetherIronsightsServerMove_Parms.MoveFlags = MoveFlags;
	NetherIronsightsServerMove_Parms.ClientRoll = ClientRoll;
	NetherIronsightsServerMove_Parms.View = View;
	NetherIronsightsServerMove_Parms.InbCrawl = InbCrawl;
	memcpy ( &NetherIronsightsServerMove_Parms.IronLoc, &IronLoc, 0xC );
	NetherIronsightsServerMove_Parms.IronAim = IronAim;

	this->ProcessEvent ( pFnNetherIronsightsServerMove, &NetherIronsightsServerMove_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.NetherDualServerMove
// [0x00220042] 
// Parameters infos:
// float                          TimeStamp0                     ( CPF_Parm )
// struct FVector                 InAccel0                       ( CPF_Parm )
// unsigned char                  PendingFlags                   ( CPF_Parm )
// int                            View0                          ( CPF_Parm )
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  NewFlags                       ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// unsigned long                  InbCrawl                       ( CPF_Parm )

void ANetherPlayerController::NetherDualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View, unsigned long InbCrawl )
{
	static UFunction* pFnNetherDualServerMove = NULL;

	if ( ! pFnNetherDualServerMove )
		pFnNetherDualServerMove = (UFunction*) UObject::GObjObjects()->Data[ 76029 ];

	ANetherPlayerController_execNetherDualServerMove_Parms NetherDualServerMove_Parms;
	NetherDualServerMove_Parms.TimeStamp0 = TimeStamp0;
	memcpy ( &NetherDualServerMove_Parms.InAccel0, &InAccel0, 0xC );
	NetherDualServerMove_Parms.PendingFlags = PendingFlags;
	NetherDualServerMove_Parms.View0 = View0;
	NetherDualServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &NetherDualServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &NetherDualServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	NetherDualServerMove_Parms.NewFlags = NewFlags;
	NetherDualServerMove_Parms.ClientRoll = ClientRoll;
	NetherDualServerMove_Parms.View = View;
	NetherDualServerMove_Parms.InbCrawl = InbCrawl;

	this->ProcessEvent ( pFnNetherDualServerMove, &NetherDualServerMove_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CallServerMove
// [0x00820002] 
// Parameters infos:
// class USavedMove*              NewMove                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// class USavedMove*              OldMove                        ( CPF_Parm )

void ANetherPlayerController::CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove )
{
	static UFunction* pFnCallServerMove = NULL;

	if ( ! pFnCallServerMove )
		pFnCallServerMove = (UFunction*) UObject::GObjObjects()->Data[ 76039 ];

	ANetherPlayerController_execCallServerMove_Parms CallServerMove_Parms;
	CallServerMove_Parms.NewMove = NewMove;
	memcpy ( &CallServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	CallServerMove_Parms.ClientRoll = ClientRoll;
	CallServerMove_Parms.View = View;
	CallServerMove_Parms.OldMove = OldMove;

	this->ProcessEvent ( pFnCallServerMove, &CallServerMove_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CheckJumpOrDuck
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::CheckJumpOrDuck ( )
{
	static UFunction* pFnCheckJumpOrDuck = NULL;

	if ( ! pFnCheckJumpOrDuck )
		pFnCheckJumpOrDuck = (UFunction*) UObject::GObjObjects()->Data[ 76051 ];

	ANetherPlayerController_execCheckJumpOrDuck_Parms CheckJumpOrDuck_Parms;

	this->ProcessEvent ( pFnCheckJumpOrDuck, &CheckJumpOrDuck_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.HandleWalking
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::HandleWalking ( )
{
	static UFunction* pFnHandleWalking = NULL;

	if ( ! pFnHandleWalking )
		pFnHandleWalking = (UFunction*) UObject::GObjObjects()->Data[ 75616 ];

	ANetherPlayerController_execHandleWalking_Parms HandleWalking_Parms;

	this->ProcessEvent ( pFnHandleWalking, &HandleWalking_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientShowPopupNotification
// [0x010241C2] 
// Parameters infos:
// struct FString                 HeaderText                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BodyText                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ButtonText                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::ClientShowPopupNotification ( struct FString HeaderText, struct FString BodyText, struct FString ButtonText )
{
	static UFunction* pFnClientShowPopupNotification = NULL;

	if ( ! pFnClientShowPopupNotification )
		pFnClientShowPopupNotification = (UFunction*) UObject::GObjObjects()->Data[ 75617 ];

	ANetherPlayerController_execClientShowPopupNotification_Parms ClientShowPopupNotification_Parms;
	memcpy ( &ClientShowPopupNotification_Parms.HeaderText, &HeaderText, 0x10 );
	memcpy ( &ClientShowPopupNotification_Parms.BodyText, &BodyText, 0x10 );
	memcpy ( &ClientShowPopupNotification_Parms.ButtonText, &ButtonText, 0x10 );

	this->ProcessEvent ( pFnClientShowPopupNotification, &ClientShowPopupNotification_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientCloseBarterPopup
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::ClientCloseBarterPopup ( )
{
	static UFunction* pFnClientCloseBarterPopup = NULL;

	if ( ! pFnClientCloseBarterPopup )
		pFnClientCloseBarterPopup = (UFunction*) UObject::GObjObjects()->Data[ 76070 ];

	ANetherPlayerController_execClientCloseBarterPopup_Parms ClientCloseBarterPopup_Parms;

	this->ProcessEvent ( pFnClientCloseBarterPopup, &ClientCloseBarterPopup_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientClosePopupByID
// [0x010201C2] 
// Parameters infos:
// unsigned char                  Id                             ( CPF_Parm )

void ANetherPlayerController::ClientClosePopupByID ( unsigned char Id )
{
	static UFunction* pFnClientClosePopupByID = NULL;

	if ( ! pFnClientClosePopupByID )
		pFnClientClosePopupByID = (UFunction*) UObject::GObjObjects()->Data[ 76074 ];

	ANetherPlayerController_execClientClosePopupByID_Parms ClientClosePopupByID_Parms;
	ClientClosePopupByID_Parms.Id = Id;

	this->ProcessEvent ( pFnClientClosePopupByID, &ClientClosePopupByID_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientClearPrompt
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::ClientClearPrompt ( )
{
	static UFunction* pFnClientClearPrompt = NULL;

	if ( ! pFnClientClearPrompt )
		pFnClientClearPrompt = (UFunction*) UObject::GObjObjects()->Data[ 76075 ];

	ANetherPlayerController_execClientClearPrompt_Parms ClientClearPrompt_Parms;

	this->ProcessEvent ( pFnClientClearPrompt, &ClientClearPrompt_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientShowPrompt
// [0x010201C2] 
// Parameters infos:
// struct FString                 Prompt                         ( CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::ClientShowPrompt ( struct FString Prompt )
{
	static UFunction* pFnClientShowPrompt = NULL;

	if ( ! pFnClientShowPrompt )
		pFnClientShowPrompt = (UFunction*) UObject::GObjObjects()->Data[ 76077 ];

	ANetherPlayerController_execClientShowPrompt_Parms ClientShowPrompt_Parms;
	memcpy ( &ClientShowPrompt_Parms.Prompt, &Prompt, 0x10 );

	this->ProcessEvent ( pFnClientShowPrompt, &ClientShowPrompt_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ToggleAdminMapdata
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInShowAdminMapData            ( CPF_Parm )

void ANetherPlayerController::eventToggleAdminMapdata ( unsigned long bInShowAdminMapData )
{
	static UFunction* pFnToggleAdminMapdata = NULL;

	if ( ! pFnToggleAdminMapdata )
		pFnToggleAdminMapdata = (UFunction*) UObject::GObjObjects()->Data[ 76078 ];

	ANetherPlayerController_eventToggleAdminMapdata_Parms ToggleAdminMapdata_Parms;
	ToggleAdminMapdata_Parms.bInShowAdminMapData = bInShowAdminMapData;

	this->ProcessEvent ( pFnToggleAdminMapdata, &ToggleAdminMapdata_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DebugShowMapLocations
// [0x00024600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  InDebugShowPlayerMapData       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InDebugShowEnemyMapData        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InDebugShowEnemySpawnMapData   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InDebugShowLootMapData         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InDebugShowLootSpawnMapData    ( CPF_OptionalParm | CPF_Parm )

void ANetherPlayerController::DebugShowMapLocations ( unsigned long InDebugShowPlayerMapData, unsigned long InDebugShowEnemyMapData, unsigned long InDebugShowEnemySpawnMapData, unsigned long InDebugShowLootMapData, unsigned long InDebugShowLootSpawnMapData )
{
	static UFunction* pFnDebugShowMapLocations = NULL;

	if ( ! pFnDebugShowMapLocations )
		pFnDebugShowMapLocations = (UFunction*) UObject::GObjObjects()->Data[ 76080 ];

	ANetherPlayerController_execDebugShowMapLocations_Parms DebugShowMapLocations_Parms;
	DebugShowMapLocations_Parms.InDebugShowPlayerMapData = InDebugShowPlayerMapData;
	DebugShowMapLocations_Parms.InDebugShowEnemyMapData = InDebugShowEnemyMapData;
	DebugShowMapLocations_Parms.InDebugShowEnemySpawnMapData = InDebugShowEnemySpawnMapData;
	DebugShowMapLocations_Parms.InDebugShowLootMapData = InDebugShowLootMapData;
	DebugShowMapLocations_Parms.InDebugShowLootSpawnMapData = InDebugShowLootSpawnMapData;

	pFnDebugShowMapLocations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugShowMapLocations, &DebugShowMapLocations_Parms, NULL );

	pFnDebugShowMapLocations->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherPlayerController.DebugServerUpdateMapLocations
// [0x00020102] 
// Parameters infos:

void ANetherPlayerController::DebugServerUpdateMapLocations ( )
{
	static UFunction* pFnDebugServerUpdateMapLocations = NULL;

	if ( ! pFnDebugServerUpdateMapLocations )
		pFnDebugServerUpdateMapLocations = (UFunction*) UObject::GObjObjects()->Data[ 76083 ];

	ANetherPlayerController_execDebugServerUpdateMapLocations_Parms DebugServerUpdateMapLocations_Parms;

	this->ProcessEvent ( pFnDebugServerUpdateMapLocations, &DebugServerUpdateMapLocations_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.NativeServerUpdateMapLocations
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANetherPlayerController::NativeServerUpdateMapLocations ( )
{
	static UFunction* pFnNativeServerUpdateMapLocations = NULL;

	if ( ! pFnNativeServerUpdateMapLocations )
		pFnNativeServerUpdateMapLocations = (UFunction*) UObject::GObjObjects()->Data[ 76089 ];

	ANetherPlayerController_execNativeServerUpdateMapLocations_Parms NativeServerUpdateMapLocations_Parms;

	pFnNativeServerUpdateMapLocations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeServerUpdateMapLocations, &NativeServerUpdateMapLocations_Parms, NULL );

	pFnNativeServerUpdateMapLocations->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherPlayerController.ShowInteractPrompt
// [0x00020002] 
// Parameters infos:
// class AActor*                  InteractActor                  ( CPF_Parm )

void ANetherPlayerController::ShowInteractPrompt ( class AActor* InteractActor )
{
	static UFunction* pFnShowInteractPrompt = NULL;

	if ( ! pFnShowInteractPrompt )
		pFnShowInteractPrompt = (UFunction*) UObject::GObjObjects()->Data[ 76090 ];

	ANetherPlayerController_execShowInteractPrompt_Parms ShowInteractPrompt_Parms;
	ShowInteractPrompt_Parms.InteractActor = InteractActor;

	this->ProcessEvent ( pFnShowInteractPrompt, &ShowInteractPrompt_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPlayerController::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 76091 ];

	ANetherPlayerController_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetPlayerViewPoint
// [0x00C20902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void ANetherPlayerController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 76094 ];

	ANetherPlayerController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function NetherGame.NetherPlayerController.AddOnlineDelegates
// [0x00020002] 
// Parameters infos:
// unsigned long                  bRegisterVoice                 ( CPF_Parm )

void ANetherPlayerController::AddOnlineDelegates ( unsigned long bRegisterVoice )
{
	static UFunction* pFnAddOnlineDelegates = NULL;

	if ( ! pFnAddOnlineDelegates )
		pFnAddOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 76108 ];

	ANetherPlayerController_execAddOnlineDelegates_Parms AddOnlineDelegates_Parms;
	AddOnlineDelegates_Parms.bRegisterVoice = bRegisterVoice;

	this->ProcessEvent ( pFnAddOnlineDelegates, &AddOnlineDelegates_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetNetherPawn
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class ANetherPawn*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherPawn* ANetherPlayerController::GetNetherPawn ( )
{
	static UFunction* pFnGetNetherPawn = NULL;

	if ( ! pFnGetNetherPawn )
		pFnGetNetherPawn = (UFunction*) UObject::GObjObjects()->Data[ 71142 ];

	ANetherPlayerController_execGetNetherPawn_Parms GetNetherPawn_Parms;

	this->ProcessEvent ( pFnGetNetherPawn, &GetNetherPawn_Parms, NULL );

	return GetNetherPawn_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.UpdateSpawnStats_Enemies
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            NumActive                      ( CPF_Parm )
// int                            NumPooled                      ( CPF_Parm )
// int                            NumMax                         ( CPF_Parm )
// float                          CycleTime                      ( CPF_Parm )

void ANetherPlayerController::UpdateSpawnStats_Enemies ( int NumActive, int NumPooled, int NumMax, float CycleTime )
{
	static UFunction* pFnUpdateSpawnStats_Enemies = NULL;

	if ( ! pFnUpdateSpawnStats_Enemies )
		pFnUpdateSpawnStats_Enemies = (UFunction*) UObject::GObjObjects()->Data[ 76116 ];

	ANetherPlayerController_execUpdateSpawnStats_Enemies_Parms UpdateSpawnStats_Enemies_Parms;
	UpdateSpawnStats_Enemies_Parms.NumActive = NumActive;
	UpdateSpawnStats_Enemies_Parms.NumPooled = NumPooled;
	UpdateSpawnStats_Enemies_Parms.NumMax = NumMax;
	UpdateSpawnStats_Enemies_Parms.CycleTime = CycleTime;

	pFnUpdateSpawnStats_Enemies->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSpawnStats_Enemies, &UpdateSpawnStats_Enemies_Parms, NULL );

	pFnUpdateSpawnStats_Enemies->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherPlayerController.UpdateSpawnStats_Pickups
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            NumActive                      ( CPF_Parm )
// int                            NumPooled                      ( CPF_Parm )
// int                            NumMax                         ( CPF_Parm )
// float                          CycleTime                      ( CPF_Parm )

void ANetherPlayerController::UpdateSpawnStats_Pickups ( int NumActive, int NumPooled, int NumMax, float CycleTime )
{
	static UFunction* pFnUpdateSpawnStats_Pickups = NULL;

	if ( ! pFnUpdateSpawnStats_Pickups )
		pFnUpdateSpawnStats_Pickups = (UFunction*) UObject::GObjObjects()->Data[ 76117 ];

	ANetherPlayerController_execUpdateSpawnStats_Pickups_Parms UpdateSpawnStats_Pickups_Parms;
	UpdateSpawnStats_Pickups_Parms.NumActive = NumActive;
	UpdateSpawnStats_Pickups_Parms.NumPooled = NumPooled;
	UpdateSpawnStats_Pickups_Parms.NumMax = NumMax;
	UpdateSpawnStats_Pickups_Parms.CycleTime = CycleTime;

	pFnUpdateSpawnStats_Pickups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSpawnStats_Pickups, &UpdateSpawnStats_Pickups_Parms, NULL );

	pFnUpdateSpawnStats_Pickups->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherPlayerController.ClientUpdateSpawnStats_Enemies
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// int                            NumActive                      ( CPF_Parm )
// int                            NumPooled                      ( CPF_Parm )
// int                            NumMax                         ( CPF_Parm )
// float                          CycleTime                      ( CPF_Parm )

void ANetherPlayerController::eventClientUpdateSpawnStats_Enemies ( int NumActive, int NumPooled, int NumMax, float CycleTime )
{
	static UFunction* pFnClientUpdateSpawnStats_Enemies = NULL;

	if ( ! pFnClientUpdateSpawnStats_Enemies )
		pFnClientUpdateSpawnStats_Enemies = (UFunction*) UObject::GObjObjects()->Data[ 76122 ];

	ANetherPlayerController_eventClientUpdateSpawnStats_Enemies_Parms ClientUpdateSpawnStats_Enemies_Parms;
	ClientUpdateSpawnStats_Enemies_Parms.NumActive = NumActive;
	ClientUpdateSpawnStats_Enemies_Parms.NumPooled = NumPooled;
	ClientUpdateSpawnStats_Enemies_Parms.NumMax = NumMax;
	ClientUpdateSpawnStats_Enemies_Parms.CycleTime = CycleTime;

	this->ProcessEvent ( pFnClientUpdateSpawnStats_Enemies, &ClientUpdateSpawnStats_Enemies_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientUpdateSpawnStats_Pickups
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// int                            NumActive                      ( CPF_Parm )
// int                            NumPooled                      ( CPF_Parm )
// int                            NumMax                         ( CPF_Parm )
// float                          CycleTime                      ( CPF_Parm )

void ANetherPlayerController::eventClientUpdateSpawnStats_Pickups ( int NumActive, int NumPooled, int NumMax, float CycleTime )
{
	static UFunction* pFnClientUpdateSpawnStats_Pickups = NULL;

	if ( ! pFnClientUpdateSpawnStats_Pickups )
		pFnClientUpdateSpawnStats_Pickups = (UFunction*) UObject::GObjObjects()->Data[ 76127 ];

	ANetherPlayerController_eventClientUpdateSpawnStats_Pickups_Parms ClientUpdateSpawnStats_Pickups_Parms;
	ClientUpdateSpawnStats_Pickups_Parms.NumActive = NumActive;
	ClientUpdateSpawnStats_Pickups_Parms.NumPooled = NumPooled;
	ClientUpdateSpawnStats_Pickups_Parms.NumMax = NumMax;
	ClientUpdateSpawnStats_Pickups_Parms.CycleTime = CycleTime;

	this->ProcessEvent ( pFnClientUpdateSpawnStats_Pickups, &ClientUpdateSpawnStats_Pickups_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.IsDebugPickupFinderEnabled
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::IsDebugPickupFinderEnabled ( )
{
	static UFunction* pFnIsDebugPickupFinderEnabled = NULL;

	if ( ! pFnIsDebugPickupFinderEnabled )
		pFnIsDebugPickupFinderEnabled = (UFunction*) UObject::GObjObjects()->Data[ 76132 ];

	ANetherPlayerController_execIsDebugPickupFinderEnabled_Parms IsDebugPickupFinderEnabled_Parms;

	this->ProcessEvent ( pFnIsDebugPickupFinderEnabled, &IsDebugPickupFinderEnabled_Parms, NULL );

	return IsDebugPickupFinderEnabled_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ToggleDebugPickupFinder
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::ToggleDebugPickupFinder ( )
{
	static UFunction* pFnToggleDebugPickupFinder = NULL;

	if ( ! pFnToggleDebugPickupFinder )
		pFnToggleDebugPickupFinder = (UFunction*) UObject::GObjObjects()->Data[ 76137 ];

	ANetherPlayerController_execToggleDebugPickupFinder_Parms ToggleDebugPickupFinder_Parms;

	this->ProcessEvent ( pFnToggleDebugPickupFinder, &ToggleDebugPickupFinder_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DebugServerSpawnPool_Enemies
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bForceFullAlloc                ( CPF_Parm )
// int                            AllocMax                       ( CPF_Parm )

void ANetherPlayerController::DebugServerSpawnPool_Enemies ( unsigned long bForceFullAlloc, int AllocMax )
{
	static UFunction* pFnDebugServerSpawnPool_Enemies = NULL;

	if ( ! pFnDebugServerSpawnPool_Enemies )
		pFnDebugServerSpawnPool_Enemies = (UFunction*) UObject::GObjObjects()->Data[ 76140 ];

	ANetherPlayerController_execDebugServerSpawnPool_Enemies_Parms DebugServerSpawnPool_Enemies_Parms;
	DebugServerSpawnPool_Enemies_Parms.bForceFullAlloc = bForceFullAlloc;
	DebugServerSpawnPool_Enemies_Parms.AllocMax = AllocMax;

	this->ProcessEvent ( pFnDebugServerSpawnPool_Enemies, &DebugServerSpawnPool_Enemies_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DebugSpawnPool_Enemies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bForceFullAlloc                ( CPF_Parm )
// int                            AllocMax                       ( CPF_Parm )

void ANetherPlayerController::DebugSpawnPool_Enemies ( unsigned long bForceFullAlloc, int AllocMax )
{
	static UFunction* pFnDebugSpawnPool_Enemies = NULL;

	if ( ! pFnDebugSpawnPool_Enemies )
		pFnDebugSpawnPool_Enemies = (UFunction*) UObject::GObjObjects()->Data[ 76141 ];

	ANetherPlayerController_execDebugSpawnPool_Enemies_Parms DebugSpawnPool_Enemies_Parms;
	DebugSpawnPool_Enemies_Parms.bForceFullAlloc = bForceFullAlloc;
	DebugSpawnPool_Enemies_Parms.AllocMax = AllocMax;

	this->ProcessEvent ( pFnDebugSpawnPool_Enemies, &DebugSpawnPool_Enemies_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DebugServerSpawnPool_Pickups
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bForceFullAlloc                ( CPF_Parm )
// int                            AllocMax                       ( CPF_Parm )

void ANetherPlayerController::DebugServerSpawnPool_Pickups ( unsigned long bForceFullAlloc, int AllocMax )
{
	static UFunction* pFnDebugServerSpawnPool_Pickups = NULL;

	if ( ! pFnDebugServerSpawnPool_Pickups )
		pFnDebugServerSpawnPool_Pickups = (UFunction*) UObject::GObjObjects()->Data[ 76145 ];

	ANetherPlayerController_execDebugServerSpawnPool_Pickups_Parms DebugServerSpawnPool_Pickups_Parms;
	DebugServerSpawnPool_Pickups_Parms.bForceFullAlloc = bForceFullAlloc;
	DebugServerSpawnPool_Pickups_Parms.AllocMax = AllocMax;

	this->ProcessEvent ( pFnDebugServerSpawnPool_Pickups, &DebugServerSpawnPool_Pickups_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.DebugSpawnPool_Pickups
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bForceFullAlloc                ( CPF_Parm )
// int                            AllocMax                       ( CPF_Parm )

void ANetherPlayerController::DebugSpawnPool_Pickups ( unsigned long bForceFullAlloc, int AllocMax )
{
	static UFunction* pFnDebugSpawnPool_Pickups = NULL;

	if ( ! pFnDebugSpawnPool_Pickups )
		pFnDebugSpawnPool_Pickups = (UFunction*) UObject::GObjObjects()->Data[ 76148 ];

	ANetherPlayerController_execDebugSpawnPool_Pickups_Parms DebugSpawnPool_Pickups_Parms;
	DebugSpawnPool_Pickups_Parms.bForceFullAlloc = bForceFullAlloc;
	DebugSpawnPool_Pickups_Parms.AllocMax = AllocMax;

	this->ProcessEvent ( pFnDebugSpawnPool_Pickups, &DebugSpawnPool_Pickups_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ToggleFlashlight
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::ToggleFlashlight ( )
{
	static UFunction* pFnToggleFlashlight = NULL;

	if ( ! pFnToggleFlashlight )
		pFnToggleFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 76151 ];

	ANetherPlayerController_execToggleFlashlight_Parms ToggleFlashlight_Parms;

	this->ProcessEvent ( pFnToggleFlashlight, &ToggleFlashlight_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CleanupData
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::CleanupData ( )
{
	static UFunction* pFnCleanupData = NULL;

	if ( ! pFnCleanupData )
		pFnCleanupData = (UFunction*) UObject::GObjObjects()->Data[ 73806 ];

	ANetherPlayerController_execCleanupData_Parms CleanupData_Parms;

	this->ProcessEvent ( pFnCleanupData, &CleanupData_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PrepareLogout
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANetherPlayerController::eventPrepareLogout ( )
{
	static UFunction* pFnPrepareLogout = NULL;

	if ( ! pFnPrepareLogout )
		pFnPrepareLogout = (UFunction*) UObject::GObjObjects()->Data[ 76154 ];

	ANetherPlayerController_eventPrepareLogout_Parms PrepareLogout_Parms;

	this->ProcessEvent ( pFnPrepareLogout, &PrepareLogout_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ResetServerDocs
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::ResetServerDocs ( )
{
	static UFunction* pFnResetServerDocs = NULL;

	if ( ! pFnResetServerDocs )
		pFnResetServerDocs = (UFunction*) UObject::GObjObjects()->Data[ 73527 ];

	ANetherPlayerController_execResetServerDocs_Parms ResetServerDocs_Parms;

	this->ProcessEvent ( pFnResetServerDocs, &ResetServerDocs_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CanRestartPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::CanRestartPlayer ( )
{
	static UFunction* pFnCanRestartPlayer = NULL;

	if ( ! pFnCanRestartPlayer )
		pFnCanRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 76156 ];

	ANetherPlayerController_execCanRestartPlayer_Parms CanRestartPlayer_Parms;

	this->ProcessEvent ( pFnCanRestartPlayer, &CanRestartPlayer_Parms, NULL );

	return CanRestartPlayer_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.RevokeGCPurchase
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ANetherPlayerController::eventRevokeGCPurchase ( )
{
	static UFunction* pFnRevokeGCPurchase = NULL;

	if ( ! pFnRevokeGCPurchase )
		pFnRevokeGCPurchase = (UFunction*) UObject::GObjObjects()->Data[ 76157 ];

	ANetherPlayerController_eventRevokeGCPurchase_Parms RevokeGCPurchase_Parms;

	this->ProcessEvent ( pFnRevokeGCPurchase, &RevokeGCPurchase_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ClientPrintSystemMessage
// [0x010201C2] 
// Parameters infos:
// struct FString                 SysMessage                     ( CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::ClientPrintSystemMessage ( struct FString SysMessage )
{
	static UFunction* pFnClientPrintSystemMessage = NULL;

	if ( ! pFnClientPrintSystemMessage )
		pFnClientPrintSystemMessage = (UFunction*) UObject::GObjObjects()->Data[ 76159 ];

	ANetherPlayerController_execClientPrintSystemMessage_Parms ClientPrintSystemMessage_Parms;
	memcpy ( &ClientPrintSystemMessage_Parms.SysMessage, &SysMessage, 0x10 );

	this->ProcessEvent ( pFnClientPrintSystemMessage, &ClientPrintSystemMessage_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.SendMOTD
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::SendMOTD ( )
{
	static UFunction* pFnSendMOTD = NULL;

	if ( ! pFnSendMOTD )
		pFnSendMOTD = (UFunction*) UObject::GObjObjects()->Data[ 76160 ];

	ANetherPlayerController_execSendMOTD_Parms SendMOTD_Parms;

	this->ProcessEvent ( pFnSendMOTD, &SendMOTD_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerPrintPlayerList
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerPrintPlayerList ( )
{
	static UFunction* pFnServerPrintPlayerList = NULL;

	if ( ! pFnServerPrintPlayerList )
		pFnServerPrintPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 76162 ];

	ANetherPlayerController_execServerPrintPlayerList_Parms ServerPrintPlayerList_Parms;

	this->ProcessEvent ( pFnServerPrintPlayerList, &ServerPrintPlayerList_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.PrintPlayerList
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void ANetherPlayerController::PrintPlayerList ( )
{
	static UFunction* pFnPrintPlayerList = NULL;

	if ( ! pFnPrintPlayerList )
		pFnPrintPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 76165 ];

	ANetherPlayerController_execPrintPlayerList_Parms PrintPlayerList_Parms;

	this->ProcessEvent ( pFnPrintPlayerList, &PrintPlayerList_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerWhoIs
// [0x002200C2] 
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::ServerWhoIs ( struct FString PlayerName )
{
	static UFunction* pFnServerWhoIs = NULL;

	if ( ! pFnServerWhoIs )
		pFnServerWhoIs = (UFunction*) UObject::GObjObjects()->Data[ 76167 ];

	ANetherPlayerController_execServerWhoIs_Parms ServerWhoIs_Parms;
	memcpy ( &ServerWhoIs_Parms.PlayerName, &PlayerName, 0x10 );

	this->ProcessEvent ( pFnServerWhoIs, &ServerWhoIs_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.WhoIs
// [0x00020302] ( FUNC_Exec )
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::WhoIs ( struct FString PlayerName )
{
	static UFunction* pFnWhoIs = NULL;

	if ( ! pFnWhoIs )
		pFnWhoIs = (UFunction*) UObject::GObjObjects()->Data[ 76168 ];

	ANetherPlayerController_execWhoIs_Parms WhoIs_Parms;
	memcpy ( &WhoIs_Parms.PlayerName, &PlayerName, 0x10 );

	this->ProcessEvent ( pFnWhoIs, &WhoIs_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerBanPlayer
// [0x002200C2] 
// Parameters infos:
// struct FString                 MberPlayerId                   ( CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::ServerBanPlayer ( struct FString MberPlayerId )
{
	static UFunction* pFnServerBanPlayer = NULL;

	if ( ! pFnServerBanPlayer )
		pFnServerBanPlayer = (UFunction*) UObject::GObjObjects()->Data[ 76171 ];

	ANetherPlayerController_execServerBanPlayer_Parms ServerBanPlayer_Parms;
	memcpy ( &ServerBanPlayer_Parms.MberPlayerId, &MberPlayerId, 0x10 );

	this->ProcessEvent ( pFnServerBanPlayer, &ServerBanPlayer_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.BanPlayer
// [0x00020302] ( FUNC_Exec )
// Parameters infos:
// struct FString                 PlayerID                       ( CPF_Parm | CPF_NeedCtorLink )

void ANetherPlayerController::BanPlayer ( struct FString PlayerID )
{
	static UFunction* pFnBanPlayer = NULL;

	if ( ! pFnBanPlayer )
		pFnBanPlayer = (UFunction*) UObject::GObjObjects()->Data[ 76173 ];

	ANetherPlayerController_execBanPlayer_Parms BanPlayer_Parms;
	memcpy ( &BanPlayer_Parms.PlayerID, &PlayerID, 0x10 );

	this->ProcessEvent ( pFnBanPlayer, &BanPlayer_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.AskToBuyGold
// [0x00020102] 
// Parameters infos:

void ANetherPlayerController::AskToBuyGold ( )
{
	static UFunction* pFnAskToBuyGold = NULL;

	if ( ! pFnAskToBuyGold )
		pFnAskToBuyGold = (UFunction*) UObject::GObjObjects()->Data[ 76176 ];

	ANetherPlayerController_execAskToBuyGold_Parms AskToBuyGold_Parms;

	this->ProcessEvent ( pFnAskToBuyGold, &AskToBuyGold_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.UpdateGoldCurrency
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void ANetherPlayerController::eventUpdateGoldCurrency ( int Amount )
{
	static UFunction* pFnUpdateGoldCurrency = NULL;

	if ( ! pFnUpdateGoldCurrency )
		pFnUpdateGoldCurrency = (UFunction*) UObject::GObjObjects()->Data[ 76178 ];

	ANetherPlayerController_eventUpdateGoldCurrency_Parms UpdateGoldCurrency_Parms;
	UpdateGoldCurrency_Parms.Amount = Amount;

	this->ProcessEvent ( pFnUpdateGoldCurrency, &UpdateGoldCurrency_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.AttemptAutoConnect
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::AttemptAutoConnect ( )
{
	static UFunction* pFnAttemptAutoConnect = NULL;

	if ( ! pFnAttemptAutoConnect )
		pFnAttemptAutoConnect = (UFunction*) UObject::GObjObjects()->Data[ 76183 ];

	ANetherPlayerController_execAttemptAutoConnect_Parms AttemptAutoConnect_Parms;

	pFnAttemptAutoConnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttemptAutoConnect, &AttemptAutoConnect_Parms, NULL );

	pFnAttemptAutoConnect->FunctionFlags |= 0x400;

	return AttemptAutoConnect_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.BringUpStartScreen
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::BringUpStartScreen ( )
{
	static UFunction* pFnBringUpStartScreen = NULL;

	if ( ! pFnBringUpStartScreen )
		pFnBringUpStartScreen = (UFunction*) UObject::GObjObjects()->Data[ 76185 ];

	ANetherPlayerController_execBringUpStartScreen_Parms BringUpStartScreen_Parms;

	this->ProcessEvent ( pFnBringUpStartScreen, &BringUpStartScreen_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TryBringUpStartScreen
// [0x010201C2] 
// Parameters infos:

void ANetherPlayerController::TryBringUpStartScreen ( )
{
	static UFunction* pFnTryBringUpStartScreen = NULL;

	if ( ! pFnTryBringUpStartScreen )
		pFnTryBringUpStartScreen = (UFunction*) UObject::GObjObjects()->Data[ 76187 ];

	ANetherPlayerController_execTryBringUpStartScreen_Parms TryBringUpStartScreen_Parms;

	this->ProcessEvent ( pFnTryBringUpStartScreen, &TryBringUpStartScreen_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.OnDocumentUpdate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherServerDocument*   Doc                            ( CPF_Parm )

void ANetherPlayerController::OnDocumentUpdate ( class ANetherServerDocument* Doc )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 72505 ];

	ANetherPlayerController_execOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.Doc = Doc;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.IsUpdatingServerDocs
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPlayerController::IsUpdatingServerDocs ( )
{
	static UFunction* pFnIsUpdatingServerDocs = NULL;

	if ( ! pFnIsUpdatingServerDocs )
		pFnIsUpdatingServerDocs = (UFunction*) UObject::GObjObjects()->Data[ 76188 ];

	ANetherPlayerController_execIsUpdatingServerDocs_Parms IsUpdatingServerDocs_Parms;

	this->ProcessEvent ( pFnIsUpdatingServerDocs, &IsUpdatingServerDocs_Parms, NULL );

	return IsUpdatingServerDocs_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.SpawnDocuments
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::SpawnDocuments ( )
{
	static UFunction* pFnSpawnDocuments = NULL;

	if ( ! pFnSpawnDocuments )
		pFnSpawnDocuments = (UFunction*) UObject::GObjObjects()->Data[ 73799 ];

	ANetherPlayerController_execSpawnDocuments_Parms SpawnDocuments_Parms;

	this->ProcessEvent ( pFnSpawnDocuments, &SpawnDocuments_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerSpawnDocuments
// [0x002200C3] ( FUNC_Final )
// Parameters infos:

void ANetherPlayerController::ServerSpawnDocuments ( )
{
	static UFunction* pFnServerSpawnDocuments = NULL;

	if ( ! pFnServerSpawnDocuments )
		pFnServerSpawnDocuments = (UFunction*) UObject::GObjObjects()->Data[ 76191 ];

	ANetherPlayerController_execServerSpawnDocuments_Parms ServerSpawnDocuments_Parms;

	this->ProcessEvent ( pFnServerSpawnDocuments, &ServerSpawnDocuments_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.SwapServerDocs
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            NewSlotIndex                   ( CPF_Parm )

void ANetherPlayerController::SwapServerDocs ( int NewSlotIndex )
{
	static UFunction* pFnSwapServerDocs = NULL;

	if ( ! pFnSwapServerDocs )
		pFnSwapServerDocs = (UFunction*) UObject::GObjObjects()->Data[ 76194 ];

	ANetherPlayerController_execSwapServerDocs_Parms SwapServerDocs_Parms;
	SwapServerDocs_Parms.NewSlotIndex = NewSlotIndex;

	this->ProcessEvent ( pFnSwapServerDocs, &SwapServerDocs_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerSetCharacterSlot
// [0x002200C3] ( FUNC_Final )
// Parameters infos:
// int                            NewSlotIndex                   ( CPF_Parm )

void ANetherPlayerController::ServerSetCharacterSlot ( int NewSlotIndex )
{
	static UFunction* pFnServerSetCharacterSlot = NULL;

	if ( ! pFnServerSetCharacterSlot )
		pFnServerSetCharacterSlot = (UFunction*) UObject::GObjObjects()->Data[ 76195 ];

	ANetherPlayerController_execServerSetCharacterSlot_Parms ServerSetCharacterSlot_Parms;
	ServerSetCharacterSlot_Parms.NewSlotIndex = NewSlotIndex;

	this->ProcessEvent ( pFnServerSetCharacterSlot, &ServerSetCharacterSlot_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.SetCharacterSlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            NewSlotIndex                   ( CPF_Parm )

void ANetherPlayerController::SetCharacterSlot ( int NewSlotIndex )
{
	static UFunction* pFnSetCharacterSlot = NULL;

	if ( ! pFnSetCharacterSlot )
		pFnSetCharacterSlot = (UFunction*) UObject::GObjObjects()->Data[ 76197 ];

	ANetherPlayerController_execSetCharacterSlot_Parms SetCharacterSlot_Parms;
	SetCharacterSlot_Parms.NewSlotIndex = NewSlotIndex;

	this->ProcessEvent ( pFnSetCharacterSlot, &SetCharacterSlot_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANetherPlayerController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 76199 ];

	ANetherPlayerController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerTryResetPosition
// [0x002200C2] 
// Parameters infos:

void ANetherPlayerController::ServerTryResetPosition ( )
{
	static UFunction* pFnServerTryResetPosition = NULL;

	if ( ! pFnServerTryResetPosition )
		pFnServerTryResetPosition = (UFunction*) UObject::GObjObjects()->Data[ 76201 ];

	ANetherPlayerController_execServerTryResetPosition_Parms ServerTryResetPosition_Parms;

	this->ProcessEvent ( pFnServerTryResetPosition, &ServerTryResetPosition_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.ServerSuicide
// [0x002200C0] 
// Parameters infos:

void ANetherPlayerController::ServerSuicide ( )
{
	static UFunction* pFnServerSuicide = NULL;

	if ( ! pFnServerSuicide )
		pFnServerSuicide = (UFunction*) UObject::GObjObjects()->Data[ 76203 ];

	ANetherPlayerController_execServerSuicide_Parms ServerSuicide_Parms;

	this->ProcessEvent ( pFnServerSuicide, &ServerSuicide_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.GetCurrentDate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerController::GetCurrentDate ( )
{
	static UFunction* pFnGetCurrentDate = NULL;

	if ( ! pFnGetCurrentDate )
		pFnGetCurrentDate = (UFunction*) UObject::GObjObjects()->Data[ 76204 ];

	ANetherPlayerController_execGetCurrentDate_Parms GetCurrentDate_Parms;

	pFnGetCurrentDate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentDate, &GetCurrentDate_Parms, NULL );

	pFnGetCurrentDate->FunctionFlags |= 0x400;

	return GetCurrentDate_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.GetSubwayVolumes
// [0x00020102] 
// Parameters infos:

void ANetherPlayerController::GetSubwayVolumes ( )
{
	static UFunction* pFnGetSubwayVolumes = NULL;

	if ( ! pFnGetSubwayVolumes )
		pFnGetSubwayVolumes = (UFunction*) UObject::GObjObjects()->Data[ 76205 ];

	ANetherPlayerController_execGetSubwayVolumes_Parms GetSubwayVolumes_Parms;

	this->ProcessEvent ( pFnGetSubwayVolumes, &GetSubwayVolumes_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.SetInitialState
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ANetherPlayerController::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 76207 ];

	ANetherPlayerController_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.TryResetPosition
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int ANetherPlayerController::TryResetPosition ( class UGFxButton* Button )
{
	static UFunction* pFnTryResetPosition = NULL;

	if ( ! pFnTryResetPosition )
		pFnTryResetPosition = (UFunction*) UObject::GObjObjects()->Data[ 76213 ];

	ANetherPlayerController_execTryResetPosition_Parms TryResetPosition_Parms;
	TryResetPosition_Parms.Button = Button;

	this->ProcessEvent ( pFnTryResetPosition, &TryResetPosition_Parms, NULL );

	return TryResetPosition_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerController.ResetPosition
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::ResetPosition ( )
{
	static UFunction* pFnResetPosition = NULL;

	if ( ! pFnResetPosition )
		pFnResetPosition = (UFunction*) UObject::GObjObjects()->Data[ 76214 ];

	ANetherPlayerController_execResetPosition_Parms ResetPosition_Parms;

	this->ProcessEvent ( pFnResetPosition, &ResetPosition_Parms, NULL );
};

// Function NetherGame.NetherPlayerController.CleanupPawn
// [0x00020002] 
// Parameters infos:

void ANetherPlayerController::CleanupPawn ( )
{
	static UFunction* pFnCleanupPawn = NULL;

	if ( ! pFnCleanupPawn )
		pFnCleanupPawn = (UFunction*) UObject::GObjObjects()->Data[ 76217 ];

	ANetherPlayerController_execCleanupPawn_Parms CleanupPawn_Parms;

	this->ProcessEvent ( pFnCleanupPawn, &CleanupPawn_Parms, NULL );
};

// Function NetherGame.NetherSafeZone.EnterAllPlayers
// [0x00020002] 
// Parameters infos:

void ANetherSafeZone::EnterAllPlayers ( )
{
	static UFunction* pFnEnterAllPlayers = NULL;

	if ( ! pFnEnterAllPlayers )
		pFnEnterAllPlayers = (UFunction*) UObject::GObjObjects()->Data[ 78112 ];

	ANetherSafeZone_execEnterAllPlayers_Parms EnterAllPlayers_Parms;

	this->ProcessEvent ( pFnEnterAllPlayers, &EnterAllPlayers_Parms, NULL );
};

// Function NetherGame.NetherSafeZone.ExitAllPlayers
// [0x00020002] 
// Parameters infos:

void ANetherSafeZone::ExitAllPlayers ( )
{
	static UFunction* pFnExitAllPlayers = NULL;

	if ( ! pFnExitAllPlayers )
		pFnExitAllPlayers = (UFunction*) UObject::GObjObjects()->Data[ 78108 ];

	ANetherSafeZone_execExitAllPlayers_Parms ExitAllPlayers_Parms;

	this->ProcessEvent ( pFnExitAllPlayers, &ExitAllPlayers_Parms, NULL );
};

// Function NetherGame.NetherSafeZone.IntializeSafeZone
// [0x00020002] 
// Parameters infos:
// class ANetherTerritoryVolume*  VolumeOwner                    ( CPF_Parm )

void ANetherSafeZone::IntializeSafeZone ( class ANetherTerritoryVolume* VolumeOwner )
{
	static UFunction* pFnIntializeSafeZone = NULL;

	if ( ! pFnIntializeSafeZone )
		pFnIntializeSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78106 ];

	ANetherSafeZone_execIntializeSafeZone_Parms IntializeSafeZone_Parms;
	IntializeSafeZone_Parms.VolumeOwner = VolumeOwner;

	this->ProcessEvent ( pFnIntializeSafeZone, &IntializeSafeZone_Parms, NULL );
};

// Function NetherGame.NetherSafeZone.ObjectiveActiveInSafeZone
// [0x00020002] 
// Parameters infos:

void ANetherSafeZone::ObjectiveActiveInSafeZone ( )
{
	static UFunction* pFnObjectiveActiveInSafeZone = NULL;

	if ( ! pFnObjectiveActiveInSafeZone )
		pFnObjectiveActiveInSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78105 ];

	ANetherSafeZone_execObjectiveActiveInSafeZone_Parms ObjectiveActiveInSafeZone_Parms;

	this->ProcessEvent ( pFnObjectiveActiveInSafeZone, &ObjectiveActiveInSafeZone_Parms, NULL );
};

// Function NetherGame.NetherSafeZone.DisableSafeZone
// [0x00020002] 
// Parameters infos:

void ANetherSafeZone::DisableSafeZone ( )
{
	static UFunction* pFnDisableSafeZone = NULL;

	if ( ! pFnDisableSafeZone )
		pFnDisableSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78104 ];

	ANetherSafeZone_execDisableSafeZone_Parms DisableSafeZone_Parms;

	this->ProcessEvent ( pFnDisableSafeZone, &DisableSafeZone_Parms, NULL );
};

// Function NetherGame.NetherSafeZone.EnableSafeZone
// [0x00020002] 
// Parameters infos:

void ANetherSafeZone::EnableSafeZone ( )
{
	static UFunction* pFnEnableSafeZone = NULL;

	if ( ! pFnEnableSafeZone )
		pFnEnableSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78103 ];

	ANetherSafeZone_execEnableSafeZone_Parms EnableSafeZone_Parms;

	this->ProcessEvent ( pFnEnableSafeZone, &EnableSafeZone_Parms, NULL );
};

// Function NetherGame.NetherSafeZone.IsActive
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherSafeZone::eventIsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 78101 ];

	ANetherSafeZone_eventIsActive_Parms IsActive_Parms;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function NetherGame.NetherTerritoryVolume.GetSafeZone
// [0x00020002] 
// Parameters infos:
// class ANetherSafeZone*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherSafeZone* ANetherTerritoryVolume::GetSafeZone ( )
{
	static UFunction* pFnGetSafeZone = NULL;

	if ( ! pFnGetSafeZone )
		pFnGetSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 77226 ];

	ANetherTerritoryVolume_execGetSafeZone_Parms GetSafeZone_Parms;

	this->ProcessEvent ( pFnGetSafeZone, &GetSafeZone_Parms, NULL );

	return GetSafeZone_Parms.ReturnValue;
};

// Function NetherGame.NetherTerritoryVolume.IsSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherTerritoryVolume::IsSafeZone ( )
{
	static UFunction* pFnIsSafeZone = NULL;

	if ( ! pFnIsSafeZone )
		pFnIsSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 76567 ];

	ANetherTerritoryVolume_execIsSafeZone_Parms IsSafeZone_Parms;

	this->ProcessEvent ( pFnIsSafeZone, &IsSafeZone_Parms, NULL );

	return IsSafeZone_Parms.ReturnValue;
};

// Function NetherGame.NetherTerritoryVolume.CleanUpAllEnemies
// [0x00020002] 
// Parameters infos:

void ANetherTerritoryVolume::CleanUpAllEnemies ( )
{
	static UFunction* pFnCleanUpAllEnemies = NULL;

	if ( ! pFnCleanUpAllEnemies )
		pFnCleanUpAllEnemies = (UFunction*) UObject::GObjObjects()->Data[ 78971 ];

	ANetherTerritoryVolume_execCleanUpAllEnemies_Parms CleanUpAllEnemies_Parms;

	this->ProcessEvent ( pFnCleanUpAllEnemies, &CleanUpAllEnemies_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.ExitAllPlayersFromSafeZone
// [0x00020002] 
// Parameters infos:

void ANetherTerritoryVolume::ExitAllPlayersFromSafeZone ( )
{
	static UFunction* pFnExitAllPlayersFromSafeZone = NULL;

	if ( ! pFnExitAllPlayersFromSafeZone )
		pFnExitAllPlayersFromSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78967 ];

	ANetherTerritoryVolume_execExitAllPlayersFromSafeZone_Parms ExitAllPlayersFromSafeZone_Parms;

	this->ProcessEvent ( pFnExitAllPlayersFromSafeZone, &ExitAllPlayersFromSafeZone_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.AllowedToSpawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherTerritoryVolume::eventAllowedToSpawn ( )
{
	static UFunction* pFnAllowedToSpawn = NULL;

	if ( ! pFnAllowedToSpawn )
		pFnAllowedToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 78965 ];

	ANetherTerritoryVolume_eventAllowedToSpawn_Parms AllowedToSpawn_Parms;

	this->ProcessEvent ( pFnAllowedToSpawn, &AllowedToSpawn_Parms, NULL );

	return AllowedToSpawn_Parms.ReturnValue;
};

// Function NetherGame.NetherTerritoryVolume.ObjectiveRequest_SpawnEnemy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANPawnEnemy*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyType                      ( CPF_Parm )
// int                            XPBonus                        ( CPF_Parm )

class ANPawnEnemy* ANetherTerritoryVolume::ObjectiveRequest_SpawnEnemy ( class UClass* EnemyType, int XPBonus )
{
	static UFunction* pFnObjectiveRequest_SpawnEnemy = NULL;

	if ( ! pFnObjectiveRequest_SpawnEnemy )
		pFnObjectiveRequest_SpawnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 77122 ];

	ANetherTerritoryVolume_execObjectiveRequest_SpawnEnemy_Parms ObjectiveRequest_SpawnEnemy_Parms;
	ObjectiveRequest_SpawnEnemy_Parms.EnemyType = EnemyType;
	ObjectiveRequest_SpawnEnemy_Parms.XPBonus = XPBonus;

	pFnObjectiveRequest_SpawnEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObjectiveRequest_SpawnEnemy, &ObjectiveRequest_SpawnEnemy_Parms, NULL );

	pFnObjectiveRequest_SpawnEnemy->FunctionFlags |= 0x400;

	return ObjectiveRequest_SpawnEnemy_Parms.ReturnValue;
};

// Function NetherGame.NetherTerritoryVolume.PreObjectiveActivation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bClearEnemies                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bClearPickups                  ( CPF_OptionalParm | CPF_Parm )

void ANetherTerritoryVolume::PreObjectiveActivation ( unsigned long bClearEnemies, unsigned long bClearPickups )
{
	static UFunction* pFnPreObjectiveActivation = NULL;

	if ( ! pFnPreObjectiveActivation )
		pFnPreObjectiveActivation = (UFunction*) UObject::GObjObjects()->Data[ 77074 ];

	ANetherTerritoryVolume_execPreObjectiveActivation_Parms PreObjectiveActivation_Parms;
	PreObjectiveActivation_Parms.bClearEnemies = bClearEnemies;
	PreObjectiveActivation_Parms.bClearPickups = bClearPickups;

	pFnPreObjectiveActivation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPreObjectiveActivation, &PreObjectiveActivation_Parms, NULL );

	pFnPreObjectiveActivation->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherTerritoryVolume.GetAllPlayers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class ANetherPawn* >   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< class ANetherPawn* > ANetherTerritoryVolume::GetAllPlayers ( )
{
	static UFunction* pFnGetAllPlayers = NULL;

	if ( ! pFnGetAllPlayers )
		pFnGetAllPlayers = (UFunction*) UObject::GObjObjects()->Data[ 77035 ];

	ANetherTerritoryVolume_execGetAllPlayers_Parms GetAllPlayers_Parms;

	pFnGetAllPlayers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllPlayers, &GetAllPlayers_Parms, NULL );

	pFnGetAllPlayers->FunctionFlags |= 0x400;

	return GetAllPlayers_Parms.ReturnValue;
};

// Function NetherGame.NetherTerritoryVolume.GetEnemyCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherTerritoryVolume::GetEnemyCount ( )
{
	static UFunction* pFnGetEnemyCount = NULL;

	if ( ! pFnGetEnemyCount )
		pFnGetEnemyCount = (UFunction*) UObject::GObjObjects()->Data[ 78958 ];

	ANetherTerritoryVolume_execGetEnemyCount_Parms GetEnemyCount_Parms;

	pFnGetEnemyCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnemyCount, &GetEnemyCount_Parms, NULL );

	pFnGetEnemyCount->FunctionFlags |= 0x400;

	return GetEnemyCount_Parms.ReturnValue;
};

// Function NetherGame.NetherTerritoryVolume.AwardPawnXP
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            XPAmount                       ( CPF_Parm )

void ANetherTerritoryVolume::AwardPawnXP ( int XPAmount )
{
	static UFunction* pFnAwardPawnXP = NULL;

	if ( ! pFnAwardPawnXP )
		pFnAwardPawnXP = (UFunction*) UObject::GObjObjects()->Data[ 78956 ];

	ANetherTerritoryVolume_execAwardPawnXP_Parms AwardPawnXP_Parms;
	AwardPawnXP_Parms.XPAmount = XPAmount;

	pFnAwardPawnXP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAwardPawnXP, &AwardPawnXP_Parms, NULL );

	pFnAwardPawnXP->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherTerritoryVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherTerritoryVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78954 ];

	ANetherTerritoryVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANetherTerritoryVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78949 ];

	ANetherTerritoryVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ANetherTerritoryVolume::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 78947 ];

	ANetherTerritoryVolume_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.OnUnTouchSafeZone
// [0x00120000] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherTerritoryVolume::OnUnTouchSafeZone ( class AActor* Other )
{
	static UFunction* pFnOnUnTouchSafeZone = NULL;

	if ( ! pFnOnUnTouchSafeZone )
		pFnOnUnTouchSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78924 ];

	ANetherTerritoryVolume_execOnUnTouchSafeZone_Parms OnUnTouchSafeZone_Parms;
	OnUnTouchSafeZone_Parms.Other = Other;

	this->ProcessEvent ( pFnOnUnTouchSafeZone, &OnUnTouchSafeZone_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.OnTouchSafeZone
// [0x00120000] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANetherTerritoryVolume::OnTouchSafeZone ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnTouchSafeZone = NULL;

	if ( ! pFnOnTouchSafeZone )
		pFnOnTouchSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78926 ];

	ANetherTerritoryVolume_execOnTouchSafeZone_Parms OnTouchSafeZone_Parms;
	OnTouchSafeZone_Parms.Other = Other;
	OnTouchSafeZone_Parms.OtherComp = OtherComp;
	memcpy ( &OnTouchSafeZone_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnTouchSafeZone_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnTouchSafeZone, &OnTouchSafeZone_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.OnUnTouch
// [0x00120000] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherTerritoryVolume::OnUnTouch ( class AActor* Other )
{
	static UFunction* pFnOnUnTouch = NULL;

	if ( ! pFnOnUnTouch )
		pFnOnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78927 ];

	ANetherTerritoryVolume_execOnUnTouch_Parms OnUnTouch_Parms;
	OnUnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnOnUnTouch, &OnUnTouch_Parms, NULL );
};

// Function NetherGame.NetherTerritoryVolume.OnTouch
// [0x00120000] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANetherTerritoryVolume::OnTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnOnTouch = NULL;

	if ( ! pFnOnTouch )
		pFnOnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78929 ];

	ANetherTerritoryVolume_execOnTouch_Parms OnTouch_Parms;
	OnTouch_Parms.Other = Other;
	OnTouch_Parms.OtherComp = OtherComp;
	memcpy ( &OnTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnOnTouch, &OnTouch_Parms, NULL );
};

// Function NetherGame.NBotEnemy.IsStunned
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBotEnemy::IsStunned ( )
{
	static UFunction* pFnIsStunned = NULL;

	if ( ! pFnIsStunned )
		pFnIsStunned = (UFunction*) UObject::GObjObjects()->Data[ 72054 ];

	ANBotEnemy_execIsStunned_Parms IsStunned_Parms;

	this->ProcessEvent ( pFnIsStunned, &IsStunned_Parms, NULL );

	return IsStunned_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ANBotEnemy::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 72048 ];

	ANBotEnemy_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function NetherGame.NBotEnemy.IsAttacking
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBotEnemy::IsAttacking ( )
{
	static UFunction* pFnIsAttacking = NULL;

	if ( ! pFnIsAttacking )
		pFnIsAttacking = (UFunction*) UObject::GObjObjects()->Data[ 72021 ];

	ANBotEnemy_execIsAttacking_Parms IsAttacking_Parms;

	this->ProcessEvent ( pFnIsAttacking, &IsAttacking_Parms, NULL );

	return IsAttacking_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy.HuntOrAttack
// [0x00020000] 
// Parameters infos:

void ANBotEnemy::HuntOrAttack ( )
{
	static UFunction* pFnHuntOrAttack = NULL;

	if ( ! pFnHuntOrAttack )
		pFnHuntOrAttack = (UFunction*) UObject::GObjObjects()->Data[ 72012 ];

	ANBotEnemy_execHuntOrAttack_Parms HuntOrAttack_Parms;

	this->ProcessEvent ( pFnHuntOrAttack, &HuntOrAttack_Parms, NULL );
};

// Function NetherGame.NBotEnemy.OnNPawnDied
// [0x00020002] 
// Parameters infos:
// class ANetherPawn*             NPawn                          ( CPF_Parm )

void ANBotEnemy::OnNPawnDied ( class ANetherPawn* NPawn )
{
	static UFunction* pFnOnNPawnDied = NULL;

	if ( ! pFnOnNPawnDied )
		pFnOnNPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 72010 ];

	ANBotEnemy_execOnNPawnDied_Parms OnNPawnDied_Parms;
	OnNPawnDied_Parms.NPawn = NPawn;

	this->ProcessEvent ( pFnOnNPawnDied, &OnNPawnDied_Parms, NULL );
};

// Function NetherGame.NBotEnemy.ClearHuntedPlayer
// [0x00020002] 
// Parameters infos:

void ANBotEnemy::ClearHuntedPlayer ( )
{
	static UFunction* pFnClearHuntedPlayer = NULL;

	if ( ! pFnClearHuntedPlayer )
		pFnClearHuntedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 72009 ];

	ANBotEnemy_execClearHuntedPlayer_Parms ClearHuntedPlayer_Parms;

	this->ProcessEvent ( pFnClearHuntedPlayer, &ClearHuntedPlayer_Parms, NULL );
};

// Function NetherGame.NBotEnemy.AssignHuntedPlayer
// [0x00020002] 
// Parameters infos:
// class ANetherPawn*             InHuntedPlayer                 ( CPF_Parm )

void ANBotEnemy::AssignHuntedPlayer ( class ANetherPawn* InHuntedPlayer )
{
	static UFunction* pFnAssignHuntedPlayer = NULL;

	if ( ! pFnAssignHuntedPlayer )
		pFnAssignHuntedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 72007 ];

	ANBotEnemy_execAssignHuntedPlayer_Parms AssignHuntedPlayer_Parms;
	AssignHuntedPlayer_Parms.InHuntedPlayer = InHuntedPlayer;

	this->ProcessEvent ( pFnAssignHuntedPlayer, &AssignHuntedPlayer_Parms, NULL );
};

// Function NetherGame.NBotEnemy.GetUnstuck
// [0x00020000] 
// Parameters infos:

void ANBotEnemy::GetUnstuck ( )
{
	static UFunction* pFnGetUnstuck = NULL;

	if ( ! pFnGetUnstuck )
		pFnGetUnstuck = (UFunction*) UObject::GObjObjects()->Data[ 71980 ];

	ANBotEnemy_execGetUnstuck_Parms GetUnstuck_Parms;

	this->ProcessEvent ( pFnGetUnstuck, &GetUnstuck_Parms, NULL );
};

// Function NetherGame.NBotEnemy.IsStuck
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBotEnemy::IsStuck ( )
{
	static UFunction* pFnIsStuck = NULL;

	if ( ! pFnIsStuck )
		pFnIsStuck = (UFunction*) UObject::GObjObjects()->Data[ 71978 ];

	ANBotEnemy_execIsStuck_Parms IsStuck_Parms;

	this->ProcessEvent ( pFnIsStuck, &IsStuck_Parms, NULL );

	return IsStuck_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy.CheckIfStuck
// [0x00020002] 
// Parameters infos:

void ANBotEnemy::CheckIfStuck ( )
{
	static UFunction* pFnCheckIfStuck = NULL;

	if ( ! pFnCheckIfStuck )
		pFnCheckIfStuck = (UFunction*) UObject::GObjObjects()->Data[ 71977 ];

	ANBotEnemy_execCheckIfStuck_Parms CheckIfStuck_Parms;

	this->ProcessEvent ( pFnCheckIfStuck, &CheckIfStuck_Parms, NULL );
};

// Function NetherGame.NBotEnemy.NotifyHitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool ANBotEnemy::eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 71973 ];

	ANBotEnemy_eventNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy.DropAggro
// [0x00020002] 
// Parameters infos:

void ANBotEnemy::DropAggro ( )
{
	static UFunction* pFnDropAggro = NULL;

	if ( ! pFnDropAggro )
		pFnDropAggro = (UFunction*) UObject::GObjObjects()->Data[ 71967 ];

	ANBotEnemy_execDropAggro_Parms DropAggro_Parms;

	this->ProcessEvent ( pFnDropAggro, &DropAggro_Parms, NULL );
};

// Function NetherGame.NBotEnemy.OnAggroEnded
// [0x00080002] 
// Parameters infos:

void ANBotEnemy::OnAggroEnded ( )
{
	static UFunction* pFnOnAggroEnded = NULL;

	if ( ! pFnOnAggroEnded )
		pFnOnAggroEnded = (UFunction*) UObject::GObjObjects()->Data[ 71966 ];

	ANBotEnemy_execOnAggroEnded_Parms OnAggroEnded_Parms;

	this->ProcessEvent ( pFnOnAggroEnded, &OnAggroEnded_Parms, NULL );
};

// Function NetherGame.NBotEnemy.InvestigateObject
// [0x00020002] 
// Parameters infos:
// class AActor*                  AggroObject                    ( CPF_Parm )

void ANBotEnemy::InvestigateObject ( class AActor* AggroObject )
{
	static UFunction* pFnInvestigateObject = NULL;

	if ( ! pFnInvestigateObject )
		pFnInvestigateObject = (UFunction*) UObject::GObjObjects()->Data[ 71947 ];

	ANBotEnemy_execInvestigateObject_Parms InvestigateObject_Parms;
	InvestigateObject_Parms.AggroObject = AggroObject;

	this->ProcessEvent ( pFnInvestigateObject, &InvestigateObject_Parms, NULL );
};

// Function NetherGame.NBotEnemy.AssignAggro
// [0x00020002] 
// Parameters infos:
// class ANetherPawn*             PlayerPawn                     ( CPF_Parm )
// unsigned char                  AggroType                      ( CPF_Parm )

void ANBotEnemy::AssignAggro ( class ANetherPawn* PlayerPawn, unsigned char AggroType )
{
	static UFunction* pFnAssignAggro = NULL;

	if ( ! pFnAssignAggro )
		pFnAssignAggro = (UFunction*) UObject::GObjObjects()->Data[ 71944 ];

	ANBotEnemy_execAssignAggro_Parms AssignAggro_Parms;
	AssignAggro_Parms.PlayerPawn = PlayerPawn;
	AssignAggro_Parms.AggroType = AggroType;

	this->ProcessEvent ( pFnAssignAggro, &AssignAggro_Parms, NULL );
};

// Function NetherGame.NBotEnemy.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   SeenPlayer                     ( CPF_Parm )

void ANBotEnemy::eventSeePlayer ( class APawn* SeenPlayer )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = (UFunction*) UObject::GObjObjects()->Data[ 71941 ];

	ANBotEnemy_eventSeePlayer_Parms SeePlayer_Parms;
	SeePlayer_Parms.SeenPlayer = SeenPlayer;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function NetherGame.NBotEnemy.HearNoise
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// class AActor*                  NoiseMaker                     ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void ANBotEnemy::eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = (UFunction*) UObject::GObjObjects()->Data[ 71934 ];

	ANBotEnemy_eventHearNoise_Parms HearNoise_Parms;
	HearNoise_Parms.Loudness = Loudness;
	HearNoise_Parms.NoiseMaker = NoiseMaker;
	memcpy ( &HearNoise_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function NetherGame.NBotEnemy.ObjectiveAllowsDespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBotEnemy::ObjectiveAllowsDespawn ( )
{
	static UFunction* pFnObjectiveAllowsDespawn = NULL;

	if ( ! pFnObjectiveAllowsDespawn )
		pFnObjectiveAllowsDespawn = (UFunction*) UObject::GObjObjects()->Data[ 71930 ];

	ANBotEnemy_execObjectiveAllowsDespawn_Parms ObjectiveAllowsDespawn_Parms;

	this->ProcessEvent ( pFnObjectiveAllowsDespawn, &ObjectiveAllowsDespawn_Parms, NULL );

	return ObjectiveAllowsDespawn_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy.NotifyStunned
// [0x00020002] 
// Parameters infos:
// float                          InStunDuration                 ( CPF_Parm )

void ANBotEnemy::NotifyStunned ( float InStunDuration )
{
	static UFunction* pFnNotifyStunned = NULL;

	if ( ! pFnNotifyStunned )
		pFnNotifyStunned = (UFunction*) UObject::GObjObjects()->Data[ 71928 ];

	ANBotEnemy_execNotifyStunned_Parms NotifyStunned_Parms;
	NotifyStunned_Parms.InStunDuration = InStunDuration;

	this->ProcessEvent ( pFnNotifyStunned, &NotifyStunned_Parms, NULL );
};

// Function NetherGame.NBotEnemy.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ANBotEnemy::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 71925 ];

	ANBotEnemy_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.IsSpawning
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANPawnEnemy::IsSpawning ( )
{
	static UFunction* pFnIsSpawning = NULL;

	if ( ! pFnIsSpawning )
		pFnIsSpawning = (UFunction*) UObject::GObjObjects()->Data[ 70737 ];

	ANPawnEnemy_execIsSpawning_Parms IsSpawning_Parms;

	this->ProcessEvent ( pFnIsSpawning, &IsSpawning_Parms, NULL );

	return IsSpawning_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.IsDespawning
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANPawnEnemy::IsDespawning ( )
{
	static UFunction* pFnIsDespawning = NULL;

	if ( ! pFnIsDespawning )
		pFnIsDespawning = (UFunction*) UObject::GObjObjects()->Data[ 70735 ];

	ANPawnEnemy_execIsDespawning_Parms IsDespawning_Parms;

	this->ProcessEvent ( pFnIsDespawning, &IsDespawning_Parms, NULL );

	return IsDespawning_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ANPawnEnemy::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 70729 ];

	ANPawnEnemy_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ANPawnEnemy::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 70726 ];

	ANPawnEnemy_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.PlayJumpingSound
// [0x00020000] 
// Parameters infos:

void ANPawnEnemy::PlayJumpingSound ( )
{
	static UFunction* pFnPlayJumpingSound = NULL;

	if ( ! pFnPlayJumpingSound )
		pFnPlayJumpingSound = (UFunction*) UObject::GObjObjects()->Data[ 70725 ];

	ANPawnEnemy_execPlayJumpingSound_Parms PlayJumpingSound_Parms;

	this->ProcessEvent ( pFnPlayJumpingSound, &PlayJumpingSound_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.PlayLandingSound
// [0x00020000] 
// Parameters infos:

void ANPawnEnemy::PlayLandingSound ( )
{
	static UFunction* pFnPlayLandingSound = NULL;

	if ( ! pFnPlayLandingSound )
		pFnPlayLandingSound = (UFunction*) UObject::GObjObjects()->Data[ 70724 ];

	ANPawnEnemy_execPlayLandingSound_Parms PlayLandingSound_Parms;

	this->ProcessEvent ( pFnPlayLandingSound, &PlayLandingSound_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANPawnEnemy::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 70722 ];

	ANPawnEnemy_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.OneOffAnim_End
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void ANPawnEnemy::OneOffAnim_End ( )
{
	static UFunction* pFnOneOffAnim_End = NULL;

	if ( ! pFnOneOffAnim_End )
		pFnOneOffAnim_End = (UFunction*) UObject::GObjObjects()->Data[ 70666 ];

	ANPawnEnemy_execOneOffAnim_End_Parms OneOffAnim_End_Parms;

	this->ProcessEvent ( pFnOneOffAnim_End, &OneOffAnim_End_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.OneOffAnim_Play
// [0x00044103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

float ANPawnEnemy::OneOffAnim_Play ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime )
{
	static UFunction* pFnOneOffAnim_Play = NULL;

	if ( ! pFnOneOffAnim_Play )
		pFnOneOffAnim_Play = (UFunction*) UObject::GObjObjects()->Data[ 70667 ];

	ANPawnEnemy_execOneOffAnim_Play_Parms OneOffAnim_Play_Parms;
	memcpy ( &OneOffAnim_Play_Parms.AnimName, &AnimName, 0x8 );
	OneOffAnim_Play_Parms.Rate = Rate;
	OneOffAnim_Play_Parms.BlendInTime = BlendInTime;
	OneOffAnim_Play_Parms.BlendOutTime = BlendOutTime;

	this->ProcessEvent ( pFnOneOffAnim_Play, &OneOffAnim_Play_Parms, NULL );

	return OneOffAnim_Play_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.EndCustomAnim
// [0x00020002] 
// Parameters infos:

void ANPawnEnemy::EndCustomAnim ( )
{
	static UFunction* pFnEndCustomAnim = NULL;

	if ( ! pFnEndCustomAnim )
		pFnEndCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 70713 ];

	ANPawnEnemy_execEndCustomAnim_Parms EndCustomAnim_Parms;

	this->ProcessEvent ( pFnEndCustomAnim, &EndCustomAnim_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.PlayCustomAnim
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InCustomAnimIndex              ( CPF_Parm )

float ANPawnEnemy::PlayCustomAnim ( int InCustomAnimIndex )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 70708 ];

	ANPawnEnemy_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	PlayCustomAnim_Parms.InCustomAnimIndex = InCustomAnimIndex;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.OnTODChanged
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewTimeOfDay                   ( CPF_Parm )

void ANPawnEnemy::OnTODChanged ( unsigned char NewTimeOfDay )
{
	static UFunction* pFnOnTODChanged = NULL;

	if ( ! pFnOnTODChanged )
		pFnOnTODChanged = (UFunction*) UObject::GObjObjects()->Data[ 70706 ];

	ANPawnEnemy_execOnTODChanged_Parms OnTODChanged_Parms;
	OnTODChanged_Parms.NewTimeOfDay = NewTimeOfDay;

	this->ProcessEvent ( pFnOnTODChanged, &OnTODChanged_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANPawnEnemy::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70701 ];

	ANPawnEnemy_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.SetLoudestSound
// [0x00020102] 
// Parameters infos:
// unsigned char                  SoundType                      ( CPF_Parm )

void ANPawnEnemy::SetLoudestSound ( unsigned char SoundType )
{
	static UFunction* pFnSetLoudestSound = NULL;

	if ( ! pFnSetLoudestSound )
		pFnSetLoudestSound = (UFunction*) UObject::GObjObjects()->Data[ 70699 ];

	ANPawnEnemy_execSetLoudestSound_Parms SetLoudestSound_Parms;
	SetLoudestSound_Parms.SoundType = SoundType;

	this->ProcessEvent ( pFnSetLoudestSound, &SetLoudestSound_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.RegisterAsNoiseMaker
// [0x00020102] 
// Parameters infos:

void ANPawnEnemy::RegisterAsNoiseMaker ( )
{
	static UFunction* pFnRegisterAsNoiseMaker = NULL;

	if ( ! pFnRegisterAsNoiseMaker )
		pFnRegisterAsNoiseMaker = (UFunction*) UObject::GObjObjects()->Data[ 70696 ];

	ANPawnEnemy_execRegisterAsNoiseMaker_Parms RegisterAsNoiseMaker_Parms;

	this->ProcessEvent ( pFnRegisterAsNoiseMaker, &RegisterAsNoiseMaker_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.BuildCustomAnimScripts
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANPawnEnemy::BuildCustomAnimScripts ( )
{
	static UFunction* pFnBuildCustomAnimScripts = NULL;

	if ( ! pFnBuildCustomAnimScripts )
		pFnBuildCustomAnimScripts = (UFunction*) UObject::GObjObjects()->Data[ 70695 ];

	ANPawnEnemy_execBuildCustomAnimScripts_Parms BuildCustomAnimScripts_Parms;

	pFnBuildCustomAnimScripts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildCustomAnimScripts, &BuildCustomAnimScripts_Parms, NULL );

	pFnBuildCustomAnimScripts->FunctionFlags |= 0x400;
};

// Function NetherGame.NPawnEnemy.AddToSwingHurtList
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  newEntry                       ( CPF_Parm )

bool ANPawnEnemy::AddToSwingHurtList ( class AActor* newEntry )
{
	static UFunction* pFnAddToSwingHurtList = NULL;

	if ( ! pFnAddToSwingHurtList )
		pFnAddToSwingHurtList = (UFunction*) UObject::GObjObjects()->Data[ 70692 ];

	ANPawnEnemy_execAddToSwingHurtList_Parms AddToSwingHurtList_Parms;
	AddToSwingHurtList_Parms.newEntry = newEntry;

	this->ProcessEvent ( pFnAddToSwingHurtList, &AddToSwingHurtList_Parms, NULL );

	return AddToSwingHurtList_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.DamagePlayerPawn_AOE
// [0x00080002] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// class UClass*                  AOEDamageType                  ( CPF_Parm )

void ANPawnEnemy::DamagePlayerPawn_AOE ( float DamageAmount, float DamageRadius, float Momentum, class UClass* AOEDamageType )
{
	static UFunction* pFnDamagePlayerPawn_AOE = NULL;

	if ( ! pFnDamagePlayerPawn_AOE )
		pFnDamagePlayerPawn_AOE = (UFunction*) UObject::GObjObjects()->Data[ 70686 ];

	ANPawnEnemy_execDamagePlayerPawn_AOE_Parms DamagePlayerPawn_AOE_Parms;
	DamagePlayerPawn_AOE_Parms.DamageAmount = DamageAmount;
	DamagePlayerPawn_AOE_Parms.DamageRadius = DamageRadius;
	DamagePlayerPawn_AOE_Parms.Momentum = Momentum;
	DamagePlayerPawn_AOE_Parms.AOEDamageType = AOEDamageType;

	this->ProcessEvent ( pFnDamagePlayerPawn_AOE, &DamagePlayerPawn_AOE_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.DamagePlayerPawn_Swipe
// [0x00880002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DamageAmount                   ( CPF_Parm )
// float                          DamageRange                    ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 Extents                        ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool ANPawnEnemy::DamagePlayerPawn_Swipe ( float DamageAmount, float DamageRange, float Momentum, struct FVector Extents, class UClass* DamageType )
{
	static UFunction* pFnDamagePlayerPawn_Swipe = NULL;

	if ( ! pFnDamagePlayerPawn_Swipe )
		pFnDamagePlayerPawn_Swipe = (UFunction*) UObject::GObjObjects()->Data[ 70674 ];

	ANPawnEnemy_execDamagePlayerPawn_Swipe_Parms DamagePlayerPawn_Swipe_Parms;
	DamagePlayerPawn_Swipe_Parms.DamageAmount = DamageAmount;
	DamagePlayerPawn_Swipe_Parms.DamageRange = DamageRange;
	DamagePlayerPawn_Swipe_Parms.Momentum = Momentum;
	memcpy ( &DamagePlayerPawn_Swipe_Parms.Extents, &Extents, 0xC );
	DamagePlayerPawn_Swipe_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDamagePlayerPawn_Swipe, &DamagePlayerPawn_Swipe_Parms, NULL );

	return DamagePlayerPawn_Swipe_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.AttemptDamagePlayer
// [0x00820002] 
// Parameters infos:
// unsigned long                  bTeleportAttack                ( CPF_Parm )

void ANPawnEnemy::AttemptDamagePlayer ( unsigned long bTeleportAttack )
{
	static UFunction* pFnAttemptDamagePlayer = NULL;

	if ( ! pFnAttemptDamagePlayer )
		pFnAttemptDamagePlayer = (UFunction*) UObject::GObjObjects()->Data[ 70668 ];

	ANPawnEnemy_execAttemptDamagePlayer_Parms AttemptDamagePlayer_Parms;
	AttemptDamagePlayer_Parms.bTeleportAttack = bTeleportAttack;

	this->ProcessEvent ( pFnAttemptDamagePlayer, &AttemptDamagePlayer_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.PlayAttackAnim
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InAttackScriptIndex            ( CPF_Parm )
// unsigned long                  bTeleportAttack                ( CPF_Parm )

float ANPawnEnemy::PlayAttackAnim ( int InAttackScriptIndex, unsigned long bTeleportAttack )
{
	static UFunction* pFnPlayAttackAnim = NULL;

	if ( ! pFnPlayAttackAnim )
		pFnPlayAttackAnim = (UFunction*) UObject::GObjObjects()->Data[ 70659 ];

	ANPawnEnemy_execPlayAttackAnim_Parms PlayAttackAnim_Parms;
	PlayAttackAnim_Parms.InAttackScriptIndex = InAttackScriptIndex;
	PlayAttackAnim_Parms.bTeleportAttack = bTeleportAttack;

	this->ProcessEvent ( pFnPlayAttackAnim, &PlayAttackAnim_Parms, NULL );

	return PlayAttackAnim_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.EndAttack
// [0x00020002] 
// Parameters infos:

void ANPawnEnemy::EndAttack ( )
{
	static UFunction* pFnEndAttack = NULL;

	if ( ! pFnEndAttack )
		pFnEndAttack = (UFunction*) UObject::GObjObjects()->Data[ 70658 ];

	ANPawnEnemy_execEndAttack_Parms EndAttack_Parms;

	this->ProcessEvent ( pFnEndAttack, &EndAttack_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.BeginAttack
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bTeleportAttack                ( CPF_Parm )
// struct FEnemyAttackScript      RandomAttack                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

float ANPawnEnemy::BeginAttack ( unsigned long bTeleportAttack, struct FEnemyAttackScript* RandomAttack )
{
	static UFunction* pFnBeginAttack = NULL;

	if ( ! pFnBeginAttack )
		pFnBeginAttack = (UFunction*) UObject::GObjObjects()->Data[ 70650 ];

	ANPawnEnemy_execBeginAttack_Parms BeginAttack_Parms;
	BeginAttack_Parms.bTeleportAttack = bTeleportAttack;

	this->ProcessEvent ( pFnBeginAttack, &BeginAttack_Parms, NULL );

	if ( RandomAttack )
		memcpy ( RandomAttack, &BeginAttack_Parms.RandomAttack, 0x40 );

	return BeginAttack_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.EndPlayerAggro
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANPawnEnemy::EndPlayerAggro ( )
{
	static UFunction* pFnEndPlayerAggro = NULL;

	if ( ! pFnEndPlayerAggro )
		pFnEndPlayerAggro = (UFunction*) UObject::GObjObjects()->Data[ 70648 ];

	ANPawnEnemy_execEndPlayerAggro_Parms EndPlayerAggro_Parms;

	this->ProcessEvent ( pFnEndPlayerAggro, &EndPlayerAggro_Parms, NULL );

	return EndPlayerAggro_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.BeginPlayerAggro
// [0x00820002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  InAggroType                    ( CPF_Parm )

float ANPawnEnemy::BeginPlayerAggro ( unsigned char InAggroType )
{
	static UFunction* pFnBeginPlayerAggro = NULL;

	if ( ! pFnBeginPlayerAggro )
		pFnBeginPlayerAggro = (UFunction*) UObject::GObjObjects()->Data[ 70639 ];

	ANPawnEnemy_execBeginPlayerAggro_Parms BeginPlayerAggro_Parms;
	BeginPlayerAggro_Parms.InAggroType = InAggroType;

	this->ProcessEvent ( pFnBeginPlayerAggro, &BeginPlayerAggro_Parms, NULL );

	return BeginPlayerAggro_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.IsAggroed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANPawnEnemy::IsAggroed ( )
{
	static UFunction* pFnIsAggroed = NULL;

	if ( ! pFnIsAggroed )
		pFnIsAggroed = (UFunction*) UObject::GObjObjects()->Data[ 70637 ];

	ANPawnEnemy_execIsAggroed_Parms IsAggroed_Parms;

	pFnIsAggroed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAggroed, &IsAggroed_Parms, NULL );

	pFnIsAggroed->FunctionFlags |= 0x400;

	return IsAggroed_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.IsHeadShot
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Const | CPF_Parm )
// float                          AdditionalScale                ( CPF_Parm )

bool ANPawnEnemy::IsHeadShot ( struct FVector HitLocation, float AdditionalScale )
{
	static UFunction* pFnIsHeadShot = NULL;

	if ( ! pFnIsHeadShot )
		pFnIsHeadShot = (UFunction*) UObject::GObjObjects()->Data[ 70631 ];

	ANPawnEnemy_execIsHeadShot_Parms IsHeadShot_Parms;
	memcpy ( &IsHeadShot_Parms.HitLocation, &HitLocation, 0xC );
	IsHeadShot_Parms.AdditionalScale = AdditionalScale;

	this->ProcessEvent ( pFnIsHeadShot, &IsHeadShot_Parms, NULL );

	return IsHeadShot_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.PlayTakeHitEffects
// [0x00820102] 
// Parameters infos:

void ANPawnEnemy::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 70614 ];

	ANPawnEnemy_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ANPawnEnemy::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 70607 ];

	ANPawnEnemy_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x28 );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ANPawnEnemy::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 70595 ];

	ANPawnEnemy_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.TurnOff
// [0x00020102] 
// Parameters infos:

void ANPawnEnemy::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 70594 ];

	ANPawnEnemy_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.TurnOn
// [0x00020102] 
// Parameters infos:

void ANPawnEnemy::TurnOn ( )
{
	static UFunction* pFnTurnOn = NULL;

	if ( ! pFnTurnOn )
		pFnTurnOn = (UFunction*) UObject::GObjObjects()->Data[ 70593 ];

	ANPawnEnemy_execTurnOn_Parms TurnOn_Parms;

	this->ProcessEvent ( pFnTurnOn, &TurnOn_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.GoToInitialPosition
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANPawnEnemy::GoToInitialPosition ( )
{
	static UFunction* pFnGoToInitialPosition = NULL;

	if ( ! pFnGoToInitialPosition )
		pFnGoToInitialPosition = (UFunction*) UObject::GObjObjects()->Data[ 70592 ];

	ANPawnEnemy_execGoToInitialPosition_Parms GoToInitialPosition_Parms;

	this->ProcessEvent ( pFnGoToInitialPosition, &GoToInitialPosition_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.InitializeDeSpawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANPawnEnemy::InitializeDeSpawn ( )
{
	static UFunction* pFnInitializeDeSpawn = NULL;

	if ( ! pFnInitializeDeSpawn )
		pFnInitializeDeSpawn = (UFunction*) UObject::GObjObjects()->Data[ 70591 ];

	ANPawnEnemy_execInitializeDeSpawn_Parms InitializeDeSpawn_Parms;

	this->ProcessEvent ( pFnInitializeDeSpawn, &InitializeDeSpawn_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.InitializeFromPool
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANPawnEnemy::InitializeFromPool ( )
{
	static UFunction* pFnInitializeFromPool = NULL;

	if ( ! pFnInitializeFromPool )
		pFnInitializeFromPool = (UFunction*) UObject::GObjObjects()->Data[ 70590 ];

	ANPawnEnemy_execInitializeFromPool_Parms InitializeFromPool_Parms;

	this->ProcessEvent ( pFnInitializeFromPool, &InitializeFromPool_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.CleanupForRecycle
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bEnemyDied                     ( CPF_Parm )

void ANPawnEnemy::CleanupForRecycle ( unsigned long bEnemyDied )
{
	static UFunction* pFnCleanupForRecycle = NULL;

	if ( ! pFnCleanupForRecycle )
		pFnCleanupForRecycle = (UFunction*) UObject::GObjObjects()->Data[ 70588 ];

	ANPawnEnemy_execCleanupForRecycle_Parms CleanupForRecycle_Parms;
	CleanupForRecycle_Parms.bEnemyDied = bEnemyDied;

	this->ProcessEvent ( pFnCleanupForRecycle, &CleanupForRecycle_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.UpdateDayNightVars
// [0x00020002] 
// Parameters infos:

void ANPawnEnemy::UpdateDayNightVars ( )
{
	static UFunction* pFnUpdateDayNightVars = NULL;

	if ( ! pFnUpdateDayNightVars )
		pFnUpdateDayNightVars = (UFunction*) UObject::GObjObjects()->Data[ 70586 ];

	ANPawnEnemy_execUpdateDayNightVars_Parms UpdateDayNightVars_Parms;

	this->ProcessEvent ( pFnUpdateDayNightVars, &UpdateDayNightVars_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.GetHealthPercentage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANPawnEnemy::GetHealthPercentage ( )
{
	static UFunction* pFnGetHealthPercentage = NULL;

	if ( ! pFnGetHealthPercentage )
		pFnGetHealthPercentage = (UFunction*) UObject::GObjObjects()->Data[ 70584 ];

	ANPawnEnemy_execGetHealthPercentage_Parms GetHealthPercentage_Parms;

	this->ProcessEvent ( pFnGetHealthPercentage, &GetHealthPercentage_Parms, NULL );

	return GetHealthPercentage_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.GetEnemyLeashTimestamp
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANPawnEnemy::GetEnemyLeashTimestamp ( )
{
	static UFunction* pFnGetEnemyLeashTimestamp = NULL;

	if ( ! pFnGetEnemyLeashTimestamp )
		pFnGetEnemyLeashTimestamp = (UFunction*) UObject::GObjObjects()->Data[ 70582 ];

	ANPawnEnemy_execGetEnemyLeashTimestamp_Parms GetEnemyLeashTimestamp_Parms;

	this->ProcessEvent ( pFnGetEnemyLeashTimestamp, &GetEnemyLeashTimestamp_Parms, NULL );

	return GetEnemyLeashTimestamp_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.SetEnemyLeashTimestamp
// [0x00020002] 
// Parameters infos:
// float                          Time                           ( CPF_Parm )

void ANPawnEnemy::SetEnemyLeashTimestamp ( float Time )
{
	static UFunction* pFnSetEnemyLeashTimestamp = NULL;

	if ( ! pFnSetEnemyLeashTimestamp )
		pFnSetEnemyLeashTimestamp = (UFunction*) UObject::GObjObjects()->Data[ 70580 ];

	ANPawnEnemy_execSetEnemyLeashTimestamp_Parms SetEnemyLeashTimestamp_Parms;
	SetEnemyLeashTimestamp_Parms.Time = Time;

	this->ProcessEvent ( pFnSetEnemyLeashTimestamp, &SetEnemyLeashTimestamp_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.SetInitialPosition
// [0x00020002] 
// Parameters infos:
// struct FVector                 InInitialPosition              ( CPF_Parm )

void ANPawnEnemy::SetInitialPosition ( struct FVector InInitialPosition )
{
	static UFunction* pFnSetInitialPosition = NULL;

	if ( ! pFnSetInitialPosition )
		pFnSetInitialPosition = (UFunction*) UObject::GObjObjects()->Data[ 70578 ];

	ANPawnEnemy_execSetInitialPosition_Parms SetInitialPosition_Parms;
	memcpy ( &SetInitialPosition_Parms.InInitialPosition, &InInitialPosition, 0xC );

	this->ProcessEvent ( pFnSetInitialPosition, &SetInitialPosition_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.SetCharacterClassFromInfo
// [0x00020102] 
// Parameters infos:
// class UClass*                  Info                           ( CPF_Parm )

void ANPawnEnemy::SetCharacterClassFromInfo ( class UClass* Info )
{
	static UFunction* pFnSetCharacterClassFromInfo = NULL;

	if ( ! pFnSetCharacterClassFromInfo )
		pFnSetCharacterClassFromInfo = (UFunction*) UObject::GObjObjects()->Data[ 70575 ];

	ANPawnEnemy_execSetCharacterClassFromInfo_Parms SetCharacterClassFromInfo_Parms;
	SetCharacterClassFromInfo_Parms.Info = Info;

	this->ProcessEvent ( pFnSetCharacterClassFromInfo, &SetCharacterClassFromInfo_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ANPawnEnemy::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 70573 ];

	ANPawnEnemy_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.ToggleAggroDisplay
// [0x00024002] 
// Parameters infos:
// unsigned long                  bEnableSight                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bEnableSound                   ( CPF_OptionalParm | CPF_Parm )

void ANPawnEnemy::ToggleAggroDisplay ( unsigned long bEnableSight, unsigned long bEnableSound )
{
	static UFunction* pFnToggleAggroDisplay = NULL;

	if ( ! pFnToggleAggroDisplay )
		pFnToggleAggroDisplay = (UFunction*) UObject::GObjObjects()->Data[ 70561 ];

	ANPawnEnemy_execToggleAggroDisplay_Parms ToggleAggroDisplay_Parms;
	ToggleAggroDisplay_Parms.bEnableSight = bEnableSight;
	ToggleAggroDisplay_Parms.bEnableSound = bEnableSound;

	this->ProcessEvent ( pFnToggleAggroDisplay, &ToggleAggroDisplay_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.CreateAggroComponent
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UDrawCylinderComponent*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// float                          InnerRadius                    ( CPF_Parm )
// float                          OuterRadius                    ( CPF_Parm )
// struct FColor                  InColor                        ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

class UDrawCylinderComponent* ANPawnEnemy::CreateAggroComponent ( float InnerRadius, float OuterRadius, struct FColor InColor, float Height, float HeightOffset )
{
	static UFunction* pFnCreateAggroComponent = NULL;

	if ( ! pFnCreateAggroComponent )
		pFnCreateAggroComponent = (UFunction*) UObject::GObjObjects()->Data[ 70553 ];

	ANPawnEnemy_execCreateAggroComponent_Parms CreateAggroComponent_Parms;
	CreateAggroComponent_Parms.InnerRadius = InnerRadius;
	CreateAggroComponent_Parms.OuterRadius = OuterRadius;
	memcpy ( &CreateAggroComponent_Parms.InColor, &InColor, 0x4 );
	CreateAggroComponent_Parms.Height = Height;
	CreateAggroComponent_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnCreateAggroComponent, &CreateAggroComponent_Parms, NULL );

	return CreateAggroComponent_Parms.ReturnValue;
};

// Function NetherGame.NPawnEnemy.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANPawnEnemy::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 70552 ];

	ANPawnEnemy_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.OnDeathNotifyEvent
// [0x00120000] 
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANPawnEnemy::OnDeathNotifyEvent ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnOnDeathNotifyEvent = NULL;

	if ( ! pFnOnDeathNotifyEvent )
		pFnOnDeathNotifyEvent = (UFunction*) UObject::GObjObjects()->Data[ 70501 ];

	ANPawnEnemy_execOnDeathNotifyEvent_Parms OnDeathNotifyEvent_Parms;
	OnDeathNotifyEvent_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnOnDeathNotifyEvent, &OnDeathNotifyEvent_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.OnRecycled
// [0x00120000] 
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// unsigned long                  bEnemyDied                     ( CPF_Parm )

void ANPawnEnemy::OnRecycled ( class ANPawnEnemy* Enemy, unsigned long bEnemyDied )
{
	static UFunction* pFnOnRecycled = NULL;

	if ( ! pFnOnRecycled )
		pFnOnRecycled = (UFunction*) UObject::GObjObjects()->Data[ 70503 ];

	ANPawnEnemy_execOnRecycled_Parms OnRecycled_Parms;
	OnRecycled_Parms.Enemy = Enemy;
	OnRecycled_Parms.bEnemyDied = bEnemyDied;

	this->ProcessEvent ( pFnOnRecycled, &OnRecycled_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.OnDied
// [0x00120000] 
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// class ANetherPawn*             Killer                         ( CPF_Parm )

void ANPawnEnemy::OnDied ( class ANPawnEnemy* Enemy, class ANetherPawn* Killer )
{
	static UFunction* pFnOnDied = NULL;

	if ( ! pFnOnDied )
		pFnOnDied = (UFunction*) UObject::GObjObjects()->Data[ 70505 ];

	ANPawnEnemy_execOnDied_Parms OnDied_Parms;
	OnDied_Parms.Enemy = Enemy;
	OnDied_Parms.Killer = Killer;

	this->ProcessEvent ( pFnOnDied, &OnDied_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.OnDeSpawnAnimEnded
// [0x00120000] 
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANPawnEnemy::OnDeSpawnAnimEnded ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnOnDeSpawnAnimEnded = NULL;

	if ( ! pFnOnDeSpawnAnimEnded )
		pFnOnDeSpawnAnimEnded = (UFunction*) UObject::GObjObjects()->Data[ 70507 ];

	ANPawnEnemy_execOnDeSpawnAnimEnded_Parms OnDeSpawnAnimEnded_Parms;
	OnDeSpawnAnimEnded_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnOnDeSpawnAnimEnded, &OnDeSpawnAnimEnded_Parms, NULL );
};

// Function NetherGame.NPawnEnemy.OnDeathAnimEnded
// [0x00120000] 
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANPawnEnemy::OnDeathAnimEnded ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnOnDeathAnimEnded = NULL;

	if ( ! pFnOnDeathAnimEnded )
		pFnOnDeathAnimEnded = (UFunction*) UObject::GObjObjects()->Data[ 70509 ];

	ANPawnEnemy_execOnDeathAnimEnded_Parms OnDeathAnimEnded_Parms;
	OnDeathAnimEnded_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnOnDeathAnimEnded, &OnDeathAnimEnded_Parms, NULL );
};

// Function NetherGame.TeleporterPawn.GetMaxJumpForwardOffset
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetMaxJumpForwardOffset ( )
{
	static UFunction* pFnGetMaxJumpForwardOffset = NULL;

	if ( ! pFnGetMaxJumpForwardOffset )
		pFnGetMaxJumpForwardOffset = (UFunction*) UObject::GObjObjects()->Data[ 70878 ];

	ATeleporterPawn_execGetMaxJumpForwardOffset_Parms GetMaxJumpForwardOffset_Parms;

	this->ProcessEvent ( pFnGetMaxJumpForwardOffset, &GetMaxJumpForwardOffset_Parms, NULL );

	return GetMaxJumpForwardOffset_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetAttackedMaxJumpToOffsetMax
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetAttackedMaxJumpToOffsetMax ( )
{
	static UFunction* pFnGetAttackedMaxJumpToOffsetMax = NULL;

	if ( ! pFnGetAttackedMaxJumpToOffsetMax )
		pFnGetAttackedMaxJumpToOffsetMax = (UFunction*) UObject::GObjObjects()->Data[ 70876 ];

	ATeleporterPawn_execGetAttackedMaxJumpToOffsetMax_Parms GetAttackedMaxJumpToOffsetMax_Parms;

	this->ProcessEvent ( pFnGetAttackedMaxJumpToOffsetMax, &GetAttackedMaxJumpToOffsetMax_Parms, NULL );

	return GetAttackedMaxJumpToOffsetMax_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetAttackedMaxJumpToOffsetMin
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetAttackedMaxJumpToOffsetMin ( )
{
	static UFunction* pFnGetAttackedMaxJumpToOffsetMin = NULL;

	if ( ! pFnGetAttackedMaxJumpToOffsetMin )
		pFnGetAttackedMaxJumpToOffsetMin = (UFunction*) UObject::GObjObjects()->Data[ 70874 ];

	ATeleporterPawn_execGetAttackedMaxJumpToOffsetMin_Parms GetAttackedMaxJumpToOffsetMin_Parms;

	this->ProcessEvent ( pFnGetAttackedMaxJumpToOffsetMin, &GetAttackedMaxJumpToOffsetMin_Parms, NULL );

	return GetAttackedMaxJumpToOffsetMin_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetMaxJumpToOffset
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetMaxJumpToOffset ( )
{
	static UFunction* pFnGetMaxJumpToOffset = NULL;

	if ( ! pFnGetMaxJumpToOffset )
		pFnGetMaxJumpToOffset = (UFunction*) UObject::GObjObjects()->Data[ 70872 ];

	ATeleporterPawn_execGetMaxJumpToOffset_Parms GetMaxJumpToOffset_Parms;

	this->ProcessEvent ( pFnGetMaxJumpToOffset, &GetMaxJumpToOffset_Parms, NULL );

	return GetMaxJumpToOffset_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetMinJumpToOffset
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetMinJumpToOffset ( )
{
	static UFunction* pFnGetMinJumpToOffset = NULL;

	if ( ! pFnGetMinJumpToOffset )
		pFnGetMinJumpToOffset = (UFunction*) UObject::GObjObjects()->Data[ 70870 ];

	ATeleporterPawn_execGetMinJumpToOffset_Parms GetMinJumpToOffset_Parms;

	this->ProcessEvent ( pFnGetMinJumpToOffset, &GetMinJumpToOffset_Parms, NULL );

	return GetMinJumpToOffset_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetMaxRunningThreshold
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetMaxRunningThreshold ( )
{
	static UFunction* pFnGetMaxRunningThreshold = NULL;

	if ( ! pFnGetMaxRunningThreshold )
		pFnGetMaxRunningThreshold = (UFunction*) UObject::GObjObjects()->Data[ 70868 ];

	ATeleporterPawn_execGetMaxRunningThreshold_Parms GetMaxRunningThreshold_Parms;

	this->ProcessEvent ( pFnGetMaxRunningThreshold, &GetMaxRunningThreshold_Parms, NULL );

	return GetMaxRunningThreshold_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetMaxDistancePerTeleport
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetMaxDistancePerTeleport ( )
{
	static UFunction* pFnGetMaxDistancePerTeleport = NULL;

	if ( ! pFnGetMaxDistancePerTeleport )
		pFnGetMaxDistancePerTeleport = (UFunction*) UObject::GObjObjects()->Data[ 70866 ];

	ATeleporterPawn_execGetMaxDistancePerTeleport_Parms GetMaxDistancePerTeleport_Parms;

	this->ProcessEvent ( pFnGetMaxDistancePerTeleport, &GetMaxDistancePerTeleport_Parms, NULL );

	return GetMaxDistancePerTeleport_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetMinDistancePerTeleport
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetMinDistancePerTeleport ( )
{
	static UFunction* pFnGetMinDistancePerTeleport = NULL;

	if ( ! pFnGetMinDistancePerTeleport )
		pFnGetMinDistancePerTeleport = (UFunction*) UObject::GObjObjects()->Data[ 70864 ];

	ATeleporterPawn_execGetMinDistancePerTeleport_Parms GetMinDistancePerTeleport_Parms;

	this->ProcessEvent ( pFnGetMinDistancePerTeleport, &GetMinDistancePerTeleport_Parms, NULL );

	return GetMinDistancePerTeleport_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetTeleportAttackRespawnMax
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetTeleportAttackRespawnMax ( )
{
	static UFunction* pFnGetTeleportAttackRespawnMax = NULL;

	if ( ! pFnGetTeleportAttackRespawnMax )
		pFnGetTeleportAttackRespawnMax = (UFunction*) UObject::GObjObjects()->Data[ 70862 ];

	ATeleporterPawn_execGetTeleportAttackRespawnMax_Parms GetTeleportAttackRespawnMax_Parms;

	this->ProcessEvent ( pFnGetTeleportAttackRespawnMax, &GetTeleportAttackRespawnMax_Parms, NULL );

	return GetTeleportAttackRespawnMax_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetTeleportAttackRespawnMin
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetTeleportAttackRespawnMin ( )
{
	static UFunction* pFnGetTeleportAttackRespawnMin = NULL;

	if ( ! pFnGetTeleportAttackRespawnMin )
		pFnGetTeleportAttackRespawnMin = (UFunction*) UObject::GObjObjects()->Data[ 70860 ];

	ATeleporterPawn_execGetTeleportAttackRespawnMin_Parms GetTeleportAttackRespawnMin_Parms;

	this->ProcessEvent ( pFnGetTeleportAttackRespawnMin, &GetTeleportAttackRespawnMin_Parms, NULL );

	return GetTeleportAttackRespawnMin_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetTeleportRespawnMax
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetTeleportRespawnMax ( )
{
	static UFunction* pFnGetTeleportRespawnMax = NULL;

	if ( ! pFnGetTeleportRespawnMax )
		pFnGetTeleportRespawnMax = (UFunction*) UObject::GObjObjects()->Data[ 70858 ];

	ATeleporterPawn_execGetTeleportRespawnMax_Parms GetTeleportRespawnMax_Parms;

	this->ProcessEvent ( pFnGetTeleportRespawnMax, &GetTeleportRespawnMax_Parms, NULL );

	return GetTeleportRespawnMax_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetTeleportRespawnMin
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetTeleportRespawnMin ( )
{
	static UFunction* pFnGetTeleportRespawnMin = NULL;

	if ( ! pFnGetTeleportRespawnMin )
		pFnGetTeleportRespawnMin = (UFunction*) UObject::GObjObjects()->Data[ 70856 ];

	ATeleporterPawn_execGetTeleportRespawnMin_Parms GetTeleportRespawnMin_Parms;

	this->ProcessEvent ( pFnGetTeleportRespawnMin, &GetTeleportRespawnMin_Parms, NULL );

	return GetTeleportRespawnMin_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetTimeBeforeTeleMax
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetTimeBeforeTeleMax ( )
{
	static UFunction* pFnGetTimeBeforeTeleMax = NULL;

	if ( ! pFnGetTimeBeforeTeleMax )
		pFnGetTimeBeforeTeleMax = (UFunction*) UObject::GObjObjects()->Data[ 70854 ];

	ATeleporterPawn_execGetTimeBeforeTeleMax_Parms GetTimeBeforeTeleMax_Parms;

	this->ProcessEvent ( pFnGetTimeBeforeTeleMax, &GetTimeBeforeTeleMax_Parms, NULL );

	return GetTimeBeforeTeleMax_Parms.ReturnValue;
};

// Function NetherGame.TeleporterPawn.GetTimeBeforeTeleMin
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATeleporterPawn::GetTimeBeforeTeleMin ( )
{
	static UFunction* pFnGetTimeBeforeTeleMin = NULL;

	if ( ! pFnGetTimeBeforeTeleMin )
		pFnGetTimeBeforeTeleMin = (UFunction*) UObject::GObjObjects()->Data[ 70852 ];

	ATeleporterPawn_execGetTimeBeforeTeleMin_Parms GetTimeBeforeTeleMin_Parms;

	this->ProcessEvent ( pFnGetTimeBeforeTeleMin, &GetTimeBeforeTeleMin_Parms, NULL );

	return GetTimeBeforeTeleMin_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.DebugWin
// [0x00020000] 
// Parameters infos:

void ANetherObjective::DebugWin ( )
{
	static UFunction* pFnDebugWin = NULL;

	if ( ! pFnDebugWin )
		pFnDebugWin = (UFunction*) UObject::GObjObjects()->Data[ 77066 ];

	ANetherObjective_execDebugWin_Parms DebugWin_Parms;

	this->ProcessEvent ( pFnDebugWin, &DebugWin_Parms, NULL );
};

// Function NetherGame.NetherObjective.UnTouched
// [0x00020000] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherObjective::UnTouched ( class AActor* Other )
{
	static UFunction* pFnUnTouched = NULL;

	if ( ! pFnUnTouched )
		pFnUnTouched = (UFunction*) UObject::GObjObjects()->Data[ 77064 ];

	ANetherObjective_execUnTouched_Parms UnTouched_Parms;
	UnTouched_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouched, &UnTouched_Parms, NULL );
};

// Function NetherGame.NetherObjective.GetPercentCompleteString
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherObjective::GetPercentCompleteString ( )
{
	static UFunction* pFnGetPercentCompleteString = NULL;

	if ( ! pFnGetPercentCompleteString )
		pFnGetPercentCompleteString = (UFunction*) UObject::GObjObjects()->Data[ 70208 ];

	ANetherObjective_execGetPercentCompleteString_Parms GetPercentCompleteString_Parms;

	this->ProcessEvent ( pFnGetPercentCompleteString, &GetPercentCompleteString_Parms, NULL );

	return GetPercentCompleteString_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.GetObjectiveDescription
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherObjective::GetObjectiveDescription ( )
{
	static UFunction* pFnGetObjectiveDescription = NULL;

	if ( ! pFnGetObjectiveDescription )
		pFnGetObjectiveDescription = (UFunction*) UObject::GObjObjects()->Data[ 70201 ];

	ANetherObjective_execGetObjectiveDescription_Parms GetObjectiveDescription_Parms;

	this->ProcessEvent ( pFnGetObjectiveDescription, &GetObjectiveDescription_Parms, NULL );

	return GetObjectiveDescription_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.IsLost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherObjective::IsLost ( )
{
	static UFunction* pFnIsLost = NULL;

	if ( ! pFnIsLost )
		pFnIsLost = (UFunction*) UObject::GObjObjects()->Data[ 77062 ];

	ANetherObjective_execIsLost_Parms IsLost_Parms;

	this->ProcessEvent ( pFnIsLost, &IsLost_Parms, NULL );

	return IsLost_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.IsInCooldown
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherObjective::IsInCooldown ( )
{
	static UFunction* pFnIsInCooldown = NULL;

	if ( ! pFnIsInCooldown )
		pFnIsInCooldown = (UFunction*) UObject::GObjObjects()->Data[ 77060 ];

	ANetherObjective_execIsInCooldown_Parms IsInCooldown_Parms;

	this->ProcessEvent ( pFnIsInCooldown, &IsInCooldown_Parms, NULL );

	return IsInCooldown_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.CanBeActivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherObjective::eventCanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = (UFunction*) UObject::GObjObjects()->Data[ 77058 ];

	ANetherObjective_eventCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );

	return CanBeActivated_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.IsActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherObjective::eventIsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 71932 ];

	ANetherObjective_eventIsActive_Parms IsActive_Parms;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	return IsActive_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.GetRandomPossibleVolume
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// class ANetherTerritoryVolume*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherTerritoryVolume* ANetherObjective::GetRandomPossibleVolume ( )
{
	static UFunction* pFnGetRandomPossibleVolume = NULL;

	if ( ! pFnGetRandomPossibleVolume )
		pFnGetRandomPossibleVolume = (UFunction*) UObject::GObjObjects()->Data[ 77056 ];

	ANetherObjective_execGetRandomPossibleVolume_Parms GetRandomPossibleVolume_Parms;

	this->ProcessEvent ( pFnGetRandomPossibleVolume, &GetRandomPossibleVolume_Parms, NULL );

	return GetRandomPossibleVolume_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.OnObjectiveLost
// [0x00080000] 
// Parameters infos:

void ANetherObjective::OnObjectiveLost ( )
{
	static UFunction* pFnOnObjectiveLost = NULL;

	if ( ! pFnOnObjectiveLost )
		pFnOnObjectiveLost = (UFunction*) UObject::GObjObjects()->Data[ 77055 ];

	ANetherObjective_execOnObjectiveLost_Parms OnObjectiveLost_Parms;

	this->ProcessEvent ( pFnOnObjectiveLost, &OnObjectiveLost_Parms, NULL );
};

// Function NetherGame.NetherObjective.OnObjectiveWon
// [0x00080002] 
// Parameters infos:

void ANetherObjective::OnObjectiveWon ( )
{
	static UFunction* pFnOnObjectiveWon = NULL;

	if ( ! pFnOnObjectiveWon )
		pFnOnObjectiveWon = (UFunction*) UObject::GObjObjects()->Data[ 77050 ];

	ANetherObjective_execOnObjectiveWon_Parms OnObjectiveWon_Parms;

	this->ProcessEvent ( pFnOnObjectiveWon, &OnObjectiveWon_Parms, NULL );
};

// Function NetherGame.NetherObjective.OnObjectiveEnded
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasCompleted                  ( CPF_Parm )

void ANetherObjective::OnObjectiveEnded ( unsigned long bWasCompleted )
{
	static UFunction* pFnOnObjectiveEnded = NULL;

	if ( ! pFnOnObjectiveEnded )
		pFnOnObjectiveEnded = (UFunction*) UObject::GObjObjects()->Data[ 77046 ];

	ANetherObjective_execOnObjectiveEnded_Parms OnObjectiveEnded_Parms;
	OnObjectiveEnded_Parms.bWasCompleted = bWasCompleted;

	this->ProcessEvent ( pFnOnObjectiveEnded, &OnObjectiveEnded_Parms, NULL );
};

// Function NetherGame.NetherObjective.TryActivate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherObjective::TryActivate ( )
{
	static UFunction* pFnTryActivate = NULL;

	if ( ! pFnTryActivate )
		pFnTryActivate = (UFunction*) UObject::GObjObjects()->Data[ 77044 ];

	ANetherObjective_execTryActivate_Parms TryActivate_Parms;

	this->ProcessEvent ( pFnTryActivate, &TryActivate_Parms, NULL );

	return TryActivate_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.Activate
// [0x00020002] 
// Parameters infos:

void ANetherObjective::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 77043 ];

	ANetherObjective_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function NetherGame.NetherObjective.PostMessageForPlayersInVol
// [0x010201C2] 
// Parameters infos:
// struct FString                 MessageContents                ( CPF_Parm | CPF_NeedCtorLink )

void ANetherObjective::PostMessageForPlayersInVol ( struct FString MessageContents )
{
	static UFunction* pFnPostMessageForPlayersInVol = NULL;

	if ( ! pFnPostMessageForPlayersInVol )
		pFnPostMessageForPlayersInVol = (UFunction*) UObject::GObjObjects()->Data[ 77037 ];

	ANetherObjective_execPostMessageForPlayersInVol_Parms PostMessageForPlayersInVol_Parms;
	memcpy ( &PostMessageForPlayersInVol_Parms.MessageContents, &MessageContents, 0x10 );

	this->ProcessEvent ( pFnPostMessageForPlayersInVol, &PostMessageForPlayersInVol_Parms, NULL );
};

// Function NetherGame.NetherObjective.UpdateHeadersForPlayersInVol
// [0x010201C2] 
// Parameters infos:
// struct FString                 HeaderContents                 ( CPF_Parm | CPF_NeedCtorLink )

void ANetherObjective::UpdateHeadersForPlayersInVol ( struct FString HeaderContents )
{
	static UFunction* pFnUpdateHeadersForPlayersInVol = NULL;

	if ( ! pFnUpdateHeadersForPlayersInVol )
		pFnUpdateHeadersForPlayersInVol = (UFunction*) UObject::GObjObjects()->Data[ 77029 ];

	ANetherObjective_execUpdateHeadersForPlayersInVol_Parms UpdateHeadersForPlayersInVol_Parms;
	memcpy ( &UpdateHeadersForPlayersInVol_Parms.HeaderContents, &HeaderContents, 0x10 );

	this->ProcessEvent ( pFnUpdateHeadersForPlayersInVol, &UpdateHeadersForPlayersInVol_Parms, NULL );
};

// Function NetherGame.NetherObjective.FormatSeconds
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          TotalSeconds                   ( CPF_Parm )

struct FString ANetherObjective::FormatSeconds ( float TotalSeconds )
{
	static UFunction* pFnFormatSeconds = NULL;

	if ( ! pFnFormatSeconds )
		pFnFormatSeconds = (UFunction*) UObject::GObjObjects()->Data[ 77022 ];

	ANetherObjective_execFormatSeconds_Parms FormatSeconds_Parms;
	FormatSeconds_Parms.TotalSeconds = TotalSeconds;

	this->ProcessEvent ( pFnFormatSeconds, &FormatSeconds_Parms, NULL );

	return FormatSeconds_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective.InitObjective
// [0x00020002] 
// Parameters infos:

void ANetherObjective::InitObjective ( )
{
	static UFunction* pFnInitObjective = NULL;

	if ( ! pFnInitObjective )
		pFnInitObjective = (UFunction*) UObject::GObjObjects()->Data[ 77018 ];

	ANetherObjective_execInitObjective_Parms InitObjective_Parms;

	this->ProcessEvent ( pFnInitObjective, &InitObjective_Parms, NULL );
};

// Function NetherGame.NetherPawn.CanAccessMarket
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::CanAccessMarket ( )
{
	static UFunction* pFnCanAccessMarket = NULL;

	if ( ! pFnCanAccessMarket )
		pFnCanAccessMarket = (UFunction*) UObject::GObjObjects()->Data[ 75171 ];

	ANetherPawn_execCanAccessMarket_Parms CanAccessMarket_Parms;

	this->ProcessEvent ( pFnCanAccessMarket, &CanAccessMarket_Parms, NULL );

	return CanAccessMarket_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.CanAccessGlobalInventory
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::CanAccessGlobalInventory ( )
{
	static UFunction* pFnCanAccessGlobalInventory = NULL;

	if ( ! pFnCanAccessGlobalInventory )
		pFnCanAccessGlobalInventory = (UFunction*) UObject::GObjObjects()->Data[ 75935 ];

	ANetherPawn_execCanAccessGlobalInventory_Parms CanAccessGlobalInventory_Parms;

	this->ProcessEvent ( pFnCanAccessGlobalInventory, &CanAccessGlobalInventory_Parms, NULL );

	return CanAccessGlobalInventory_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsInSafeZone
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsInSafeZone ( )
{
	static UFunction* pFnIsInSafeZone = NULL;

	if ( ! pFnIsInSafeZone )
		pFnIsInSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 70704 ];

	ANetherPawn_execIsInSafeZone_Parms IsInSafeZone_Parms;

	pFnIsInSafeZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInSafeZone, &IsInSafeZone_Parms, NULL );

	pFnIsInSafeZone->FunctionFlags |= 0x400;

	return IsInSafeZone_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.ExitedMarketZone
// [0x00020002] 
// Parameters infos:

void ANetherPawn::ExitedMarketZone ( )
{
	static UFunction* pFnExitedMarketZone = NULL;

	if ( ! pFnExitedMarketZone )
		pFnExitedMarketZone = (UFunction*) UObject::GObjObjects()->Data[ 78023 ];

	ANetherPawn_execExitedMarketZone_Parms ExitedMarketZone_Parms;

	this->ProcessEvent ( pFnExitedMarketZone, &ExitedMarketZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.EnteredMarketZone
// [0x00020002] 
// Parameters infos:

void ANetherPawn::EnteredMarketZone ( )
{
	static UFunction* pFnEnteredMarketZone = NULL;

	if ( ! pFnEnteredMarketZone )
		pFnEnteredMarketZone = (UFunction*) UObject::GObjObjects()->Data[ 78022 ];

	ANetherPawn_execEnteredMarketZone_Parms EnteredMarketZone_Parms;

	this->ProcessEvent ( pFnEnteredMarketZone, &EnteredMarketZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.ExitedGlobalInventoryZone
// [0x00020002] 
// Parameters infos:

void ANetherPawn::ExitedGlobalInventoryZone ( )
{
	static UFunction* pFnExitedGlobalInventoryZone = NULL;

	if ( ! pFnExitedGlobalInventoryZone )
		pFnExitedGlobalInventoryZone = (UFunction*) UObject::GObjObjects()->Data[ 78021 ];

	ANetherPawn_execExitedGlobalInventoryZone_Parms ExitedGlobalInventoryZone_Parms;

	this->ProcessEvent ( pFnExitedGlobalInventoryZone, &ExitedGlobalInventoryZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.EnteredGlobalInventoryZone
// [0x00020002] 
// Parameters infos:

void ANetherPawn::EnteredGlobalInventoryZone ( )
{
	static UFunction* pFnEnteredGlobalInventoryZone = NULL;

	if ( ! pFnEnteredGlobalInventoryZone )
		pFnEnteredGlobalInventoryZone = (UFunction*) UObject::GObjObjects()->Data[ 78020 ];

	ANetherPawn_execEnteredGlobalInventoryZone_Parms EnteredGlobalInventoryZone_Parms;

	this->ProcessEvent ( pFnEnteredGlobalInventoryZone, &EnteredGlobalInventoryZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.InSubwayTransition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::eventInSubwayTransition ( )
{
	static UFunction* pFnInSubwayTransition = NULL;

	if ( ! pFnInSubwayTransition )
		pFnInSubwayTransition = (UFunction*) UObject::GObjObjects()->Data[ 78018 ];

	ANetherPawn_eventInSubwayTransition_Parms InSubwayTransition_Parms;

	this->ProcessEvent ( pFnInSubwayTransition, &InSubwayTransition_Parms, NULL );

	return InSubwayTransition_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.ExitedSubwayTransition
// [0x00020002] 
// Parameters infos:

void ANetherPawn::ExitedSubwayTransition ( )
{
	static UFunction* pFnExitedSubwayTransition = NULL;

	if ( ! pFnExitedSubwayTransition )
		pFnExitedSubwayTransition = (UFunction*) UObject::GObjObjects()->Data[ 78017 ];

	ANetherPawn_execExitedSubwayTransition_Parms ExitedSubwayTransition_Parms;

	this->ProcessEvent ( pFnExitedSubwayTransition, &ExitedSubwayTransition_Parms, NULL );
};

// Function NetherGame.NetherPawn.EnteredSubwayTransition
// [0x00020002] 
// Parameters infos:

void ANetherPawn::EnteredSubwayTransition ( )
{
	static UFunction* pFnEnteredSubwayTransition = NULL;

	if ( ! pFnEnteredSubwayTransition )
		pFnEnteredSubwayTransition = (UFunction*) UObject::GObjObjects()->Data[ 78016 ];

	ANetherPawn_execEnteredSubwayTransition_Parms EnteredSubwayTransition_Parms;

	this->ProcessEvent ( pFnEnteredSubwayTransition, &EnteredSubwayTransition_Parms, NULL );
};

// Function NetherGame.NetherPawn.InSubway
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::eventInSubway ( )
{
	static UFunction* pFnInSubway = NULL;

	if ( ! pFnInSubway )
		pFnInSubway = (UFunction*) UObject::GObjObjects()->Data[ 78014 ];

	ANetherPawn_eventInSubway_Parms InSubway_Parms;

	this->ProcessEvent ( pFnInSubway, &InSubway_Parms, NULL );

	return InSubway_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.ExitedSubway
// [0x00020002] 
// Parameters infos:

void ANetherPawn::ExitedSubway ( )
{
	static UFunction* pFnExitedSubway = NULL;

	if ( ! pFnExitedSubway )
		pFnExitedSubway = (UFunction*) UObject::GObjObjects()->Data[ 78013 ];

	ANetherPawn_execExitedSubway_Parms ExitedSubway_Parms;

	this->ProcessEvent ( pFnExitedSubway, &ExitedSubway_Parms, NULL );
};

// Function NetherGame.NetherPawn.EnteredSubway
// [0x00020002] 
// Parameters infos:

void ANetherPawn::EnteredSubway ( )
{
	static UFunction* pFnEnteredSubway = NULL;

	if ( ! pFnEnteredSubway )
		pFnEnteredSubway = (UFunction*) UObject::GObjObjects()->Data[ 78012 ];

	ANetherPawn_execEnteredSubway_Parms EnteredSubway_Parms;

	this->ProcessEvent ( pFnEnteredSubway, &EnteredSubway_Parms, NULL );
};

// Function NetherGame.NetherPawn.ExitedSafeZone
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsStartingObjective           ( CPF_Parm )

void ANetherPawn::ExitedSafeZone ( unsigned long bIsStartingObjective )
{
	static UFunction* pFnExitedSafeZone = NULL;

	if ( ! pFnExitedSafeZone )
		pFnExitedSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78010 ];

	ANetherPawn_execExitedSafeZone_Parms ExitedSafeZone_Parms;
	ExitedSafeZone_Parms.bIsStartingObjective = bIsStartingObjective;

	this->ProcessEvent ( pFnExitedSafeZone, &ExitedSafeZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.ClientExitedSafeZone
// [0x010201C2] 
// Parameters infos:

void ANetherPawn::ClientExitedSafeZone ( )
{
	static UFunction* pFnClientExitedSafeZone = NULL;

	if ( ! pFnClientExitedSafeZone )
		pFnClientExitedSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78009 ];

	ANetherPawn_execClientExitedSafeZone_Parms ClientExitedSafeZone_Parms;

	this->ProcessEvent ( pFnClientExitedSafeZone, &ClientExitedSafeZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.ClientEnteredSafeZone
// [0x010201C2] 
// Parameters infos:

void ANetherPawn::ClientEnteredSafeZone ( )
{
	static UFunction* pFnClientEnteredSafeZone = NULL;

	if ( ! pFnClientEnteredSafeZone )
		pFnClientEnteredSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78008 ];

	ANetherPawn_execClientEnteredSafeZone_Parms ClientEnteredSafeZone_Parms;

	this->ProcessEvent ( pFnClientEnteredSafeZone, &ClientEnteredSafeZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.EnteredSafeZone
// [0x00020002] 
// Parameters infos:

void ANetherPawn::EnteredSafeZone ( )
{
	static UFunction* pFnEnteredSafeZone = NULL;

	if ( ! pFnEnteredSafeZone )
		pFnEnteredSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 78007 ];

	ANetherPawn_execEnteredSafeZone_Parms EnteredSafeZone_Parms;

	this->ProcessEvent ( pFnEnteredSafeZone, &EnteredSafeZone_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ANetherPawn::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 77992 ];

	ANetherPawn_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayDyingSound
// [0x00020000] 
// Parameters infos:

void ANetherPawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 77991 ];

	ANetherPawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.DoDoubleJump
// [0x00020000] 
// Parameters infos:
// unsigned long                  bUpdating                      ( CPF_Parm )

void ANetherPawn::DoDoubleJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoDoubleJump = NULL;

	if ( ! pFnDoDoubleJump )
		pFnDoDoubleJump = (UFunction*) UObject::GObjObjects()->Data[ 77989 ];

	ANetherPawn_execDoDoubleJump_Parms DoDoubleJump_Parms;
	DoDoubleJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoDoubleJump, &DoDoubleJump_Parms, NULL );
};

// Function NetherGame.NetherPawn.ServerSetDodgeType
// [0x00240043] ( FUNC_Final )
// Parameters infos:
// unsigned char                  InDodgeType                    ( CPF_Parm )

void ANetherPawn::ServerSetDodgeType ( unsigned char InDodgeType )
{
	static UFunction* pFnServerSetDodgeType = NULL;

	if ( ! pFnServerSetDodgeType )
		pFnServerSetDodgeType = (UFunction*) UObject::GObjObjects()->Data[ 77984 ];

	ANetherPawn_execServerSetDodgeType_Parms ServerSetDodgeType_Parms;
	ServerSetDodgeType_Parms.InDodgeType = InDodgeType;

	this->ProcessEvent ( pFnServerSetDodgeType, &ServerSetDodgeType_Parms, NULL );
};

// Function NetherGame.NetherPawn.Dodge
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )

bool ANetherPawn::Dodge ( unsigned char DoubleClickMove )
{
	static UFunction* pFnDodge = NULL;

	if ( ! pFnDodge )
		pFnDodge = (UFunction*) UObject::GObjObjects()->Data[ 77985 ];

	ANetherPawn_execDodge_Parms Dodge_Parms;
	Dodge_Parms.DoubleClickMove = DoubleClickMove;

	this->ProcessEvent ( pFnDodge, &Dodge_Parms, NULL );

	return Dodge_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.OnAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ANetherPawn::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 77980 ];

	ANetherPawn_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function NetherGame.NetherPawn.ThrowWeaponOnDeath
// [0x00020000] 
// Parameters infos:

void ANetherPawn::ThrowWeaponOnDeath ( )
{
	static UFunction* pFnThrowWeaponOnDeath = NULL;

	if ( ! pFnThrowWeaponOnDeath )
		pFnThrowWeaponOnDeath = (UFunction*) UObject::GObjObjects()->Data[ 77979 ];

	ANetherPawn_execThrowWeaponOnDeath_Parms ThrowWeaponOnDeath_Parms;

	this->ProcessEvent ( pFnThrowWeaponOnDeath, &ThrowWeaponOnDeath_Parms, NULL );
};

// Function NetherGame.NetherPawn.AddDefaultInventory
// [0x00020002] 
// Parameters infos:

void ANetherPawn::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 77975 ];

	ANetherPawn_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayWeaponSwitch
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 OldWeapon                      ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void ANetherPawn::PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnPlayWeaponSwitch = NULL;

	if ( ! pFnPlayWeaponSwitch )
		pFnPlayWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 77972 ];

	ANetherPawn_execPlayWeaponSwitch_Parms PlayWeaponSwitch_Parms;
	PlayWeaponSwitch_Parms.OldWeapon = OldWeapon;
	PlayWeaponSwitch_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnPlayWeaponSwitch, &PlayWeaponSwitch_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetCurrentRangedPose
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ANetherPawn::GetCurrentRangedPose ( )
{
	static UFunction* pFnGetCurrentRangedPose = NULL;

	if ( ! pFnGetCurrentRangedPose )
		pFnGetCurrentRangedPose = (UFunction*) UObject::GObjObjects()->Data[ 77970 ];

	ANetherPawn_execGetCurrentRangedPose_Parms GetCurrentRangedPose_Parms;

	this->ProcessEvent ( pFnGetCurrentRangedPose, &GetCurrentRangedPose_Parms, NULL );

	return GetCurrentRangedPose_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.SetCurrentWeaponType
// [0x00020002] 
// Parameters infos:
// unsigned char                  WeaponType                     ( CPF_Parm )

void ANetherPawn::SetCurrentWeaponType ( unsigned char WeaponType )
{
	static UFunction* pFnSetCurrentWeaponType = NULL;

	if ( ! pFnSetCurrentWeaponType )
		pFnSetCurrentWeaponType = (UFunction*) UObject::GObjObjects()->Data[ 77968 ];

	ANetherPawn_execSetCurrentWeaponType_Parms SetCurrentWeaponType_Parms;
	SetCurrentWeaponType_Parms.WeaponType = WeaponType;

	this->ProcessEvent ( pFnSetCurrentWeaponType, &SetCurrentWeaponType_Parms, NULL );
};

// Function NetherGame.NetherPawn.ServerSetCurrentRangedPose
// [0x002200C2] 
// Parameters infos:
// unsigned char                  RangedPose                     ( CPF_Parm )

void ANetherPawn::ServerSetCurrentRangedPose ( unsigned char RangedPose )
{
	static UFunction* pFnServerSetCurrentRangedPose = NULL;

	if ( ! pFnServerSetCurrentRangedPose )
		pFnServerSetCurrentRangedPose = (UFunction*) UObject::GObjObjects()->Data[ 77966 ];

	ANetherPawn_execServerSetCurrentRangedPose_Parms ServerSetCurrentRangedPose_Parms;
	ServerSetCurrentRangedPose_Parms.RangedPose = RangedPose;

	this->ProcessEvent ( pFnServerSetCurrentRangedPose, &ServerSetCurrentRangedPose_Parms, NULL );
};

// Function NetherGame.NetherPawn.SetCurrentRangedPose
// [0x00020102] 
// Parameters infos:
// unsigned char                  RangedPose                     ( CPF_Parm )

void ANetherPawn::SetCurrentRangedPose ( unsigned char RangedPose )
{
	static UFunction* pFnSetCurrentRangedPose = NULL;

	if ( ! pFnSetCurrentRangedPose )
		pFnSetCurrentRangedPose = (UFunction*) UObject::GObjObjects()->Data[ 77964 ];

	ANetherPawn_execSetCurrentRangedPose_Parms SetCurrentRangedPose_Parms;
	SetCurrentRangedPose_Parms.RangedPose = RangedPose;

	this->ProcessEvent ( pFnSetCurrentRangedPose, &SetCurrentRangedPose_Parms, NULL );
};

// Function NetherGame.NetherPawn.ShouldUseZoomCam
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::ShouldUseZoomCam ( )
{
	static UFunction* pFnShouldUseZoomCam = NULL;

	if ( ! pFnShouldUseZoomCam )
		pFnShouldUseZoomCam = (UFunction*) UObject::GObjObjects()->Data[ 77962 ];

	ANetherPawn_execShouldUseZoomCam_Parms ShouldUseZoomCam_Parms;

	this->ProcessEvent ( pFnShouldUseZoomCam, &ShouldUseZoomCam_Parms, NULL );

	return ShouldUseZoomCam_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsReloading
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsReloading ( )
{
	static UFunction* pFnIsReloading = NULL;

	if ( ! pFnIsReloading )
		pFnIsReloading = (UFunction*) UObject::GObjObjects()->Data[ 75548 ];

	ANetherPawn_execIsReloading_Parms IsReloading_Parms;

	this->ProcessEvent ( pFnIsReloading, &IsReloading_Parms, NULL );

	return IsReloading_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.TogglePlayerSprint
// [0x00020102] 
// Parameters infos:
// unsigned long                  bShouldSprint                  ( CPF_Parm )

void ANetherPawn::TogglePlayerSprint ( unsigned long bShouldSprint )
{
	static UFunction* pFnTogglePlayerSprint = NULL;

	if ( ! pFnTogglePlayerSprint )
		pFnTogglePlayerSprint = (UFunction*) UObject::GObjObjects()->Data[ 77958 ];

	ANetherPawn_execTogglePlayerSprint_Parms TogglePlayerSprint_Parms;
	TogglePlayerSprint_Parms.bShouldSprint = bShouldSprint;

	this->ProcessEvent ( pFnTogglePlayerSprint, &TogglePlayerSprint_Parms, NULL );
};

// Function NetherGame.NetherPawn.ToggleHoldingBreath
// [0x00020102] 
// Parameters infos:
// unsigned long                  bHold                          ( CPF_Parm )

void ANetherPawn::ToggleHoldingBreath ( unsigned long bHold )
{
	static UFunction* pFnToggleHoldingBreath = NULL;

	if ( ! pFnToggleHoldingBreath )
		pFnToggleHoldingBreath = (UFunction*) UObject::GObjObjects()->Data[ 77956 ];

	ANetherPawn_execToggleHoldingBreath_Parms ToggleHoldingBreath_Parms;
	ToggleHoldingBreath_Parms.bHold = bHold;

	this->ProcessEvent ( pFnToggleHoldingBreath, &ToggleHoldingBreath_Parms, NULL );
};

// Function NetherGame.NetherPawn.UpdateSprint
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPawn::UpdateSprint ( float DeltaTime )
{
	static UFunction* pFnUpdateSprint = NULL;

	if ( ! pFnUpdateSprint )
		pFnUpdateSprint = (UFunction*) UObject::GObjObjects()->Data[ 77954 ];

	ANetherPawn_execUpdateSprint_Parms UpdateSprint_Parms;
	UpdateSprint_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateSprint, &UpdateSprint_Parms, NULL );
};

// Function NetherGame.NetherPawn.CanSprint
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::CanSprint ( )
{
	static UFunction* pFnCanSprint = NULL;

	if ( ! pFnCanSprint )
		pFnCanSprint = (UFunction*) UObject::GObjObjects()->Data[ 77950 ];

	ANetherPawn_execCanSprint_Parms CanSprint_Parms;

	this->ProcessEvent ( pFnCanSprint, &CanSprint_Parms, NULL );

	return CanSprint_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsMoving
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsMoving ( )
{
	static UFunction* pFnIsMoving = NULL;

	if ( ! pFnIsMoving )
		pFnIsMoving = (UFunction*) UObject::GObjObjects()->Data[ 74109 ];

	ANetherPawn_execIsMoving_Parms IsMoving_Parms;

	this->ProcessEvent ( pFnIsMoving, &IsMoving_Parms, NULL );

	return IsMoving_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsSprinting
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsSprinting ( )
{
	static UFunction* pFnIsSprinting = NULL;

	if ( ! pFnIsSprinting )
		pFnIsSprinting = (UFunction*) UObject::GObjObjects()->Data[ 77948 ];

	ANetherPawn_execIsSprinting_Parms IsSprinting_Parms;

	this->ProcessEvent ( pFnIsSprinting, &IsSprinting_Parms, NULL );

	return IsSprinting_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsHoldingBreath
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsHoldingBreath ( )
{
	static UFunction* pFnIsHoldingBreath = NULL;

	if ( ! pFnIsHoldingBreath )
		pFnIsHoldingBreath = (UFunction*) UObject::GObjObjects()->Data[ 77946 ];

	ANetherPawn_execIsHoldingBreath_Parms IsHoldingBreath_Parms;

	this->ProcessEvent ( pFnIsHoldingBreath, &IsHoldingBreath_Parms, NULL );

	return IsHoldingBreath_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsExhausted
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsExhausted ( )
{
	static UFunction* pFnIsExhausted = NULL;

	if ( ! pFnIsExhausted )
		pFnIsExhausted = (UFunction*) UObject::GObjObjects()->Data[ 74080 ];

	ANetherPawn_execIsExhausted_Parms IsExhausted_Parms;

	this->ProcessEvent ( pFnIsExhausted, &IsExhausted_Parms, NULL );

	return IsExhausted_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsCrawling
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsCrawling ( )
{
	static UFunction* pFnIsCrawling = NULL;

	if ( ! pFnIsCrawling )
		pFnIsCrawling = (UFunction*) UObject::GObjObjects()->Data[ 74024 ];

	ANetherPawn_execIsCrawling_Parms IsCrawling_Parms;

	this->ProcessEvent ( pFnIsCrawling, &IsCrawling_Parms, NULL );

	return IsCrawling_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsCrouched
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsCrouched ( )
{
	static UFunction* pFnIsCrouched = NULL;

	if ( ! pFnIsCrouched )
		pFnIsCrouched = (UFunction*) UObject::GObjObjects()->Data[ 74026 ];

	ANetherPawn_execIsCrouched_Parms IsCrouched_Parms;

	this->ProcessEvent ( pFnIsCrouched, &IsCrouched_Parms, NULL );

	return IsCrouched_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.GetStaminaAmountMax
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPawn::GetStaminaAmountMax ( )
{
	static UFunction* pFnGetStaminaAmountMax = NULL;

	if ( ! pFnGetStaminaAmountMax )
		pFnGetStaminaAmountMax = (UFunction*) UObject::GObjObjects()->Data[ 74084 ];

	ANetherPawn_execGetStaminaAmountMax_Parms GetStaminaAmountMax_Parms;

	this->ProcessEvent ( pFnGetStaminaAmountMax, &GetStaminaAmountMax_Parms, NULL );

	return GetStaminaAmountMax_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.GetStaminaAmountCurrent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPawn::GetStaminaAmountCurrent ( )
{
	static UFunction* pFnGetStaminaAmountCurrent = NULL;

	if ( ! pFnGetStaminaAmountCurrent )
		pFnGetStaminaAmountCurrent = (UFunction*) UObject::GObjObjects()->Data[ 74082 ];

	ANetherPawn_execGetStaminaAmountCurrent_Parms GetStaminaAmountCurrent_Parms;

	this->ProcessEvent ( pFnGetStaminaAmountCurrent, &GetStaminaAmountCurrent_Parms, NULL );

	return GetStaminaAmountCurrent_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.ClientAttemptDrainStamina
// [0x01040143] ( FUNC_Final )
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void ANetherPawn::ClientAttemptDrainStamina ( float Amount )
{
	static UFunction* pFnClientAttemptDrainStamina = NULL;

	if ( ! pFnClientAttemptDrainStamina )
		pFnClientAttemptDrainStamina = (UFunction*) UObject::GObjObjects()->Data[ 77944 ];

	ANetherPawn_execClientAttemptDrainStamina_Parms ClientAttemptDrainStamina_Parms;
	ClientAttemptDrainStamina_Parms.Amount = Amount;

	this->ProcessEvent ( pFnClientAttemptDrainStamina, &ClientAttemptDrainStamina_Parms, NULL );
};

// Function NetherGame.NetherPawn.AttemptDrainStamina
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Amount                         ( CPF_Parm )
// unsigned long                  bUpdateClient                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsMelee                       ( CPF_OptionalParm | CPF_Parm )

bool ANetherPawn::AttemptDrainStamina ( float Amount, unsigned long bUpdateClient, unsigned long bIsMelee )
{
	static UFunction* pFnAttemptDrainStamina = NULL;

	if ( ! pFnAttemptDrainStamina )
		pFnAttemptDrainStamina = (UFunction*) UObject::GObjObjects()->Data[ 77716 ];

	ANetherPawn_execAttemptDrainStamina_Parms AttemptDrainStamina_Parms;
	AttemptDrainStamina_Parms.Amount = Amount;
	AttemptDrainStamina_Parms.bUpdateClient = bUpdateClient;
	AttemptDrainStamina_Parms.bIsMelee = bIsMelee;

	this->ProcessEvent ( pFnAttemptDrainStamina, &AttemptDrainStamina_Parms, NULL );

	return AttemptDrainStamina_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.ClientAddStamina
// [0x01044143] ( FUNC_Final )
// Parameters infos:
// float                          Amount                         ( CPF_Parm )
// unsigned long                  bEndExhaustion                 ( CPF_OptionalParm | CPF_Parm )

void ANetherPawn::ClientAddStamina ( float Amount, unsigned long bEndExhaustion )
{
	static UFunction* pFnClientAddStamina = NULL;

	if ( ! pFnClientAddStamina )
		pFnClientAddStamina = (UFunction*) UObject::GObjObjects()->Data[ 77937 ];

	ANetherPawn_execClientAddStamina_Parms ClientAddStamina_Parms;
	ClientAddStamina_Parms.Amount = Amount;
	ClientAddStamina_Parms.bEndExhaustion = bEndExhaustion;

	this->ProcessEvent ( pFnClientAddStamina, &ClientAddStamina_Parms, NULL );
};

// Function NetherGame.NetherPawn.AddStamina
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          Amount                         ( CPF_Parm )
// unsigned long                  bUpdateClient                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bEndExhaustion                 ( CPF_OptionalParm | CPF_Parm )

void ANetherPawn::AddStamina ( float Amount, unsigned long bUpdateClient, unsigned long bEndExhaustion )
{
	static UFunction* pFnAddStamina = NULL;

	if ( ! pFnAddStamina )
		pFnAddStamina = (UFunction*) UObject::GObjObjects()->Data[ 77634 ];

	ANetherPawn_execAddStamina_Parms AddStamina_Parms;
	AddStamina_Parms.Amount = Amount;
	AddStamina_Parms.bUpdateClient = bUpdateClient;
	AddStamina_Parms.bEndExhaustion = bEndExhaustion;

	this->ProcessEvent ( pFnAddStamina, &AddStamina_Parms, NULL );
};

// Function NetherGame.NetherPawn.HasStamina
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          StaminaAmount                  ( CPF_Parm )

bool ANetherPawn::HasStamina ( float StaminaAmount )
{
	static UFunction* pFnHasStamina = NULL;

	if ( ! pFnHasStamina )
		pFnHasStamina = (UFunction*) UObject::GObjObjects()->Data[ 77931 ];

	ANetherPawn_execHasStamina_Parms HasStamina_Parms;
	HasStamina_Parms.StaminaAmount = StaminaAmount;

	this->ProcessEvent ( pFnHasStamina, &HasStamina_Parms, NULL );

	return HasStamina_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.HandlePickup
// [0x00020002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )

void ANetherPawn::HandlePickup ( class AInventory* Inv )
{
	static UFunction* pFnHandlePickup = NULL;

	if ( ! pFnHandlePickup )
		pFnHandlePickup = (UFunction*) UObject::GObjObjects()->Data[ 77929 ];

	ANetherPawn_execHandlePickup_Parms HandlePickup_Parms;
	HandlePickup_Parms.Inv = Inv;

	this->ProcessEvent ( pFnHandlePickup, &HandlePickup_Parms, NULL );
};

// Function NetherGame.NetherPawn.ServerMakeNoise
// [0x00020002] 
// Parameters infos:
// float                          Volume                         ( CPF_Parm )

void ANetherPawn::ServerMakeNoise ( float Volume )
{
	static UFunction* pFnServerMakeNoise = NULL;

	if ( ! pFnServerMakeNoise )
		pFnServerMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 77927 ];

	ANetherPawn_execServerMakeNoise_Parms ServerMakeNoise_Parms;
	ServerMakeNoise_Parms.Volume = Volume;

	this->ProcessEvent ( pFnServerMakeNoise, &ServerMakeNoise_Parms, NULL );
};

// Function NetherGame.NetherPawn.ActuallyPlayFootstepSound
// [0x00020102] 
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void ANetherPawn::ActuallyPlayFootstepSound ( int FootDown )
{
	static UFunction* pFnActuallyPlayFootstepSound = NULL;

	if ( ! pFnActuallyPlayFootstepSound )
		pFnActuallyPlayFootstepSound = (UFunction*) UObject::GObjObjects()->Data[ 77924 ];

	ANetherPawn_execActuallyPlayFootstepSound_Parms ActuallyPlayFootstepSound_Parms;
	ActuallyPlayFootstepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnActuallyPlayFootstepSound, &ActuallyPlayFootstepSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ANetherPawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 77922 ];

	ANetherPawn_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function NetherGame.NetherPawn.NetherStartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          MeshOffset                     ( CPF_Parm )
// float                          HeightAdjust                   ( CPF_Parm )

void ANetherPawn::eventNetherStartCrouch ( float MeshOffset, float HeightAdjust )
{
	static UFunction* pFnNetherStartCrouch = NULL;

	if ( ! pFnNetherStartCrouch )
		pFnNetherStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 77919 ];

	ANetherPawn_eventNetherStartCrouch_Parms NetherStartCrouch_Parms;
	NetherStartCrouch_Parms.MeshOffset = MeshOffset;
	NetherStartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnNetherStartCrouch, &NetherStartCrouch_Parms, NULL );
};

// Function NetherGame.NetherPawn.EndCrawl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ANetherPawn::eventEndCrawl ( float HeightAdjust )
{
	static UFunction* pFnEndCrawl = NULL;

	if ( ! pFnEndCrawl )
		pFnEndCrawl = (UFunction*) UObject::GObjObjects()->Data[ 77917 ];

	ANetherPawn_eventEndCrawl_Parms EndCrawl_Parms;
	EndCrawl_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrawl, &EndCrawl_Parms, NULL );
};

// Function NetherGame.NetherPawn.NetherStartCrawl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          MeshOffset                     ( CPF_Parm )
// float                          HeightAdjust                   ( CPF_Parm )

void ANetherPawn::eventNetherStartCrawl ( float MeshOffset, float HeightAdjust )
{
	static UFunction* pFnNetherStartCrawl = NULL;

	if ( ! pFnNetherStartCrawl )
		pFnNetherStartCrawl = (UFunction*) UObject::GObjObjects()->Data[ 77913 ];

	ANetherPawn_eventNetherStartCrawl_Parms NetherStartCrawl_Parms;
	NetherStartCrawl_Parms.MeshOffset = MeshOffset;
	NetherStartCrawl_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnNetherStartCrawl, &NetherStartCrawl_Parms, NULL );
};

// Function NetherGame.NetherPawn.ShouldCrawl
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bCrawl                         ( CPF_Parm )

void ANetherPawn::ShouldCrawl ( unsigned long bCrawl )
{
	static UFunction* pFnShouldCrawl = NULL;

	if ( ! pFnShouldCrawl )
		pFnShouldCrawl = (UFunction*) UObject::GObjObjects()->Data[ 76069 ];

	ANetherPawn_execShouldCrawl_Parms ShouldCrawl_Parms;
	ShouldCrawl_Parms.bCrawl = bCrawl;

	this->ProcessEvent ( pFnShouldCrawl, &ShouldCrawl_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayJumpingSound
// [0x00020000] 
// Parameters infos:

void ANetherPawn::PlayJumpingSound ( )
{
	static UFunction* pFnPlayJumpingSound = NULL;

	if ( ! pFnPlayJumpingSound )
		pFnPlayJumpingSound = (UFunction*) UObject::GObjObjects()->Data[ 77911 ];

	ANetherPawn_execPlayJumpingSound_Parms PlayJumpingSound_Parms;

	this->ProcessEvent ( pFnPlayJumpingSound, &PlayJumpingSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayLandingSound
// [0x00020000] 
// Parameters infos:

void ANetherPawn::PlayLandingSound ( )
{
	static UFunction* pFnPlayLandingSound = NULL;

	if ( ! pFnPlayLandingSound )
		pFnPlayLandingSound = (UFunction*) UObject::GObjObjects()->Data[ 77910 ];

	ANetherPawn_execPlayLandingSound_Parms PlayLandingSound_Parms;

	this->ProcessEvent ( pFnPlayLandingSound, &PlayLandingSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ANetherPawn::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 77906 ];

	ANetherPawn_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function NetherGame.NetherPawn.DeactivateWings
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANetherPawn::eventDeactivateWings ( )
{
	static UFunction* pFnDeactivateWings = NULL;

	if ( ! pFnDeactivateWings )
		pFnDeactivateWings = (UFunction*) UObject::GObjObjects()->Data[ 77902 ];

	ANetherPawn_eventDeactivateWings_Parms DeactivateWings_Parms;

	this->ProcessEvent ( pFnDeactivateWings, &DeactivateWings_Parms, NULL );
};

// Function NetherGame.NetherPawn.SetWingsActive
// [0x00820002] 
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void ANetherPawn::SetWingsActive ( unsigned long bActive )
{
	static UFunction* pFnSetWingsActive = NULL;

	if ( ! pFnSetWingsActive )
		pFnSetWingsActive = (UFunction*) UObject::GObjObjects()->Data[ 77899 ];

	ANetherPawn_execSetWingsActive_Parms SetWingsActive_Parms;
	SetWingsActive_Parms.bActive = bActive;

	this->ProcessEvent ( pFnSetWingsActive, &SetWingsActive_Parms, NULL );
};

// Function NetherGame.NetherPawn.TakeFallingDamage
// [0x00020102] 
// Parameters infos:

void ANetherPawn::TakeFallingDamage ( )
{
	static UFunction* pFnTakeFallingDamage = NULL;

	if ( ! pFnTakeFallingDamage )
		pFnTakeFallingDamage = (UFunction*) UObject::GObjObjects()->Data[ 77895 ];

	ANetherPawn_execTakeFallingDamage_Parms TakeFallingDamage_Parms;

	this->ProcessEvent ( pFnTakeFallingDamage, &TakeFallingDamage_Parms, NULL );
};

// Function NetherGame.NetherPawn.Falling
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANetherPawn::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 77894 ];

	ANetherPawn_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function NetherGame.NetherPawn.NetherDoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool ANetherPawn::NetherDoJump ( unsigned long bUpdating )
{
	static UFunction* pFnNetherDoJump = NULL;

	if ( ! pFnNetherDoJump )
		pFnNetherDoJump = (UFunction*) UObject::GObjObjects()->Data[ 77890 ];

	ANetherPawn_execNetherDoJump_Parms NetherDoJump_Parms;
	NetherDoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnNetherDoJump, &NetherDoJump_Parms, NULL );

	return NetherDoJump_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool ANetherPawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 77886 ];

	ANetherPawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.PlaySpawnSound
// [0x00020000] 
// Parameters infos:

void ANetherPawn::PlaySpawnSound ( )
{
	static UFunction* pFnPlaySpawnSound = NULL;

	if ( ! pFnPlaySpawnSound )
		pFnPlaySpawnSound = (UFunction*) UObject::GObjObjects()->Data[ 77885 ];

	ANetherPawn_execPlaySpawnSound_Parms PlaySpawnSound_Parms;

	this->ProcessEvent ( pFnPlaySpawnSound, &PlaySpawnSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayTeleportSound
// [0x00020000] 
// Parameters infos:

void ANetherPawn::PlayTeleportSound ( )
{
	static UFunction* pFnPlayTeleportSound = NULL;

	if ( ! pFnPlayTeleportSound )
		pFnPlayTeleportSound = (UFunction*) UObject::GObjObjects()->Data[ 77884 ];

	ANetherPawn_execPlayTeleportSound_Parms PlayTeleportSound_Parms;

	this->ProcessEvent ( pFnPlayTeleportSound, &PlayTeleportSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.StartDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void ANetherPawn::eventStartDriving ( class AVehicle* V )
{
	static UFunction* pFnStartDriving = NULL;

	if ( ! pFnStartDriving )
		pFnStartDriving = (UFunction*) UObject::GObjObjects()->Data[ 77882 ];

	ANetherPawn_eventStartDriving_Parms StartDriving_Parms;
	StartDriving_Parms.V = V;

	this->ProcessEvent ( pFnStartDriving, &StartDriving_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetBaseAimRotation
// [0x00820922] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ANetherPawn::eventGetBaseAimRotation ( )
{
	static UFunction* pFnGetBaseAimRotation = NULL;

	if ( ! pFnGetBaseAimRotation )
		pFnGetBaseAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 77878 ];

	ANetherPawn_eventGetBaseAimRotation_Parms GetBaseAimRotation_Parms;

	this->ProcessEvent ( pFnGetBaseAimRotation, &GetBaseAimRotation_Parms, NULL );

	return GetBaseAimRotation_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.CalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ANetherPawn::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 77872 ];

	ANetherPawn_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.GetPawnViewLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANetherPawn::GetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 71144 ];

	ANetherPawn_execGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.GetViewRotation
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ANetherPawn::eventGetViewRotation ( )
{
	static UFunction* pFnGetViewRotation = NULL;

	if ( ! pFnGetViewRotation )
		pFnGetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 77854 ];

	ANetherPawn_eventGetViewRotation_Parms GetViewRotation_Parms;

	this->ProcessEvent ( pFnGetViewRotation, &GetViewRotation_Parms, NULL );

	return GetViewRotation_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ANetherPawn::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 77850 ];

	ANetherPawn_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function NetherGame.NetherPawn.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName ANetherPawn::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 77846 ];

	ANetherPawn_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.BecomeViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ANetherPawn::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 77843 ];

	ANetherPawn_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function NetherGame.NetherPawn.SwingShake
// [0x00024002] 
// Parameters infos:
// unsigned char                  AttackDirection                ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          ShakeScale                     ( CPF_OptionalParm | CPF_Parm )

void ANetherPawn::SwingShake ( unsigned char AttackDirection, float Duration, float ShakeScale )
{
	static UFunction* pFnSwingShake = NULL;

	if ( ! pFnSwingShake )
		pFnSwingShake = (UFunction*) UObject::GObjObjects()->Data[ 77839 ];

	ANetherPawn_execSwingShake_Parms SwingShake_Parms;
	SwingShake_Parms.AttackDirection = AttackDirection;
	SwingShake_Parms.Duration = Duration;
	SwingShake_Parms.ShakeScale = ShakeScale;

	this->ProcessEvent ( pFnSwingShake, &SwingShake_Parms, NULL );
};

// Function NetherGame.NetherPawn.ServerSetCurrentWeaponAction
// [0x002200C3] ( FUNC_Final )
// Parameters infos:
// unsigned char                  InWeaponAction                 ( CPF_Parm )

void ANetherPawn::ServerSetCurrentWeaponAction ( unsigned char InWeaponAction )
{
	static UFunction* pFnServerSetCurrentWeaponAction = NULL;

	if ( ! pFnServerSetCurrentWeaponAction )
		pFnServerSetCurrentWeaponAction = (UFunction*) UObject::GObjObjects()->Data[ 77837 ];

	ANetherPawn_execServerSetCurrentWeaponAction_Parms ServerSetCurrentWeaponAction_Parms;
	ServerSetCurrentWeaponAction_Parms.InWeaponAction = InWeaponAction;

	this->ProcessEvent ( pFnServerSetCurrentWeaponAction, &ServerSetCurrentWeaponAction_Parms, NULL );
};

// Function NetherGame.NetherPawn.SetCurrentWeaponAction
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  InWeaponAction                 ( CPF_Parm )
// unsigned long                  bReplicateToServer             ( CPF_OptionalParm | CPF_Parm )

void ANetherPawn::SetCurrentWeaponAction ( unsigned char InWeaponAction, unsigned long bReplicateToServer )
{
	static UFunction* pFnSetCurrentWeaponAction = NULL;

	if ( ! pFnSetCurrentWeaponAction )
		pFnSetCurrentWeaponAction = (UFunction*) UObject::GObjObjects()->Data[ 77834 ];

	ANetherPawn_execSetCurrentWeaponAction_Parms SetCurrentWeaponAction_Parms;
	SetCurrentWeaponAction_Parms.InWeaponAction = InWeaponAction;
	SetCurrentWeaponAction_Parms.bReplicateToServer = bReplicateToServer;

	this->ProcessEvent ( pFnSetCurrentWeaponAction, &SetCurrentWeaponAction_Parms, NULL );
};

// Function NetherGame.NetherPawn.ClientPlayImpactEffects
// [0x010201C2] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ANetherPawn::ClientPlayImpactEffects ( struct FVector HitLocation )
{
	static UFunction* pFnClientPlayImpactEffects = NULL;

	if ( ! pFnClientPlayImpactEffects )
		pFnClientPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 77832 ];

	ANetherPawn_execClientPlayImpactEffects_Parms ClientPlayImpactEffects_Parms;
	memcpy ( &ClientPlayImpactEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnClientPlayImpactEffects, &ClientPlayImpactEffects_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void ANetherPawn::PlayImpactEffects ( struct FVector HitLocation, unsigned long bViaReplication )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 77829 ];

	ANetherPawn_execPlayImpactEffects_Parms PlayImpactEffects_Parms;
	memcpy ( &PlayImpactEffects_Parms.HitLocation, &HitLocation, 0xC );
	PlayImpactEffects_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function NetherGame.NetherPawn.WeaponFired
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ANetherPawn::WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 77825 ];

	ANetherPawn_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.InWeapon = InWeapon;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function NetherGame.NetherPawn.IsMeleeBlocking
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsMeleeBlocking ( )
{
	static UFunction* pFnIsMeleeBlocking = NULL;

	if ( ! pFnIsMeleeBlocking )
		pFnIsMeleeBlocking = (UFunction*) UObject::GObjObjects()->Data[ 77823 ];

	ANetherPawn_execIsMeleeBlocking_Parms IsMeleeBlocking_Parms;

	this->ProcessEvent ( pFnIsMeleeBlocking, &IsMeleeBlocking_Parms, NULL );

	return IsMeleeBlocking_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.OnMeleeActionUpdated
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPawn::OnMeleeActionUpdated ( )
{
	static UFunction* pFnOnMeleeActionUpdated = NULL;

	if ( ! pFnOnMeleeActionUpdated )
		pFnOnMeleeActionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 77819 ];

	ANetherPawn_execOnMeleeActionUpdated_Parms OnMeleeActionUpdated_Parms;

	this->ProcessEvent ( pFnOnMeleeActionUpdated, &OnMeleeActionUpdated_Parms, NULL );

	return OnMeleeActionUpdated_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.SetMeleeAction
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  InMeleeAction                  ( CPF_Parm )

float ANetherPawn::SetMeleeAction ( unsigned char InMeleeAction )
{
	static UFunction* pFnSetMeleeAction = NULL;

	if ( ! pFnSetMeleeAction )
		pFnSetMeleeAction = (UFunction*) UObject::GObjObjects()->Data[ 77816 ];

	ANetherPawn_execSetMeleeAction_Parms SetMeleeAction_Parms;
	SetMeleeAction_Parms.InMeleeAction = InMeleeAction;

	this->ProcessEvent ( pFnSetMeleeAction, &SetMeleeAction_Parms, NULL );

	return SetMeleeAction_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANetherPawn::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 77814 ];

	ANetherPawn_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function NetherGame.NetherPawn.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANetherPawn::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 77812 ];

	ANetherPawn_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetWeaponStartTraceLocation
// [0x00824102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 CurrentWeapon                  ( CPF_OptionalParm | CPF_Parm )

struct FVector ANetherPawn::GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 77807 ];

	ANetherPawn_execGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.CurrentWeapon = CurrentWeapon;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.SetBaseEyeheight
// [0x00020100] 
// Parameters infos:

void ANetherPawn::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = (UFunction*) UObject::GObjObjects()->Data[ 77806 ];

	ANetherPawn_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function NetherGame.NetherPawn.DirectionUpdate
// [0x00020102] 
// Parameters infos:

void ANetherPawn::DirectionUpdate ( )
{
	static UFunction* pFnDirectionUpdate = NULL;

	if ( ! pFnDirectionUpdate )
		pFnDirectionUpdate = (UFunction*) UObject::GObjObjects()->Data[ 77804 ];

	ANetherPawn_execDirectionUpdate_Parms DirectionUpdate_Parms;

	this->ProcessEvent ( pFnDirectionUpdate, &DirectionUpdate_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayerMovementEffects
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPawn::PlayerMovementEffects ( float DeltaTime )
{
	static UFunction* pFnPlayerMovementEffects = NULL;

	if ( ! pFnPlayerMovementEffects )
		pFnPlayerMovementEffects = (UFunction*) UObject::GObjObjects()->Data[ 77802 ];

	ANetherPawn_execPlayerMovementEffects_Parms PlayerMovementEffects_Parms;
	PlayerMovementEffects_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerMovementEffects, &PlayerMovementEffects_Parms, NULL );
};

// Function NetherGame.NetherPawn.UpdateDOF
// [0x00020102] 
// Parameters infos:

void ANetherPawn::UpdateDOF ( )
{
	static UFunction* pFnUpdateDOF = NULL;

	if ( ! pFnUpdateDOF )
		pFnUpdateDOF = (UFunction*) UObject::GObjObjects()->Data[ 77799 ];

	ANetherPawn_execUpdateDOF_Parms UpdateDOF_Parms;

	this->ProcessEvent ( pFnUpdateDOF, &UpdateDOF_Parms, NULL );
};

// Function NetherGame.NetherPawn.ModifyPostProcessChain
// [0x00820102] 
// Parameters infos:
// unsigned long                  bShouldBlurSights              ( CPF_Parm )
// unsigned long                  bHitEffect                     ( CPF_Parm )

void ANetherPawn::ModifyPostProcessChain ( unsigned long bShouldBlurSights, unsigned long bHitEffect )
{
	static UFunction* pFnModifyPostProcessChain = NULL;

	if ( ! pFnModifyPostProcessChain )
		pFnModifyPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 77788 ];

	ANetherPawn_execModifyPostProcessChain_Parms ModifyPostProcessChain_Parms;
	ModifyPostProcessChain_Parms.bShouldBlurSights = bShouldBlurSights;
	ModifyPostProcessChain_Parms.bHitEffect = bHitEffect;

	this->ProcessEvent ( pFnModifyPostProcessChain, &ModifyPostProcessChain_Parms, NULL );
};

// Function NetherGame.NetherPawn.FindEnemiesNearby
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPawn::FindEnemiesNearby ( float DeltaTime )
{
	static UFunction* pFnFindEnemiesNearby = NULL;

	if ( ! pFnFindEnemiesNearby )
		pFnFindEnemiesNearby = (UFunction*) UObject::GObjObjects()->Data[ 77784 ];

	ANetherPawn_execFindEnemiesNearby_Parms FindEnemiesNearby_Parms;
	FindEnemiesNearby_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFindEnemiesNearby, &FindEnemiesNearby_Parms, NULL );
};

// Function NetherGame.NetherPawn.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPawn::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 77782 ];

	ANetherPawn_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherPawn.SetCharacterMeshInfo
// [0x00820102] 
// Parameters infos:
// class USkeletalMesh*           SkelMesh                       ( CPF_Parm )
// class UMaterialInterface*      HeadMaterial                   ( CPF_Parm )
// class UMaterialInterface*      BodyMaterial                   ( CPF_Parm )

void ANetherPawn::SetCharacterMeshInfo ( class USkeletalMesh* SkelMesh, class UMaterialInterface* HeadMaterial, class UMaterialInterface* BodyMaterial )
{
	static UFunction* pFnSetCharacterMeshInfo = NULL;

	if ( ! pFnSetCharacterMeshInfo )
		pFnSetCharacterMeshInfo = (UFunction*) UObject::GObjObjects()->Data[ 77774 ];

	ANetherPawn_execSetCharacterMeshInfo_Parms SetCharacterMeshInfo_Parms;
	SetCharacterMeshInfo_Parms.SkelMesh = SkelMesh;
	SetCharacterMeshInfo_Parms.HeadMaterial = HeadMaterial;
	SetCharacterMeshInfo_Parms.BodyMaterial = BodyMaterial;

	this->ProcessEvent ( pFnSetCharacterMeshInfo, &SetCharacterMeshInfo_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetNetherPlayerReplicationInfo
// [0x00020102] 
// Parameters infos:
// class ANetherPlayerReplicationInfo* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherPlayerReplicationInfo* ANetherPawn::GetNetherPlayerReplicationInfo ( )
{
	static UFunction* pFnGetNetherPlayerReplicationInfo = NULL;

	if ( ! pFnGetNetherPlayerReplicationInfo )
		pFnGetNetherPlayerReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 77771 ];

	ANetherPawn_execGetNetherPlayerReplicationInfo_Parms GetNetherPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnGetNetherPlayerReplicationInfo, &GetNetherPlayerReplicationInfo_Parms, NULL );

	return GetNetherPlayerReplicationInfo_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.SetCharacterClassFromInfo
// [0x00020102] 
// Parameters infos:
// class UClass*                  Info                           ( CPF_Parm )

void ANetherPawn::SetCharacterClassFromInfo ( class UClass* Info )
{
	static UFunction* pFnSetCharacterClassFromInfo = NULL;

	if ( ! pFnSetCharacterClassFromInfo )
		pFnSetCharacterClassFromInfo = (UFunction*) UObject::GObjObjects()->Data[ 77769 ];

	ANetherPawn_execSetCharacterClassFromInfo_Parms SetCharacterClassFromInfo_Parms;
	SetCharacterClassFromInfo_Parms.Info = Info;

	this->ProcessEvent ( pFnSetCharacterClassFromInfo, &SetCharacterClassFromInfo_Parms, NULL );
};

// Function NetherGame.NetherPawn.AdjustSpeedForCurrentPosture
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANetherPawn::eventAdjustSpeedForCurrentPosture ( )
{
	static UFunction* pFnAdjustSpeedForCurrentPosture = NULL;

	if ( ! pFnAdjustSpeedForCurrentPosture )
		pFnAdjustSpeedForCurrentPosture = (UFunction*) UObject::GObjObjects()->Data[ 77768 ];

	ANetherPawn_eventAdjustSpeedForCurrentPosture_Parms AdjustSpeedForCurrentPosture_Parms;

	this->ProcessEvent ( pFnAdjustSpeedForCurrentPosture, &AdjustSpeedForCurrentPosture_Parms, NULL );
};

// Function NetherGame.NetherPawn.SetPawnSpeed
// [0x00020002] 
// Parameters infos:
// float                          GSpeed                         ( CPF_Parm )
// float                          ASpeed                         ( CPF_Parm )
// float                          WSpeed                         ( CPF_Parm )
// float                          JZ                             ( CPF_Parm )

void ANetherPawn::SetPawnSpeed ( float GSpeed, float ASpeed, float WSpeed, float JZ )
{
	static UFunction* pFnSetPawnSpeed = NULL;

	if ( ! pFnSetPawnSpeed )
		pFnSetPawnSpeed = (UFunction*) UObject::GObjObjects()->Data[ 77763 ];

	ANetherPawn_execSetPawnSpeed_Parms SetPawnSpeed_Parms;
	SetPawnSpeed_Parms.GSpeed = GSpeed;
	SetPawnSpeed_Parms.ASpeed = ASpeed;
	SetPawnSpeed_Parms.WSpeed = WSpeed;
	SetPawnSpeed_Parms.JZ = JZ;

	this->ProcessEvent ( pFnSetPawnSpeed, &SetPawnSpeed_Parms, NULL );
};

// Function NetherGame.NetherPawn.IsLocalFirstPerson
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsLocalFirstPerson ( )
{
	static UFunction* pFnIsLocalFirstPerson = NULL;

	if ( ! pFnIsLocalFirstPerson )
		pFnIsLocalFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 71872 ];

	ANetherPawn_execIsLocalFirstPerson_Parms IsLocalFirstPerson_Parms;

	this->ProcessEvent ( pFnIsLocalFirstPerson, &IsLocalFirstPerson_Parms, NULL );

	return IsLocalFirstPerson_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.UpdatePawnForPerspective
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANetherPawn::UpdatePawnForPerspective ( )
{
	static UFunction* pFnUpdatePawnForPerspective = NULL;

	if ( ! pFnUpdatePawnForPerspective )
		pFnUpdatePawnForPerspective = (UFunction*) UObject::GObjObjects()->Data[ 75504 ];

	ANetherPawn_execUpdatePawnForPerspective_Parms UpdatePawnForPerspective_Parms;

	this->ProcessEvent ( pFnUpdatePawnForPerspective, &UpdatePawnForPerspective_Parms, NULL );
};

// Function NetherGame.NetherPawn.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ANetherPawn::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 77761 ];

	ANetherPawn_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetNetherController
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherPlayerController* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherPlayerController* ANetherPawn::GetNetherController ( )
{
	static UFunction* pFnGetNetherController = NULL;

	if ( ! pFnGetNetherController )
		pFnGetNetherController = (UFunction*) UObject::GObjObjects()->Data[ 74586 ];

	ANetherPawn_execGetNetherController_Parms GetNetherController_Parms;

	this->ProcessEvent ( pFnGetNetherController, &GetNetherController_Parms, NULL );

	return GetNetherController_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.FaceRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPawn::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 77758 ];

	ANetherPawn_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function NetherGame.NetherPawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANetherPawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 77756 ];

	ANetherPawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetCurrentPosture
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ANetherPawn::GetCurrentPosture ( )
{
	static UFunction* pFnGetCurrentPosture = NULL;

	if ( ! pFnGetCurrentPosture )
		pFnGetCurrentPosture = (UFunction*) UObject::GObjObjects()->Data[ 77754 ];

	ANetherPawn_execGetCurrentPosture_Parms GetCurrentPosture_Parms;

	this->ProcessEvent ( pFnGetCurrentPosture, &GetCurrentPosture_Parms, NULL );

	return GetCurrentPosture_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.SetWeapAnimType
// [0x00020102] 
// Parameters infos:
// unsigned char                  AnimType                       ( CPF_Parm )

void ANetherPawn::SetWeapAnimType ( unsigned char AnimType )
{
	static UFunction* pFnSetWeapAnimType = NULL;

	if ( ! pFnSetWeapAnimType )
		pFnSetWeapAnimType = (UFunction*) UObject::GObjObjects()->Data[ 77752 ];

	ANetherPawn_execSetWeapAnimType_Parms SetWeapAnimType_Parms;
	SetWeapAnimType_Parms.AnimType = AnimType;

	this->ProcessEvent ( pFnSetWeapAnimType, &SetWeapAnimType_Parms, NULL );
};

// Function NetherGame.NetherPawn.OneOffAnim_End
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void ANetherPawn::OneOffAnim_End ( )
{
	static UFunction* pFnOneOffAnim_End = NULL;

	if ( ! pFnOneOffAnim_End )
		pFnOneOffAnim_End = (UFunction*) UObject::GObjObjects()->Data[ 77751 ];

	ANetherPawn_execOneOffAnim_End_Parms OneOffAnim_End_Parms;

	this->ProcessEvent ( pFnOneOffAnim_End, &OneOffAnim_End_Parms, NULL );
};

// Function NetherGame.NetherPawn.OneOffAnim_Play
// [0x00044103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

float ANetherPawn::OneOffAnim_Play ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime )
{
	static UFunction* pFnOneOffAnim_Play = NULL;

	if ( ! pFnOneOffAnim_Play )
		pFnOneOffAnim_Play = (UFunction*) UObject::GObjObjects()->Data[ 77745 ];

	ANetherPawn_execOneOffAnim_Play_Parms OneOffAnim_Play_Parms;
	memcpy ( &OneOffAnim_Play_Parms.AnimName, &AnimName, 0x8 );
	OneOffAnim_Play_Parms.Rate = Rate;
	OneOffAnim_Play_Parms.BlendInTime = BlendInTime;
	OneOffAnim_Play_Parms.BlendOutTime = BlendOutTime;

	this->ProcessEvent ( pFnOneOffAnim_Play, &OneOffAnim_Play_Parms, NULL );

	return OneOffAnim_Play_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsHeadShot
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Const | CPF_Parm )
// float                          AdditionalScale                ( CPF_Parm )

bool ANetherPawn::IsHeadShot ( struct FVector HitLocation, float AdditionalScale )
{
	static UFunction* pFnIsHeadShot = NULL;

	if ( ! pFnIsHeadShot )
		pFnIsHeadShot = (UFunction*) UObject::GObjObjects()->Data[ 77739 ];

	ANetherPawn_execIsHeadShot_Parms IsHeadShot_Parms;
	memcpy ( &IsHeadShot_Parms.HitLocation, &HitLocation, 0xC );
	IsHeadShot_Parms.AdditionalScale = AdditionalScale;

	this->ProcessEvent ( pFnIsHeadShot, &IsHeadShot_Parms, NULL );

	return IsHeadShot_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.PlayTakeHitEffects
// [0x00820102] 
// Parameters infos:

void ANetherPawn::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 77729 ];

	ANetherPawn_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function NetherGame.NetherPawn.ClientPlayDamageEffect
// [0x01020142] 
// Parameters infos:
// class UClass*                  CamHitEffect                   ( CPF_Parm )

void ANetherPawn::ClientPlayDamageEffect ( class UClass* CamHitEffect )
{
	static UFunction* pFnClientPlayDamageEffect = NULL;

	if ( ! pFnClientPlayDamageEffect )
		pFnClientPlayDamageEffect = (UFunction*) UObject::GObjObjects()->Data[ 77727 ];

	ANetherPawn_execClientPlayDamageEffect_Parms ClientPlayDamageEffect_Parms;
	ClientPlayDamageEffect_Parms.CamHitEffect = CamHitEffect;

	this->ProcessEvent ( pFnClientPlayDamageEffect, &ClientPlayDamageEffect_Parms, NULL );
};

// Function NetherGame.NetherPawn.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ANetherPawn::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 77720 ];

	ANetherPawn_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x28 );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function NetherGame.NetherPawn.DisplayHitIndicator
// [0x00020102] 
// Parameters infos:
// float                          HitIntensity                   ( CPF_Parm )
// struct FVector                 HitDirection                   ( CPF_Parm )

void ANetherPawn::DisplayHitIndicator ( float HitIntensity, struct FVector HitDirection )
{
	static UFunction* pFnDisplayHitIndicator = NULL;

	if ( ! pFnDisplayHitIndicator )
		pFnDisplayHitIndicator = (UFunction*) UObject::GObjObjects()->Data[ 77717 ];

	ANetherPawn_execDisplayHitIndicator_Parms DisplayHitIndicator_Parms;
	DisplayHitIndicator_Parms.HitIntensity = HitIntensity;
	memcpy ( &DisplayHitIndicator_Parms.HitDirection, &HitDirection, 0xC );

	this->ProcessEvent ( pFnDisplayHitIndicator, &DisplayHitIndicator_Parms, NULL );
};

// Function NetherGame.NetherPawn.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ANetherPawn::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 77705 ];

	ANetherPawn_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function NetherGame.NetherPawn.ClientDied
// [0x010201C2] 
// Parameters infos:

void ANetherPawn::ClientDied ( )
{
	static UFunction* pFnClientDied = NULL;

	if ( ! pFnClientDied )
		pFnClientDied = (UFunction*) UObject::GObjObjects()->Data[ 77704 ];

	ANetherPawn_execClientDied_Parms ClientDied_Parms;

	this->ProcessEvent ( pFnClientDied, &ClientDied_Parms, NULL );
};

// Function NetherGame.NetherPawn.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ANetherPawn::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 77695 ];

	ANetherPawn_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherPawn::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 77693 ];

	ANetherPawn_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function NetherGame.NetherPawn.HealDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool ANetherPawn::eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 72604 ];

	ANetherPawn_eventHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.AdjustedHeal
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// unsigned long                  bIsFirstAid                    ( CPF_OptionalParm | CPF_Parm )

bool ANetherPawn::AdjustedHeal ( int Amount, class AController* Healer, class UClass* DamageType, unsigned long bIsFirstAid )
{
	static UFunction* pFnAdjustedHeal = NULL;

	if ( ! pFnAdjustedHeal )
		pFnAdjustedHeal = (UFunction*) UObject::GObjObjects()->Data[ 77660 ];

	ANetherPawn_execAdjustedHeal_Parms AdjustedHeal_Parms;
	AdjustedHeal_Parms.Amount = Amount;
	AdjustedHeal_Parms.Healer = Healer;
	AdjustedHeal_Parms.DamageType = DamageType;
	AdjustedHeal_Parms.bIsFirstAid = bIsFirstAid;

	this->ProcessEvent ( pFnAdjustedHeal, &AdjustedHeal_Parms, NULL );

	return AdjustedHeal_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.CanHeal
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            HealAmount                     ( CPF_Parm )

bool ANetherPawn::CanHeal ( int HealAmount )
{
	static UFunction* pFnCanHeal = NULL;

	if ( ! pFnCanHeal )
		pFnCanHeal = (UFunction*) UObject::GObjObjects()->Data[ 77682 ];

	ANetherPawn_execCanHeal_Parms CanHeal_Parms;
	CanHeal_Parms.HealAmount = HealAmount;

	this->ProcessEvent ( pFnCanHeal, &CanHeal_Parms, NULL );

	return CanHeal_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.AdjustDamage
// [0x00420002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            InDamage                       ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ANetherPawn::AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = (UFunction*) UObject::GObjObjects()->Data[ 77673 ];

	ANetherPawn_execAdjustDamage_Parms AdjustDamage_Parms;
	AdjustDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDamage_Parms.DamageType = DamageType;
	memcpy ( &AdjustDamage_Parms.HitInfo, &HitInfo, 0x28 );
	AdjustDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );

	if ( InDamage )
		*InDamage = AdjustDamage_Parms.InDamage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDamage_Parms.Momentum, 0xC );
};

// Function NetherGame.NetherPawn.UpdateHunger
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPawn::UpdateHunger ( float DeltaTime )
{
	static UFunction* pFnUpdateHunger = NULL;

	if ( ! pFnUpdateHunger )
		pFnUpdateHunger = (UFunction*) UObject::GObjObjects()->Data[ 77670 ];

	ANetherPawn_execUpdateHunger_Parms UpdateHunger_Parms;
	UpdateHunger_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateHunger, &UpdateHunger_Parms, NULL );
};

// Function NetherGame.NetherPawn.ClientSetStamina
// [0x01020142] 
// Parameters infos:
// float                          InStamina                      ( CPF_Parm )

void ANetherPawn::ClientSetStamina ( float InStamina )
{
	static UFunction* pFnClientSetStamina = NULL;

	if ( ! pFnClientSetStamina )
		pFnClientSetStamina = (UFunction*) UObject::GObjObjects()->Data[ 77668 ];

	ANetherPawn_execClientSetStamina_Parms ClientSetStamina_Parms;
	ClientSetStamina_Parms.InStamina = InStamina;

	this->ProcessEvent ( pFnClientSetStamina, &ClientSetStamina_Parms, NULL );
};

// Function NetherGame.NetherPawn.ClientSetHunger
// [0x01020142] 
// Parameters infos:
// float                          InHunger                       ( CPF_Parm )

void ANetherPawn::ClientSetHunger ( float InHunger )
{
	static UFunction* pFnClientSetHunger = NULL;

	if ( ! pFnClientSetHunger )
		pFnClientSetHunger = (UFunction*) UObject::GObjObjects()->Data[ 77666 ];

	ANetherPawn_execClientSetHunger_Parms ClientSetHunger_Parms;
	ClientSetHunger_Parms.InHunger = InHunger;

	this->ProcessEvent ( pFnClientSetHunger, &ClientSetHunger_Parms, NULL );
};

// Function NetherGame.NetherPawn.AttemptDrainHunger
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Amount                         ( CPF_Parm )

bool ANetherPawn::AttemptDrainHunger ( float Amount )
{
	static UFunction* pFnAttemptDrainHunger = NULL;

	if ( ! pFnAttemptDrainHunger )
		pFnAttemptDrainHunger = (UFunction*) UObject::GObjObjects()->Data[ 77661 ];

	ANetherPawn_execAttemptDrainHunger_Parms AttemptDrainHunger_Parms;
	AttemptDrainHunger_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAttemptDrainHunger, &AttemptDrainHunger_Parms, NULL );

	return AttemptDrainHunger_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.AttemptAddHunger
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Amount                         ( CPF_Parm )

bool ANetherPawn::AttemptAddHunger ( float Amount )
{
	static UFunction* pFnAttemptAddHunger = NULL;

	if ( ! pFnAttemptAddHunger )
		pFnAttemptAddHunger = (UFunction*) UObject::GObjObjects()->Data[ 77654 ];

	ANetherPawn_execAttemptAddHunger_Parms AttemptAddHunger_Parms;
	AttemptAddHunger_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAttemptAddHunger, &AttemptAddHunger_Parms, NULL );

	return AttemptAddHunger_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.IsStarving
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherPawn::IsStarving ( )
{
	static UFunction* pFnIsStarving = NULL;

	if ( ! pFnIsStarving )
		pFnIsStarving = (UFunction*) UObject::GObjObjects()->Data[ 77652 ];

	ANetherPawn_execIsStarving_Parms IsStarving_Parms;

	this->ProcessEvent ( pFnIsStarving, &IsStarving_Parms, NULL );

	return IsStarving_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.GetHungerAmountMax
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPawn::GetHungerAmountMax ( )
{
	static UFunction* pFnGetHungerAmountMax = NULL;

	if ( ! pFnGetHungerAmountMax )
		pFnGetHungerAmountMax = (UFunction*) UObject::GObjObjects()->Data[ 74066 ];

	ANetherPawn_execGetHungerAmountMax_Parms GetHungerAmountMax_Parms;

	this->ProcessEvent ( pFnGetHungerAmountMax, &GetHungerAmountMax_Parms, NULL );

	return GetHungerAmountMax_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.GetHungerAmountCurrent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPawn::GetHungerAmountCurrent ( )
{
	static UFunction* pFnGetHungerAmountCurrent = NULL;

	if ( ! pFnGetHungerAmountCurrent )
		pFnGetHungerAmountCurrent = (UFunction*) UObject::GObjObjects()->Data[ 74064 ];

	ANetherPawn_execGetHungerAmountCurrent_Parms GetHungerAmountCurrent_Parms;

	this->ProcessEvent ( pFnGetHungerAmountCurrent, &GetHungerAmountCurrent_Parms, NULL );

	return GetHungerAmountCurrent_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.DebugActivateSpeedGod
// [0x00020101] ( FUNC_Final )
// Parameters infos:

void ANetherPawn::DebugActivateSpeedGod ( )
{
	static UFunction* pFnDebugActivateSpeedGod = NULL;

	if ( ! pFnDebugActivateSpeedGod )
		pFnDebugActivateSpeedGod = (UFunction*) UObject::GObjObjects()->Data[ 73547 ];

	ANetherPawn_execDebugActivateSpeedGod_Parms DebugActivateSpeedGod_Parms;

	this->ProcessEvent ( pFnDebugActivateSpeedGod, &DebugActivateSpeedGod_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetSprintSpeed
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherPawn::GetSprintSpeed ( )
{
	static UFunction* pFnGetSprintSpeed = NULL;

	if ( ! pFnGetSprintSpeed )
		pFnGetSprintSpeed = (UFunction*) UObject::GObjObjects()->Data[ 75574 ];

	ANetherPawn_execGetSprintSpeed_Parms GetSprintSpeed_Parms;

	this->ProcessEvent ( pFnGetSprintSpeed, &GetSprintSpeed_Parms, NULL );

	return GetSprintSpeed_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.ClientSetHealthSound
// [0x010201C2] 
// Parameters infos:
// struct FName                   StateName                      ( CPF_Parm )

void ANetherPawn::ClientSetHealthSound ( struct FName StateName )
{
	static UFunction* pFnClientSetHealthSound = NULL;

	if ( ! pFnClientSetHealthSound )
		pFnClientSetHealthSound = (UFunction*) UObject::GObjObjects()->Data[ 77648 ];

	ANetherPawn_execClientSetHealthSound_Parms ClientSetHealthSound_Parms;
	memcpy ( &ClientSetHealthSound_Parms.StateName, &StateName, 0x8 );

	this->ProcessEvent ( pFnClientSetHealthSound, &ClientSetHealthSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.UpdateHealthSound
// [0x00020002] 
// Parameters infos:

void ANetherPawn::UpdateHealthSound ( )
{
	static UFunction* pFnUpdateHealthSound = NULL;

	if ( ! pFnUpdateHealthSound )
		pFnUpdateHealthSound = (UFunction*) UObject::GObjObjects()->Data[ 77646 ];

	ANetherPawn_execUpdateHealthSound_Parms UpdateHealthSound_Parms;

	this->ProcessEvent ( pFnUpdateHealthSound, &UpdateHealthSound_Parms, NULL );
};

// Function NetherGame.NetherPawn.SetHealth
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            NewHealth                      ( CPF_Parm )

void ANetherPawn::eventSetHealth ( int NewHealth )
{
	static UFunction* pFnSetHealth = NULL;

	if ( ! pFnSetHealth )
		pFnSetHealth = (UFunction*) UObject::GObjObjects()->Data[ 77643 ];

	ANetherPawn_eventSetHealth_Parms SetHealth_Parms;
	SetHealth_Parms.NewHealth = NewHealth;

	this->ProcessEvent ( pFnSetHealth, &SetHealth_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetHealthMax
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPawn::GetHealthMax ( )
{
	static UFunction* pFnGetHealthMax = NULL;

	if ( ! pFnGetHealthMax )
		pFnGetHealthMax = (UFunction*) UObject::GObjObjects()->Data[ 74089 ];

	ANetherPawn_execGetHealthMax_Parms GetHealthMax_Parms;

	this->ProcessEvent ( pFnGetHealthMax, &GetHealthMax_Parms, NULL );

	return GetHealthMax_Parms.ReturnValue;
};

// Function NetherGame.NetherPawn.UpdateAggroSplash
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherPawn::UpdateAggroSplash ( float DeltaTime )
{
	static UFunction* pFnUpdateAggroSplash = NULL;

	if ( ! pFnUpdateAggroSplash )
		pFnUpdateAggroSplash = (UFunction*) UObject::GObjObjects()->Data[ 77641 ];

	ANetherPawn_execUpdateAggroSplash_Parms UpdateAggroSplash_Parms;
	UpdateAggroSplash_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateAggroSplash, &UpdateAggroSplash_Parms, NULL );
};

// Function NetherGame.NetherPawn.NotifyAggroSplashed
// [0x00020002] 
// Parameters infos:
// float                          SplashDuration                 ( CPF_Parm )
// float                          SplashStrength                 ( CPF_Parm )

void ANetherPawn::NotifyAggroSplashed ( float SplashDuration, float SplashStrength )
{
	static UFunction* pFnNotifyAggroSplashed = NULL;

	if ( ! pFnNotifyAggroSplashed )
		pFnNotifyAggroSplashed = (UFunction*) UObject::GObjObjects()->Data[ 77638 ];

	ANetherPawn_execNotifyAggroSplashed_Parms NotifyAggroSplashed_Parms;
	NotifyAggroSplashed_Parms.SplashDuration = SplashDuration;
	NotifyAggroSplashed_Parms.SplashStrength = SplashStrength;

	this->ProcessEvent ( pFnNotifyAggroSplashed, &NotifyAggroSplashed_Parms, NULL );
};

// Function NetherGame.NetherPawn.GetFlashlight
// [0x00020002] 
// Parameters infos:

void ANetherPawn::GetFlashlight ( )
{
	static UFunction* pFnGetFlashlight = NULL;

	if ( ! pFnGetFlashlight )
		pFnGetFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 77637 ];

	ANetherPawn_execGetFlashlight_Parms GetFlashlight_Parms;

	this->ProcessEvent ( pFnGetFlashlight, &GetFlashlight_Parms, NULL );
};

// Function NetherGame.NetherPawn.ServerToggleFlashlight
// [0x002200C2] 
// Parameters infos:

void ANetherPawn::ServerToggleFlashlight ( )
{
	static UFunction* pFnServerToggleFlashlight = NULL;

	if ( ! pFnServerToggleFlashlight )
		pFnServerToggleFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 77636 ];

	ANetherPawn_execServerToggleFlashlight_Parms ServerToggleFlashlight_Parms;

	this->ProcessEvent ( pFnServerToggleFlashlight, &ServerToggleFlashlight_Parms, NULL );
};

// Function NetherGame.NetherPawn.ToggleFlashlight
// [0x00020102] 
// Parameters infos:

void ANetherPawn::ToggleFlashlight ( )
{
	static UFunction* pFnToggleFlashlight = NULL;

	if ( ! pFnToggleFlashlight )
		pFnToggleFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 77635 ];

	ANetherPawn_execToggleFlashlight_Parms ToggleFlashlight_Parms;

	this->ProcessEvent ( pFnToggleFlashlight, &ToggleFlashlight_Parms, NULL );
};

// Function NetherGame.NetherPawn.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ANetherPawn::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 77630 ];

	ANetherPawn_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function NetherGame.NetherEnemyLootTable.AwardLootTable
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANetherPawn*             PawnToAward                    ( CPF_Parm )
// struct FVector                 DropLocation                   ( CPF_Parm )

void UNetherEnemyLootTable::AwardLootTable ( class ANetherPawn* PawnToAward, struct FVector DropLocation )
{
	static UFunction* pFnAwardLootTable = NULL;

	if ( ! pFnAwardLootTable )
		pFnAwardLootTable = (UFunction*) UObject::GObjObjects()->Data[ 73675 ];

	UNetherEnemyLootTable_execAwardLootTable_Parms AwardLootTable_Parms;
	AwardLootTable_Parms.PawnToAward = PawnToAward;
	memcpy ( &AwardLootTable_Parms.DropLocation, &DropLocation, 0xC );

	pFnAwardLootTable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAwardLootTable, &AwardLootTable_Parms, NULL );

	pFnAwardLootTable->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherEnemyLootTable.GetSpawnManager
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ANetherSpawnManager_Pickups* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherSpawnManager_Pickups* UNetherEnemyLootTable::eventGetSpawnManager ( )
{
	static UFunction* pFnGetSpawnManager = NULL;

	if ( ! pFnGetSpawnManager )
		pFnGetSpawnManager = (UFunction*) UObject::GObjObjects()->Data[ 73673 ];

	UNetherEnemyLootTable_eventGetSpawnManager_Parms GetSpawnManager_Parms;

	this->ProcessEvent ( pFnGetSpawnManager, &GetSpawnManager_Parms, NULL );

	return GetSpawnManager_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnGroup.InitSpawnGroup
// [0x00020002] 
// Parameters infos:
// class ANetherTerritoryVolume*  VolumeOwner                    ( CPF_Parm )

void UNetherSpawnGroup::InitSpawnGroup ( class ANetherTerritoryVolume* VolumeOwner )
{
	static UFunction* pFnInitSpawnGroup = NULL;

	if ( ! pFnInitSpawnGroup )
		pFnInitSpawnGroup = (UFunction*) UObject::GObjObjects()->Data[ 78753 ];

	UNetherSpawnGroup_execInitSpawnGroup_Parms InitSpawnGroup_Parms;
	InitSpawnGroup_Parms.VolumeOwner = VolumeOwner;

	this->ProcessEvent ( pFnInitSpawnGroup, &InitSpawnGroup_Parms, NULL );
};

// Function NetherGame.NetherSpawnGroup_Enemies.OnSpawnerEnemyRecycled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// unsigned long                  bEnemyDied                     ( CPF_Parm )

void UNetherSpawnGroup_Enemies::OnSpawnerEnemyRecycled ( class ANPawnEnemy* Enemy, unsigned long bEnemyDied )
{
	static UFunction* pFnOnSpawnerEnemyRecycled = NULL;

	if ( ! pFnOnSpawnerEnemyRecycled )
		pFnOnSpawnerEnemyRecycled = (UFunction*) UObject::GObjObjects()->Data[ 78772 ];

	UNetherSpawnGroup_Enemies_execOnSpawnerEnemyRecycled_Parms OnSpawnerEnemyRecycled_Parms;
	OnSpawnerEnemyRecycled_Parms.Enemy = Enemy;
	OnSpawnerEnemyRecycled_Parms.bEnemyDied = bEnemyDied;

	pFnOnSpawnerEnemyRecycled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSpawnerEnemyRecycled, &OnSpawnerEnemyRecycled_Parms, NULL );

	pFnOnSpawnerEnemyRecycled->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnGroup_Enemies.OnSpawnerEnemyDied
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// class ANetherPawn*             Killer                         ( CPF_Parm )

void UNetherSpawnGroup_Enemies::OnSpawnerEnemyDied ( class ANPawnEnemy* Enemy, class ANetherPawn* Killer )
{
	static UFunction* pFnOnSpawnerEnemyDied = NULL;

	if ( ! pFnOnSpawnerEnemyDied )
		pFnOnSpawnerEnemyDied = (UFunction*) UObject::GObjObjects()->Data[ 78769 ];

	UNetherSpawnGroup_Enemies_execOnSpawnerEnemyDied_Parms OnSpawnerEnemyDied_Parms;
	OnSpawnerEnemyDied_Parms.Enemy = Enemy;
	OnSpawnerEnemyDied_Parms.Killer = Killer;

	pFnOnSpawnerEnemyDied->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSpawnerEnemyDied, &OnSpawnerEnemyDied_Parms, NULL );

	pFnOnSpawnerEnemyDied->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnGroup_Enemies.InitSpawnGroup
// [0x00020002] 
// Parameters infos:
// class ANetherTerritoryVolume*  VolumeOwner                    ( CPF_Parm )

void UNetherSpawnGroup_Enemies::InitSpawnGroup ( class ANetherTerritoryVolume* VolumeOwner )
{
	static UFunction* pFnInitSpawnGroup = NULL;

	if ( ! pFnInitSpawnGroup )
		pFnInitSpawnGroup = (UFunction*) UObject::GObjObjects()->Data[ 78759 ];

	UNetherSpawnGroup_Enemies_execInitSpawnGroup_Parms InitSpawnGroup_Parms;
	InitSpawnGroup_Parms.VolumeOwner = VolumeOwner;

	this->ProcessEvent ( pFnInitSpawnGroup, &InitSpawnGroup_Parms, NULL );
};

// Function NetherGame.NetherSpawnGroup_Pickups.OnSpawnerPickupRecycled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AUDKPickupFactory*       PickupFactory                  ( CPF_Parm )
// unsigned long                  bWasPickedUp                   ( CPF_Parm )

void UNetherSpawnGroup_Pickups::OnSpawnerPickupRecycled ( class AUDKPickupFactory* PickupFactory, unsigned long bWasPickedUp )
{
	static UFunction* pFnOnSpawnerPickupRecycled = NULL;

	if ( ! pFnOnSpawnerPickupRecycled )
		pFnOnSpawnerPickupRecycled = (UFunction*) UObject::GObjObjects()->Data[ 78785 ];

	UNetherSpawnGroup_Pickups_execOnSpawnerPickupRecycled_Parms OnSpawnerPickupRecycled_Parms;
	OnSpawnerPickupRecycled_Parms.PickupFactory = PickupFactory;
	OnSpawnerPickupRecycled_Parms.bWasPickedUp = bWasPickedUp;

	pFnOnSpawnerPickupRecycled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSpawnerPickupRecycled, &OnSpawnerPickupRecycled_Parms, NULL );

	pFnOnSpawnerPickupRecycled->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnGroup_Pickups.InitSpawnGroup
// [0x00020002] 
// Parameters infos:
// class ANetherTerritoryVolume*  VolumeOwner                    ( CPF_Parm )

void UNetherSpawnGroup_Pickups::InitSpawnGroup ( class ANetherTerritoryVolume* VolumeOwner )
{
	static UFunction* pFnInitSpawnGroup = NULL;

	if ( ! pFnInitSpawnGroup )
		pFnInitSpawnGroup = (UFunction*) UObject::GObjObjects()->Data[ 78779 ];

	UNetherSpawnGroup_Pickups_execInitSpawnGroup_Parms InitSpawnGroup_Parms;
	InitSpawnGroup_Parms.VolumeOwner = VolumeOwner;

	this->ProcessEvent ( pFnInitSpawnGroup, &InitSpawnGroup_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager.ValidateTerritoryVolumes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ANetherSpawnManager::ValidateTerritoryVolumes ( )
{
	static UFunction* pFnValidateTerritoryVolumes = NULL;

	if ( ! pFnValidateTerritoryVolumes )
		pFnValidateTerritoryVolumes = (UFunction*) UObject::GObjObjects()->Data[ 73544 ];

	ANetherSpawnManager_execValidateTerritoryVolumes_Parms ValidateTerritoryVolumes_Parms;

	pFnValidateTerritoryVolumes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidateTerritoryVolumes, &ValidateTerritoryVolumes_Parms, NULL );

	pFnValidateTerritoryVolumes->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnManager.LogSpawnDebug
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 InLog                          ( CPF_Parm | CPF_NeedCtorLink )

void ANetherSpawnManager::LogSpawnDebug ( struct FString InLog )
{
	static UFunction* pFnLogSpawnDebug = NULL;

	if ( ! pFnLogSpawnDebug )
		pFnLogSpawnDebug = (UFunction*) UObject::GObjObjects()->Data[ 78823 ];

	ANetherSpawnManager_execLogSpawnDebug_Parms LogSpawnDebug_Parms;
	memcpy ( &LogSpawnDebug_Parms.InLog, &InLog, 0x10 );

	pFnLogSpawnDebug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogSpawnDebug, &LogSpawnDebug_Parms, NULL );

	pFnLogSpawnDebug->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnManager.GetMaxActiveInstances
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherSpawnManager::GetMaxActiveInstances ( )
{
	static UFunction* pFnGetMaxActiveInstances = NULL;

	if ( ! pFnGetMaxActiveInstances )
		pFnGetMaxActiveInstances = (UFunction*) UObject::GObjObjects()->Data[ 78821 ];

	ANetherSpawnManager_execGetMaxActiveInstances_Parms GetMaxActiveInstances_Parms;

	this->ProcessEvent ( pFnGetMaxActiveInstances, &GetMaxActiveInstances_Parms, NULL );

	return GetMaxActiveInstances_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnManager.AlterMaxAllocation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  ForceMaxAllocation             ( CPF_Parm )
// int                            NewMaxActiveInstances          ( CPF_Parm )

void ANetherSpawnManager::AlterMaxAllocation ( unsigned long ForceMaxAllocation, int NewMaxActiveInstances )
{
	static UFunction* pFnAlterMaxAllocation = NULL;

	if ( ! pFnAlterMaxAllocation )
		pFnAlterMaxAllocation = (UFunction*) UObject::GObjObjects()->Data[ 76143 ];

	ANetherSpawnManager_execAlterMaxAllocation_Parms AlterMaxAllocation_Parms;
	AlterMaxAllocation_Parms.ForceMaxAllocation = ForceMaxAllocation;
	AlterMaxAllocation_Parms.NewMaxActiveInstances = NewMaxActiveInstances;

	this->ProcessEvent ( pFnAlterMaxAllocation, &AlterMaxAllocation_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager.ToggleSpawnDebug
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bPrintToScreen                 ( CPF_Parm )

void ANetherSpawnManager::ToggleSpawnDebug ( unsigned long bPrintToScreen )
{
	static UFunction* pFnToggleSpawnDebug = NULL;

	if ( ! pFnToggleSpawnDebug )
		pFnToggleSpawnDebug = (UFunction*) UObject::GObjObjects()->Data[ 73496 ];

	ANetherSpawnManager_execToggleSpawnDebug_Parms ToggleSpawnDebug_Parms;
	ToggleSpawnDebug_Parms.bPrintToScreen = bPrintToScreen;

	this->ProcessEvent ( pFnToggleSpawnDebug, &ToggleSpawnDebug_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager.CacheDayNightManager
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ANetherSpawnManager::CacheDayNightManager ( )
{
	static UFunction* pFnCacheDayNightManager = NULL;

	if ( ! pFnCacheDayNightManager )
		pFnCacheDayNightManager = (UFunction*) UObject::GObjObjects()->Data[ 78816 ];

	ANetherSpawnManager_execCacheDayNightManager_Parms CacheDayNightManager_Parms;

	this->ProcessEvent ( pFnCacheDayNightManager, &CacheDayNightManager_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANetherSpawnManager::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 78815 ];

	ANetherSpawnManager_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager.AddTerritoryVolume
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherTerritoryVolume*  Territory                      ( CPF_Parm )

void ANetherSpawnManager::AddTerritoryVolume ( class ANetherTerritoryVolume* Territory )
{
	static UFunction* pFnAddTerritoryVolume = NULL;

	if ( ! pFnAddTerritoryVolume )
		pFnAddTerritoryVolume = (UFunction*) UObject::GObjObjects()->Data[ 78813 ];

	ANetherSpawnManager_execAddTerritoryVolume_Parms AddTerritoryVolume_Parms;
	AddTerritoryVolume_Parms.Territory = Territory;

	this->ProcessEvent ( pFnAddTerritoryVolume, &AddTerritoryVolume_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager_Enemies.OnEnemyDeathAnimEnded
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANetherSpawnManager_Enemies::OnEnemyDeathAnimEnded ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnOnEnemyDeathAnimEnded = NULL;

	if ( ! pFnOnEnemyDeathAnimEnded )
		pFnOnEnemyDeathAnimEnded = (UFunction*) UObject::GObjObjects()->Data[ 78843 ];

	ANetherSpawnManager_Enemies_execOnEnemyDeathAnimEnded_Parms OnEnemyDeathAnimEnded_Parms;
	OnEnemyDeathAnimEnded_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnOnEnemyDeathAnimEnded, &OnEnemyDeathAnimEnded_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager_Enemies.OnEnemyDeSpawnAnimEnded
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANetherSpawnManager_Enemies::OnEnemyDeSpawnAnimEnded ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnOnEnemyDeSpawnAnimEnded = NULL;

	if ( ! pFnOnEnemyDeSpawnAnimEnded )
		pFnOnEnemyDeSpawnAnimEnded = (UFunction*) UObject::GObjObjects()->Data[ 78841 ];

	ANetherSpawnManager_Enemies_execOnEnemyDeSpawnAnimEnded_Parms OnEnemyDeSpawnAnimEnded_Parms;
	OnEnemyDeSpawnAnimEnded_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnOnEnemyDeSpawnAnimEnded, &OnEnemyDeSpawnAnimEnded_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager_Enemies.RetrieveAndInitializeEnemy
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ANPawnEnemy*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyType                      ( CPF_Parm )

class ANPawnEnemy* ANetherSpawnManager_Enemies::eventRetrieveAndInitializeEnemy ( class UClass* EnemyType )
{
	static UFunction* pFnRetrieveAndInitializeEnemy = NULL;

	if ( ! pFnRetrieveAndInitializeEnemy )
		pFnRetrieveAndInitializeEnemy = (UFunction*) UObject::GObjObjects()->Data[ 78837 ];

	ANetherSpawnManager_Enemies_eventRetrieveAndInitializeEnemy_Parms RetrieveAndInitializeEnemy_Parms;
	RetrieveAndInitializeEnemy_Parms.EnemyType = EnemyType;

	this->ProcessEvent ( pFnRetrieveAndInitializeEnemy, &RetrieveAndInitializeEnemy_Parms, NULL );

	return RetrieveAndInitializeEnemy_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnManager_Enemies.ReturnAndDisableEnemy
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// unsigned long                  bEnemyDied                     ( CPF_Parm )

void ANetherSpawnManager_Enemies::ReturnAndDisableEnemy ( class ANPawnEnemy* Enemy, unsigned long bEnemyDied )
{
	static UFunction* pFnReturnAndDisableEnemy = NULL;

	if ( ! pFnReturnAndDisableEnemy )
		pFnReturnAndDisableEnemy = (UFunction*) UObject::GObjObjects()->Data[ 78834 ];

	ANetherSpawnManager_Enemies_execReturnAndDisableEnemy_Parms ReturnAndDisableEnemy_Parms;
	ReturnAndDisableEnemy_Parms.Enemy = Enemy;
	ReturnAndDisableEnemy_Parms.bEnemyDied = bEnemyDied;

	this->ProcessEvent ( pFnReturnAndDisableEnemy, &ReturnAndDisableEnemy_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager_Enemies.GetPooledEnemy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANPawnEnemy*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EnemyType                      ( CPF_Parm )

class ANPawnEnemy* ANetherSpawnManager_Enemies::GetPooledEnemy ( class UClass* EnemyType )
{
	static UFunction* pFnGetPooledEnemy = NULL;

	if ( ! pFnGetPooledEnemy )
		pFnGetPooledEnemy = (UFunction*) UObject::GObjObjects()->Data[ 78831 ];

	ANetherSpawnManager_Enemies_execGetPooledEnemy_Parms GetPooledEnemy_Parms;
	GetPooledEnemy_Parms.EnemyType = EnemyType;

	pFnGetPooledEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledEnemy, &GetPooledEnemy_Parms, NULL );

	pFnGetPooledEnemy->FunctionFlags |= 0x400;

	return GetPooledEnemy_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnManager_Enemies.ReturnEnemyToPool
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANetherSpawnManager_Enemies::ReturnEnemyToPool ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnReturnEnemyToPool = NULL;

	if ( ! pFnReturnEnemyToPool )
		pFnReturnEnemyToPool = (UFunction*) UObject::GObjObjects()->Data[ 78829 ];

	ANetherSpawnManager_Enemies_execReturnEnemyToPool_Parms ReturnEnemyToPool_Parms;
	ReturnEnemyToPool_Parms.Enemy = Enemy;

	pFnReturnEnemyToPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReturnEnemyToPool, &ReturnEnemyToPool_Parms, NULL );

	pFnReturnEnemyToPool->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnManager_Pickups.RetrieveAndInitializePickup
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AUDKPickupFactory*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PickupType                     ( CPF_Parm )
// float                          AutoRecycleTimer               ( CPF_OptionalParm | CPF_Parm )

class AUDKPickupFactory* ANetherSpawnManager_Pickups::eventRetrieveAndInitializePickup ( class UClass* PickupType, float AutoRecycleTimer )
{
	static UFunction* pFnRetrieveAndInitializePickup = NULL;

	if ( ! pFnRetrieveAndInitializePickup )
		pFnRetrieveAndInitializePickup = (UFunction*) UObject::GObjObjects()->Data[ 78858 ];

	ANetherSpawnManager_Pickups_eventRetrieveAndInitializePickup_Parms RetrieveAndInitializePickup_Parms;
	RetrieveAndInitializePickup_Parms.PickupType = PickupType;
	RetrieveAndInitializePickup_Parms.AutoRecycleTimer = AutoRecycleTimer;

	this->ProcessEvent ( pFnRetrieveAndInitializePickup, &RetrieveAndInitializePickup_Parms, NULL );

	return RetrieveAndInitializePickup_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnManager_Pickups.ReturnPickupActor
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANPickupFactory*         PickupActor                    ( CPF_Parm )
// unsigned long                  bWasPickedUp                   ( CPF_Parm )

void ANetherSpawnManager_Pickups::ReturnPickupActor ( class ANPickupFactory* PickupActor, unsigned long bWasPickedUp )
{
	static UFunction* pFnReturnPickupActor = NULL;

	if ( ! pFnReturnPickupActor )
		pFnReturnPickupActor = (UFunction*) UObject::GObjObjects()->Data[ 78854 ];

	ANetherSpawnManager_Pickups_execReturnPickupActor_Parms ReturnPickupActor_Parms;
	ReturnPickupActor_Parms.PickupActor = PickupActor;
	ReturnPickupActor_Parms.bWasPickedUp = bWasPickedUp;

	this->ProcessEvent ( pFnReturnPickupActor, &ReturnPickupActor_Parms, NULL );
};

// Function NetherGame.NetherSpawnManager_Pickups.GetPooledPickupActor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AUDKPickupFactory*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PickupType                     ( CPF_Parm )

class AUDKPickupFactory* ANetherSpawnManager_Pickups::GetPooledPickupActor ( class UClass* PickupType )
{
	static UFunction* pFnGetPooledPickupActor = NULL;

	if ( ! pFnGetPooledPickupActor )
		pFnGetPooledPickupActor = (UFunction*) UObject::GObjObjects()->Data[ 78851 ];

	ANetherSpawnManager_Pickups_execGetPooledPickupActor_Parms GetPooledPickupActor_Parms;
	GetPooledPickupActor_Parms.PickupType = PickupType;

	pFnGetPooledPickupActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledPickupActor, &GetPooledPickupActor_Parms, NULL );

	pFnGetPooledPickupActor->FunctionFlags |= 0x400;

	return GetPooledPickupActor_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnManager_Pickups.ReturnPickupActorToPool
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AUDKPickupFactory*       PickupActor                    ( CPF_Parm )

void ANetherSpawnManager_Pickups::ReturnPickupActorToPool ( class AUDKPickupFactory* PickupActor )
{
	static UFunction* pFnReturnPickupActorToPool = NULL;

	if ( ! pFnReturnPickupActorToPool )
		pFnReturnPickupActorToPool = (UFunction*) UObject::GObjObjects()->Data[ 78849 ];

	ANetherSpawnManager_Pickups_execReturnPickupActorToPool_Parms ReturnPickupActorToPool_Parms;
	ReturnPickupActorToPool_Parms.PickupActor = PickupActor;

	pFnReturnPickupActorToPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReturnPickupActorToPool, &ReturnPickupActorToPool_Parms, NULL );

	pFnReturnPickupActorToPool->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnPoint.IsOnCooldown
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherSpawnPoint::IsOnCooldown ( )
{
	static UFunction* pFnIsOnCooldown = NULL;

	if ( ! pFnIsOnCooldown )
		pFnIsOnCooldown = (UFunction*) UObject::GObjObjects()->Data[ 78868 ];

	ANetherSpawnPoint_execIsOnCooldown_Parms IsOnCooldown_Parms;

	pFnIsOnCooldown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnCooldown, &IsOnCooldown_Parms, NULL );

	pFnIsOnCooldown->FunctionFlags |= 0x400;

	return IsOnCooldown_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnPoint.AssignParentGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UNetherSpawnGroup*       ParentGroup                    ( CPF_Parm )

void ANetherSpawnPoint::AssignParentGroup ( class UNetherSpawnGroup* ParentGroup )
{
	static UFunction* pFnAssignParentGroup = NULL;

	if ( ! pFnAssignParentGroup )
		pFnAssignParentGroup = (UFunction*) UObject::GObjObjects()->Data[ 78763 ];

	ANetherSpawnPoint_execAssignParentGroup_Parms AssignParentGroup_Parms;
	AssignParentGroup_Parms.ParentGroup = ParentGroup;

	pFnAssignParentGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAssignParentGroup, &AssignParentGroup_Parms, NULL );

	pFnAssignParentGroup->FunctionFlags |= 0x400;
};

// Function NetherGame.NetherSpawnPoint.BeginCooldown
// [0x00080002] 
// Parameters infos:
// float                          CooldownDuration               ( CPF_Parm )

void ANetherSpawnPoint::BeginCooldown ( float CooldownDuration )
{
	static UFunction* pFnBeginCooldown = NULL;

	if ( ! pFnBeginCooldown )
		pFnBeginCooldown = (UFunction*) UObject::GObjObjects()->Data[ 78865 ];

	ANetherSpawnPoint_execBeginCooldown_Parms BeginCooldown_Parms;
	BeginCooldown_Parms.CooldownDuration = CooldownDuration;

	this->ProcessEvent ( pFnBeginCooldown, &BeginCooldown_Parms, NULL );
};

// Function NetherGame.NetherSpawnPoint_Enemy.OnTetheredEnemyRecycled
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// unsigned long                  bEnemyDied                     ( CPF_Parm )

void ANetherSpawnPoint_Enemy::OnTetheredEnemyRecycled ( class ANPawnEnemy* Enemy, unsigned long bEnemyDied )
{
	static UFunction* pFnOnTetheredEnemyRecycled = NULL;

	if ( ! pFnOnTetheredEnemyRecycled )
		pFnOnTetheredEnemyRecycled = (UFunction*) UObject::GObjObjects()->Data[ 78885 ];

	ANetherSpawnPoint_Enemy_execOnTetheredEnemyRecycled_Parms OnTetheredEnemyRecycled_Parms;
	OnTetheredEnemyRecycled_Parms.Enemy = Enemy;
	OnTetheredEnemyRecycled_Parms.bEnemyDied = bEnemyDied;

	this->ProcessEvent ( pFnOnTetheredEnemyRecycled, &OnTetheredEnemyRecycled_Parms, NULL );
};

// Function NetherGame.NetherSpawnPoint_Enemy.OnTetheredEnemyDied
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// class ANetherPawn*             Killer                         ( CPF_Parm )

void ANetherSpawnPoint_Enemy::OnTetheredEnemyDied ( class ANPawnEnemy* Enemy, class ANetherPawn* Killer )
{
	static UFunction* pFnOnTetheredEnemyDied = NULL;

	if ( ! pFnOnTetheredEnemyDied )
		pFnOnTetheredEnemyDied = (UFunction*) UObject::GObjObjects()->Data[ 78882 ];

	ANetherSpawnPoint_Enemy_execOnTetheredEnemyDied_Parms OnTetheredEnemyDied_Parms;
	OnTetheredEnemyDied_Parms.Enemy = Enemy;
	OnTetheredEnemyDied_Parms.Killer = Killer;

	this->ProcessEvent ( pFnOnTetheredEnemyDied, &OnTetheredEnemyDied_Parms, NULL );
};

// Function NetherGame.NetherSpawnPoint_Enemy.AttemptDeSpawnTetheredEnemy
// [0x00420803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NoDespawnMessage               ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ANetherSpawnPoint_Enemy::eventAttemptDeSpawnTetheredEnemy ( struct FString* NoDespawnMessage )
{
	static UFunction* pFnAttemptDeSpawnTetheredEnemy = NULL;

	if ( ! pFnAttemptDeSpawnTetheredEnemy )
		pFnAttemptDeSpawnTetheredEnemy = (UFunction*) UObject::GObjObjects()->Data[ 78879 ];

	ANetherSpawnPoint_Enemy_eventAttemptDeSpawnTetheredEnemy_Parms AttemptDeSpawnTetheredEnemy_Parms;

	this->ProcessEvent ( pFnAttemptDeSpawnTetheredEnemy, &AttemptDeSpawnTetheredEnemy_Parms, NULL );

	if ( NoDespawnMessage )
		memcpy ( NoDespawnMessage, &AttemptDeSpawnTetheredEnemy_Parms.NoDespawnMessage, 0x10 );

	return AttemptDeSpawnTetheredEnemy_Parms.ReturnValue;
};

// Function NetherGame.NetherSpawnPoint_Enemy.SpawnEnemy
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )
// unsigned long                  bBeginCooldown                 ( CPF_OptionalParm | CPF_Parm )

void ANetherSpawnPoint_Enemy::eventSpawnEnemy ( class ANPawnEnemy* Enemy, unsigned long bBeginCooldown )
{
	static UFunction* pFnSpawnEnemy = NULL;

	if ( ! pFnSpawnEnemy )
		pFnSpawnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 78876 ];

	ANetherSpawnPoint_Enemy_eventSpawnEnemy_Parms SpawnEnemy_Parms;
	SpawnEnemy_Parms.Enemy = Enemy;
	SpawnEnemy_Parms.bBeginCooldown = bBeginCooldown;

	this->ProcessEvent ( pFnSpawnEnemy, &SpawnEnemy_Parms, NULL );
};

// Function NetherGame.NetherSpawnPoint_Pickup.OnNPickupRecycled
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ANPickupFactory*         NetherPickupFactory            ( CPF_Parm )
// unsigned long                  bWasPickedUp                   ( CPF_Parm )

void ANetherSpawnPoint_Pickup::OnNPickupRecycled ( class ANPickupFactory* NetherPickupFactory, unsigned long bWasPickedUp )
{
	static UFunction* pFnOnNPickupRecycled = NULL;

	if ( ! pFnOnNPickupRecycled )
		pFnOnNPickupRecycled = (UFunction*) UObject::GObjObjects()->Data[ 78897 ];

	ANetherSpawnPoint_Pickup_execOnNPickupRecycled_Parms OnNPickupRecycled_Parms;
	OnNPickupRecycled_Parms.NetherPickupFactory = NetherPickupFactory;
	OnNPickupRecycled_Parms.bWasPickedUp = bWasPickedUp;

	this->ProcessEvent ( pFnOnNPickupRecycled, &OnNPickupRecycled_Parms, NULL );
};

// Function NetherGame.NetherSpawnPoint_Pickup.RecycleOccupyingPickup
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void ANetherSpawnPoint_Pickup::eventRecycleOccupyingPickup ( )
{
	static UFunction* pFnRecycleOccupyingPickup = NULL;

	if ( ! pFnRecycleOccupyingPickup )
		pFnRecycleOccupyingPickup = (UFunction*) UObject::GObjObjects()->Data[ 78895 ];

	ANetherSpawnPoint_Pickup_eventRecycleOccupyingPickup_Parms RecycleOccupyingPickup_Parms;

	this->ProcessEvent ( pFnRecycleOccupyingPickup, &RecycleOccupyingPickup_Parms, NULL );
};

// Function NetherGame.NetherSpawnPoint_Pickup.OccupySpawnerWith
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AUDKPickupFactory*       PickupFactory                  ( CPF_Parm )

void ANetherSpawnPoint_Pickup::eventOccupySpawnerWith ( class AUDKPickupFactory* PickupFactory )
{
	static UFunction* pFnOccupySpawnerWith = NULL;

	if ( ! pFnOccupySpawnerWith )
		pFnOccupySpawnerWith = (UFunction*) UObject::GObjObjects()->Data[ 78892 ];

	ANetherSpawnPoint_Pickup_eventOccupySpawnerWith_Parms OccupySpawnerWith_Parms;
	OccupySpawnerWith_Parms.PickupFactory = PickupFactory;

	this->ProcessEvent ( pFnOccupySpawnerWith, &OccupySpawnerWith_Parms, NULL );
};

// Function NetherGame.GFxNetherObject.GetMouseOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxNetherObject::GetMouseOver ( )
{
	static UFunction* pFnGetMouseOver = NULL;

	if ( ! pFnGetMouseOver )
		pFnGetMouseOver = (UFunction*) UObject::GObjObjects()->Data[ 69689 ];

	UGFxNetherObject_execGetMouseOver_Parms GetMouseOver_Parms;

	this->ProcessEvent ( pFnGetMouseOver, &GetMouseOver_Parms, NULL );

	return GetMouseOver_Parms.ReturnValue;
};

// Function NetherGame.GFxNetherObject.MouseOut
// [0x00020002] 
// Parameters infos:

void UGFxNetherObject::MouseOut ( )
{
	static UFunction* pFnMouseOut = NULL;

	if ( ! pFnMouseOut )
		pFnMouseOut = (UFunction*) UObject::GObjObjects()->Data[ 69688 ];

	UGFxNetherObject_execMouseOut_Parms MouseOut_Parms;

	this->ProcessEvent ( pFnMouseOut, &MouseOut_Parms, NULL );
};

// Function NetherGame.GFxNetherObject.MouseOver
// [0x00020002] 
// Parameters infos:

void UGFxNetherObject::MouseOver ( )
{
	static UFunction* pFnMouseOver = NULL;

	if ( ! pFnMouseOver )
		pFnMouseOver = (UFunction*) UObject::GObjObjects()->Data[ 69687 ];

	UGFxNetherObject_execMouseOver_Parms MouseOver_Parms;

	this->ProcessEvent ( pFnMouseOver, &MouseOver_Parms, NULL );
};

// Function NetherGame.GFxNetherObject.AS_PointOver
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

int UGFxNetherObject::AS_PointOver ( float X, float Y )
{
	static UFunction* pFnAS_PointOver = NULL;

	if ( ! pFnAS_PointOver )
		pFnAS_PointOver = (UFunction*) UObject::GObjObjects()->Data[ 69683 ];

	UGFxNetherObject_execAS_PointOver_Parms AS_PointOver_Parms;
	AS_PointOver_Parms.X = X;
	AS_PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnAS_PointOver, &AS_PointOver_Parms, NULL );

	return AS_PointOver_Parms.ReturnValue;
};

// Function NetherGame.GFxNetherObject.PointOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UGFxNetherObject::PointOver ( float X, float Y )
{
	static UFunction* pFnPointOver = NULL;

	if ( ! pFnPointOver )
		pFnPointOver = (UFunction*) UObject::GObjObjects()->Data[ 69678 ];

	UGFxNetherObject_execPointOver_Parms PointOver_Parms;
	PointOver_Parms.X = X;
	PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnPointOver, &PointOver_Parms, NULL );

	return PointOver_Parms.ReturnValue;
};

// Function NetherGame.GFxNetherObject.GetParent
// [0x00020002] 
// Parameters infos:
// class UGFxNetherObject*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxNetherObject* UGFxNetherObject::GetParent ( )
{
	static UFunction* pFnGetParent = NULL;

	if ( ! pFnGetParent )
		pFnGetParent = (UFunction*) UObject::GObjObjects()->Data[ 69676 ];

	UGFxNetherObject_execGetParent_Parms GetParent_Parms;

	this->ProcessEvent ( pFnGetParent, &GetParent_Parms, NULL );

	return GetParent_Parms.ReturnValue;
};

// Function NetherGame.GFxNetherObject.GetGlobalPos
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UGFxNetherObject::GetGlobalPos ( )
{
	static UFunction* pFnGetGlobalPos = NULL;

	if ( ! pFnGetGlobalPos )
		pFnGetGlobalPos = (UFunction*) UObject::GObjObjects()->Data[ 69670 ];

	UGFxNetherObject_execGetGlobalPos_Parms GetGlobalPos_Parms;

	this->ProcessEvent ( pFnGetGlobalPos, &GetGlobalPos_Parms, NULL );

	return GetGlobalPos_Parms.ReturnValue;
};

// Function NetherGame.GFxNetherObject.SetScale
// [0x00820002] 
// Parameters infos:
// float                          XScale                         ( CPF_Parm )
// float                          YScale                         ( CPF_Parm )

void UGFxNetherObject::SetScale ( float XScale, float YScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 69666 ];

	UGFxNetherObject_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.XScale = XScale;
	SetScale_Parms.YScale = YScale;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );
};

// Function NetherGame.GFxNetherObject.GetHeight
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGFxNetherObject::GetHeight ( )
{
	static UFunction* pFnGetHeight = NULL;

	if ( ! pFnGetHeight )
		pFnGetHeight = (UFunction*) UObject::GObjObjects()->Data[ 69664 ];

	UGFxNetherObject_execGetHeight_Parms GetHeight_Parms;

	this->ProcessEvent ( pFnGetHeight, &GetHeight_Parms, NULL );

	return GetHeight_Parms.ReturnValue;
};

// Function NetherGame.GFxNetherObject.GetWidth
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGFxNetherObject::GetWidth ( )
{
	static UFunction* pFnGetWidth = NULL;

	if ( ! pFnGetWidth )
		pFnGetWidth = (UFunction*) UObject::GObjObjects()->Data[ 69662 ];

	UGFxNetherObject_execGetWidth_Parms GetWidth_Parms;

	this->ProcessEvent ( pFnGetWidth, &GetWidth_Parms, NULL );

	return GetWidth_Parms.ReturnValue;
};

// Function NetherGame.GFxNetherObject.RemoveChild
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Child                          ( CPF_Parm )

void UGFxNetherObject::RemoveChild ( class UGFxObject* Child )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 69660 ];

	UGFxNetherObject_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.Child = Child;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );
};

// Function NetherGame.GFxNetherObject.AddChild
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Child                          ( CPF_Parm )

void UGFxNetherObject::AddChild ( class UGFxObject* Child )
{
	static UFunction* pFnAddChild = NULL;

	if ( ! pFnAddChild )
		pFnAddChild = (UFunction*) UObject::GObjObjects()->Data[ 69658 ];

	UGFxNetherObject_execAddChild_Parms AddChild_Parms;
	AddChild_Parms.Child = Child;

	this->ProcessEvent ( pFnAddChild, &AddChild_Parms, NULL );
};

// Function NetherGame.GFxButton.PointOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UGFxButton::PointOver ( float X, float Y )
{
	static UFunction* pFnPointOver = NULL;

	if ( ! pFnPointOver )
		pFnPointOver = (UFunction*) UObject::GObjObjects()->Data[ 69729 ];

	UGFxButton_execPointOver_Parms PointOver_Parms;
	PointOver_Parms.X = X;
	PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnPointOver, &PointOver_Parms, NULL );

	return PointOver_Parms.ReturnValue;
};

// Function NetherGame.GFxButton.AS_DisableOutline
// [0x00020002] 
// Parameters infos:

void UGFxButton::AS_DisableOutline ( )
{
	static UFunction* pFnAS_DisableOutline = NULL;

	if ( ! pFnAS_DisableOutline )
		pFnAS_DisableOutline = (UFunction*) UObject::GObjObjects()->Data[ 69728 ];

	UGFxButton_execAS_DisableOutline_Parms AS_DisableOutline_Parms;

	this->ProcessEvent ( pFnAS_DisableOutline, &AS_DisableOutline_Parms, NULL );
};

// Function NetherGame.GFxButton.AS_EnableOutline
// [0x00020002] 
// Parameters infos:

void UGFxButton::AS_EnableOutline ( )
{
	static UFunction* pFnAS_EnableOutline = NULL;

	if ( ! pFnAS_EnableOutline )
		pFnAS_EnableOutline = (UFunction*) UObject::GObjObjects()->Data[ 69727 ];

	UGFxButton_execAS_EnableOutline_Parms AS_EnableOutline_Parms;

	this->ProcessEvent ( pFnAS_EnableOutline, &AS_EnableOutline_Parms, NULL );
};

// Function NetherGame.GFxButton.IsEnabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxButton::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 69725 ];

	UGFxButton_execIsEnabled_Parms IsEnabled_Parms;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	return IsEnabled_Parms.ReturnValue;
};

// Function NetherGame.GFxButton.EnableButton
// [0x00820002] 
// Parameters infos:

void UGFxButton::EnableButton ( )
{
	static UFunction* pFnEnableButton = NULL;

	if ( ! pFnEnableButton )
		pFnEnableButton = (UFunction*) UObject::GObjObjects()->Data[ 69723 ];

	UGFxButton_execEnableButton_Parms EnableButton_Parms;

	this->ProcessEvent ( pFnEnableButton, &EnableButton_Parms, NULL );
};

// Function NetherGame.GFxButton.DisableButton
// [0x00820002] 
// Parameters infos:

void UGFxButton::DisableButton ( )
{
	static UFunction* pFnDisableButton = NULL;

	if ( ! pFnDisableButton )
		pFnDisableButton = (UFunction*) UObject::GObjObjects()->Data[ 69721 ];

	UGFxButton_execDisableButton_Parms DisableButton_Parms;

	this->ProcessEvent ( pFnDisableButton, &DisableButton_Parms, NULL );
};

// Function NetherGame.GFxButton.RightMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxButton::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 69718 ];

	UGFxButton_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.GFxButton.LeftMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxButton::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 69715 ];

	UGFxButton_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.GFxButton.RightMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxButton::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 69712 ];

	UGFxButton_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.GFxButton.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxButton::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 69709 ];

	UGFxButton_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.GFxButton.SetButtonClicked
// [0x00024002] 
// Parameters infos:
// struct FScriptDelegate         ButtonClickedDelegate          ( CPF_Parm | CPF_NeedCtorLink )
// class UObject*                 Params                         ( CPF_OptionalParm | CPF_Parm )

void UGFxButton::SetButtonClicked ( struct FScriptDelegate ButtonClickedDelegate, class UObject* Params )
{
	static UFunction* pFnSetButtonClicked = NULL;

	if ( ! pFnSetButtonClicked )
		pFnSetButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 69706 ];

	UGFxButton_execSetButtonClicked_Parms SetButtonClicked_Parms;
	memcpy ( &SetButtonClicked_Parms.ButtonClickedDelegate, &ButtonClickedDelegate, 0x10 );
	SetButtonClicked_Parms.Params = Params;

	this->ProcessEvent ( pFnSetButtonClicked, &SetButtonClicked_Parms, NULL );
};

// Function NetherGame.GFxButton.SetLabel
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UGFxButton::SetLabel ( struct FString Text )
{
	static UFunction* pFnSetLabel = NULL;

	if ( ! pFnSetLabel )
		pFnSetLabel = (UFunction*) UObject::GObjObjects()->Data[ 69704 ];

	UGFxButton_execSetLabel_Parms SetLabel_Parms;
	memcpy ( &SetLabel_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSetLabel, &SetLabel_Parms, NULL );
};

// Function NetherGame.GFxButton.ButtonClicked
// [0x00120000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )
// class UObject*                 Params                         ( CPF_Parm )

int UGFxButton::ButtonClicked ( class UGFxButton* Button, class UObject* Params )
{
	static UFunction* pFnButtonClicked = NULL;

	if ( ! pFnButtonClicked )
		pFnButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 69694 ];

	UGFxButton_execButtonClicked_Parms ButtonClicked_Parms;
	ButtonClicked_Parms.Button = Button;
	ButtonClicked_Parms.Params = Params;

	this->ProcessEvent ( pFnButtonClicked, &ButtonClicked_Parms, NULL );

	return ButtonClicked_Parms.ReturnValue;
};

// Function NetherGame.GFxButton.ButtonAction
// [0x00120000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UGFxButton::ButtonAction ( class UGFxButton* Button )
{
	static UFunction* pFnButtonAction = NULL;

	if ( ! pFnButtonAction )
		pFnButtonAction = (UFunction*) UObject::GObjObjects()->Data[ 69696 ];

	UGFxButton_execButtonAction_Parms ButtonAction_Parms;
	ButtonAction_Parms.Button = Button;

	this->ProcessEvent ( pFnButtonAction, &ButtonAction_Parms, NULL );

	return ButtonAction_Parms.ReturnValue;
};

// Function NetherGame.IGFxClickable.PointOver
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UIGFxClickable::PointOver ( float X, float Y )
{
	static UFunction* pFnPointOver = NULL;

	if ( ! pFnPointOver )
		pFnPointOver = (UFunction*) UObject::GObjObjects()->Data[ 71076 ];

	UIGFxClickable_execPointOver_Parms PointOver_Parms;
	PointOver_Parms.X = X;
	PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnPointOver, &PointOver_Parms, NULL );

	return PointOver_Parms.ReturnValue;
};

// Function NetherGame.IGFxClickable.RightMouseUp
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UIGFxClickable::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 71073 ];

	UIGFxClickable_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.IGFxClickable.RightMouseDown
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UIGFxClickable::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 71070 ];

	UIGFxClickable_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.IGFxClickable.LeftMouseUp
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UIGFxClickable::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 71067 ];

	UIGFxClickable_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.IGFxClickable.LeftMouseDown
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UIGFxClickable::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 71064 ];

	UIGFxClickable_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.GFxAnimatedObject.PlayOpenAnimation
// [0x00024002] 
// Parameters infos:
// unsigned long                  bStartFromBeginning            ( CPF_OptionalParm | CPF_Parm )

void UGFxAnimatedObject::PlayOpenAnimation ( unsigned long bStartFromBeginning )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 69806 ];

	UGFxAnimatedObject_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;
	PlayOpenAnimation_Parms.bStartFromBeginning = bStartFromBeginning;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function NetherGame.GFxAnimatedObject.PlayCloseAnimation
// [0x00020002] 
// Parameters infos:

void UGFxAnimatedObject::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 69805 ];

	UGFxAnimatedObject_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function NetherGame.GFxAnimatedObject.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxAnimatedObject::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 69802 ];

	UGFxAnimatedObject_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxBarMeter.GetAmountFull
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGFxBarMeter::GetAmountFull ( )
{
	static UFunction* pFnGetAmountFull = NULL;

	if ( ! pFnGetAmountFull )
		pFnGetAmountFull = (UFunction*) UObject::GObjObjects()->Data[ 69814 ];

	UGFxBarMeter_execGetAmountFull_Parms GetAmountFull_Parms;

	this->ProcessEvent ( pFnGetAmountFull, &GetAmountFull_Parms, NULL );

	return GetAmountFull_Parms.ReturnValue;
};

// Function NetherGame.GFxBarMeter.SetAmountFull
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UGFxBarMeter::SetAmountFull ( float Amount )
{
	static UFunction* pFnSetAmountFull = NULL;

	if ( ! pFnSetAmountFull )
		pFnSetAmountFull = (UFunction*) UObject::GObjObjects()->Data[ 69812 ];

	UGFxBarMeter_execSetAmountFull_Parms SetAmountFull_Parms;
	SetAmountFull_Parms.Amount = Amount;

	this->ProcessEvent ( pFnSetAmountFull, &SetAmountFull_Parms, NULL );
};

// Function NetherGame.GFxBarMeter.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxBarMeter::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 69811 ];

	UGFxBarMeter_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxCharacterSlot.AS_MouseIsOver
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGFxCharacterSlot::AS_MouseIsOver ( )
{
	static UFunction* pFnAS_MouseIsOver = NULL;

	if ( ! pFnAS_MouseIsOver )
		pFnAS_MouseIsOver = (UFunction*) UObject::GObjObjects()->Data[ 69853 ];

	UGFxCharacterSlot_execAS_MouseIsOver_Parms AS_MouseIsOver_Parms;

	this->ProcessEvent ( pFnAS_MouseIsOver, &AS_MouseIsOver_Parms, NULL );

	return AS_MouseIsOver_Parms.ReturnValue;
};

// Function NetherGame.GFxCharacterSlot.MouseIsOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxCharacterSlot::MouseIsOver ( )
{
	static UFunction* pFnMouseIsOver = NULL;

	if ( ! pFnMouseIsOver )
		pFnMouseIsOver = (UFunction*) UObject::GObjObjects()->Data[ 69851 ];

	UGFxCharacterSlot_execMouseIsOver_Parms MouseIsOver_Parms;

	this->ProcessEvent ( pFnMouseIsOver, &MouseIsOver_Parms, NULL );

	return MouseIsOver_Parms.ReturnValue;
};

// Function NetherGame.GFxCharacterSlot.Refresh
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bPlayAnimations                ( CPF_OptionalParm | CPF_Parm )

void UGFxCharacterSlot::Refresh ( unsigned long bPlayAnimations )
{
	static UFunction* pFnRefresh = NULL;

	if ( ! pFnRefresh )
		pFnRefresh = (UFunction*) UObject::GObjObjects()->Data[ 69830 ];

	UGFxCharacterSlot_execRefresh_Parms Refresh_Parms;
	Refresh_Parms.bPlayAnimations = bPlayAnimations;

	this->ProcessEvent ( pFnRefresh, &Refresh_Parms, NULL );
};

// Function NetherGame.GFxCharacterSlot.PlayAnimations
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxCharacterSlot::PlayAnimations ( )
{
	static UFunction* pFnPlayAnimations = NULL;

	if ( ! pFnPlayAnimations )
		pFnPlayAnimations = (UFunction*) UObject::GObjObjects()->Data[ 69833 ];

	UGFxCharacterSlot_execPlayAnimations_Parms PlayAnimations_Parms;

	this->ProcessEvent ( pFnPlayAnimations, &PlayAnimations_Parms, NULL );
};

// Function NetherGame.GFxCharacterSlot.Deselect
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxCharacterSlot::Deselect ( )
{
	static UFunction* pFnDeselect = NULL;

	if ( ! pFnDeselect )
		pFnDeselect = (UFunction*) UObject::GObjObjects()->Data[ 69832 ];

	UGFxCharacterSlot_execDeselect_Parms Deselect_Parms;

	this->ProcessEvent ( pFnDeselect, &Deselect_Parms, NULL );
};

// Function NetherGame.GFxCharacterSlot.Select
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxCharacterSlot::Select ( )
{
	static UFunction* pFnSelect = NULL;

	if ( ! pFnSelect )
		pFnSelect = (UFunction*) UObject::GObjObjects()->Data[ 69831 ];

	UGFxCharacterSlot_execSelect_Parms Select_Parms;

	this->ProcessEvent ( pFnSelect, &Select_Parms, NULL );
};

// Function NetherGame.GFxCharacterSlot.Initialize
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherPlayerController* InSlotOwner                    ( CPF_Parm )
// int                            InSlotIndex                    ( CPF_Parm )

void UGFxCharacterSlot::Initialize ( class ANetherPlayerController* InSlotOwner, int InSlotIndex )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 69827 ];

	UGFxCharacterSlot_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.InSlotOwner = InSlotOwner;
	Initialize_Parms.InSlotIndex = InSlotIndex;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.ResetCharacterStatstoDefault
// [0x00020002] 
// Parameters infos:

void ANDocument_CharacterInfo::ResetCharacterStatstoDefault ( )
{
	static UFunction* pFnResetCharacterStatstoDefault = NULL;

	if ( ! pFnResetCharacterStatstoDefault )
		pFnResetCharacterStatstoDefault = (UFunction*) UObject::GObjObjects()->Data[ 72615 ];

	ANDocument_CharacterInfo_execResetCharacterStatstoDefault_Parms ResetCharacterStatstoDefault_Parms;

	this->ProcessEvent ( pFnResetCharacterStatstoDefault, &ResetCharacterStatstoDefault_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.ResetToDefault
// [0x00020002] 
// Parameters infos:

void ANDocument_CharacterInfo::ResetToDefault ( )
{
	static UFunction* pFnResetToDefault = NULL;

	if ( ! pFnResetToDefault )
		pFnResetToDefault = (UFunction*) UObject::GObjObjects()->Data[ 72614 ];

	ANDocument_CharacterInfo_execResetToDefault_Parms ResetToDefault_Parms;

	this->ProcessEvent ( pFnResetToDefault, &ResetToDefault_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.ServerChangePlayerName
// [0x002200C3] ( FUNC_Final )
// Parameters infos:
// struct FString                 NewName                        ( CPF_Parm | CPF_NeedCtorLink )

void ANDocument_CharacterInfo::ServerChangePlayerName ( struct FString NewName )
{
	static UFunction* pFnServerChangePlayerName = NULL;

	if ( ! pFnServerChangePlayerName )
		pFnServerChangePlayerName = (UFunction*) UObject::GObjObjects()->Data[ 72612 ];

	ANDocument_CharacterInfo_execServerChangePlayerName_Parms ServerChangePlayerName_Parms;
	memcpy ( &ServerChangePlayerName_Parms.NewName, &NewName, 0x10 );

	this->ProcessEvent ( pFnServerChangePlayerName, &ServerChangePlayerName_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.RequestCashSpending
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CashToSpend                    ( CPF_Parm )

bool ANDocument_CharacterInfo::RequestCashSpending ( int CashToSpend )
{
	static UFunction* pFnRequestCashSpending = NULL;

	if ( ! pFnRequestCashSpending )
		pFnRequestCashSpending = (UFunction*) UObject::GObjObjects()->Data[ 72609 ];

	ANDocument_CharacterInfo_execRequestCashSpending_Parms RequestCashSpending_Parms;
	RequestCashSpending_Parms.CashToSpend = CashToSpend;

	this->ProcessEvent ( pFnRequestCashSpending, &RequestCashSpending_Parms, NULL );

	return RequestCashSpending_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInfo.AddCash
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            CashGiven                      ( CPF_Parm )

void ANDocument_CharacterInfo::AddCash ( int CashGiven )
{
	static UFunction* pFnAddCash = NULL;

	if ( ! pFnAddCash )
		pFnAddCash = (UFunction*) UObject::GObjObjects()->Data[ 72607 ];

	ANDocument_CharacterInfo_execAddCash_Parms AddCash_Parms;
	AddCash_Parms.CashGiven = CashGiven;

	this->ProcessEvent ( pFnAddCash, &AddCash_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.GetMaxHealth
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANDocument_CharacterInfo::GetMaxHealth ( )
{
	static UFunction* pFnGetMaxHealth = NULL;

	if ( ! pFnGetMaxHealth )
		pFnGetMaxHealth = (UFunction*) UObject::GObjObjects()->Data[ 69847 ];

	ANDocument_CharacterInfo_execGetMaxHealth_Parms GetMaxHealth_Parms;

	this->ProcessEvent ( pFnGetMaxHealth, &GetMaxHealth_Parms, NULL );

	return GetMaxHealth_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInfo.HealPlayerOnUnlock
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ANDocument_CharacterInfo::HealPlayerOnUnlock ( int Level )
{
	static UFunction* pFnHealPlayerOnUnlock = NULL;

	if ( ! pFnHealPlayerOnUnlock )
		pFnHealPlayerOnUnlock = (UFunction*) UObject::GObjObjects()->Data[ 72601 ];

	ANDocument_CharacterInfo_execHealPlayerOnUnlock_Parms HealPlayerOnUnlock_Parms;
	HealPlayerOnUnlock_Parms.Level = Level;

	this->ProcessEvent ( pFnHealPlayerOnUnlock, &HealPlayerOnUnlock_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.SetStatLevel
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StatName                       ( CPF_Parm )
// int                            Level                          ( CPF_Parm )

void ANDocument_CharacterInfo::SetStatLevel ( unsigned char StatName, int Level )
{
	static UFunction* pFnSetStatLevel = NULL;

	if ( ! pFnSetStatLevel )
		pFnSetStatLevel = (UFunction*) UObject::GObjObjects()->Data[ 72596 ];

	ANDocument_CharacterInfo_execSetStatLevel_Parms SetStatLevel_Parms;
	SetStatLevel_Parms.StatName = StatName;
	SetStatLevel_Parms.Level = Level;

	this->ProcessEvent ( pFnSetStatLevel, &SetStatLevel_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.GetAttributeLevel
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AttributeType                  ( CPF_Parm )

int ANDocument_CharacterInfo::GetAttributeLevel ( unsigned char AttributeType )
{
	static UFunction* pFnGetAttributeLevel = NULL;

	if ( ! pFnGetAttributeLevel )
		pFnGetAttributeLevel = (UFunction*) UObject::GObjObjects()->Data[ 72595 ];

	ANDocument_CharacterInfo_execGetAttributeLevel_Parms GetAttributeLevel_Parms;
	GetAttributeLevel_Parms.AttributeType = AttributeType;

	this->ProcessEvent ( pFnGetAttributeLevel, &GetAttributeLevel_Parms, NULL );

	return GetAttributeLevel_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInfo.RequestStatAdd
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StatName                       ( CPF_Parm )

void ANDocument_CharacterInfo::RequestStatAdd ( unsigned char StatName )
{
	static UFunction* pFnRequestStatAdd = NULL;

	if ( ! pFnRequestStatAdd )
		pFnRequestStatAdd = (UFunction*) UObject::GObjObjects()->Data[ 72593 ];

	ANDocument_CharacterInfo_execRequestStatAdd_Parms RequestStatAdd_Parms;
	RequestStatAdd_Parms.StatName = StatName;

	this->ProcessEvent ( pFnRequestStatAdd, &RequestStatAdd_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.RequestStatPointSpending
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PointsToSpend                  ( CPF_Parm )

bool ANDocument_CharacterInfo::RequestStatPointSpending ( int PointsToSpend )
{
	static UFunction* pFnRequestStatPointSpending = NULL;

	if ( ! pFnRequestStatPointSpending )
		pFnRequestStatPointSpending = (UFunction*) UObject::GObjObjects()->Data[ 72590 ];

	ANDocument_CharacterInfo_execRequestStatPointSpending_Parms RequestStatPointSpending_Parms;
	RequestStatPointSpending_Parms.PointsToSpend = PointsToSpend;

	this->ProcessEvent ( pFnRequestStatPointSpending, &RequestStatPointSpending_Parms, NULL );

	return RequestStatPointSpending_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInfo.AddPlayerLevel
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            StatPoints                     ( CPF_Parm )

void ANDocument_CharacterInfo::AddPlayerLevel ( int StatPoints )
{
	static UFunction* pFnAddPlayerLevel = NULL;

	if ( ! pFnAddPlayerLevel )
		pFnAddPlayerLevel = (UFunction*) UObject::GObjObjects()->Data[ 72588 ];

	ANDocument_CharacterInfo_execAddPlayerLevel_Parms AddPlayerLevel_Parms;
	AddPlayerLevel_Parms.StatPoints = StatPoints;

	this->ProcessEvent ( pFnAddPlayerLevel, &AddPlayerLevel_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.AddPlayerXP
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            XPGiven                        ( CPF_Parm )

void ANDocument_CharacterInfo::AddPlayerXP ( int XPGiven )
{
	static UFunction* pFnAddPlayerXP = NULL;

	if ( ! pFnAddPlayerXP )
		pFnAddPlayerXP = (UFunction*) UObject::GObjObjects()->Data[ 72586 ];

	ANDocument_CharacterInfo_execAddPlayerXP_Parms AddPlayerXP_Parms;
	AddPlayerXP_Parms.XPGiven = XPGiven;

	this->ProcessEvent ( pFnAddPlayerXP, &AddPlayerXP_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.AddCivilianKill
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::AddCivilianKill ( )
{
	static UFunction* pFnAddCivilianKill = NULL;

	if ( ! pFnAddCivilianKill )
		pFnAddCivilianKill = (UFunction*) UObject::GObjObjects()->Data[ 72585 ];

	ANDocument_CharacterInfo_execAddCivilianKill_Parms AddCivilianKill_Parms;

	this->ProcessEvent ( pFnAddCivilianKill, &AddCivilianKill_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.AddBanditKill
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::AddBanditKill ( )
{
	static UFunction* pFnAddBanditKill = NULL;

	if ( ! pFnAddBanditKill )
		pFnAddBanditKill = (UFunction*) UObject::GObjObjects()->Data[ 72584 ];

	ANDocument_CharacterInfo_execAddBanditKill_Parms AddBanditKill_Parms;

	this->ProcessEvent ( pFnAddBanditKill, &AddBanditKill_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.AddPlayerKill
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::AddPlayerKill ( )
{
	static UFunction* pFnAddPlayerKill = NULL;

	if ( ! pFnAddPlayerKill )
		pFnAddPlayerKill = (UFunction*) UObject::GObjObjects()->Data[ 72583 ];

	ANDocument_CharacterInfo_execAddPlayerKill_Parms AddPlayerKill_Parms;

	this->ProcessEvent ( pFnAddPlayerKill, &AddPlayerKill_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.AddEnemyKill
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::AddEnemyKill ( )
{
	static UFunction* pFnAddEnemyKill = NULL;

	if ( ! pFnAddEnemyKill )
		pFnAddEnemyKill = (UFunction*) UObject::GObjObjects()->Data[ 72582 ];

	ANDocument_CharacterInfo_execAddEnemyKill_Parms AddEnemyKill_Parms;

	this->ProcessEvent ( pFnAddEnemyKill, &AddEnemyKill_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.RequestHungerWrite
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void ANDocument_CharacterInfo::RequestHungerWrite ( float Amount )
{
	static UFunction* pFnRequestHungerWrite = NULL;

	if ( ! pFnRequestHungerWrite )
		pFnRequestHungerWrite = (UFunction*) UObject::GObjObjects()->Data[ 72580 ];

	ANDocument_CharacterInfo_execRequestHungerWrite_Parms RequestHungerWrite_Parms;
	RequestHungerWrite_Parms.Amount = Amount;

	this->ProcessEvent ( pFnRequestHungerWrite, &RequestHungerWrite_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.RequestHealthWrite
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            HealthAmount                   ( CPF_Parm )

void ANDocument_CharacterInfo::RequestHealthWrite ( int HealthAmount )
{
	static UFunction* pFnRequestHealthWrite = NULL;

	if ( ! pFnRequestHealthWrite )
		pFnRequestHealthWrite = (UFunction*) UObject::GObjObjects()->Data[ 72578 ];

	ANDocument_CharacterInfo_execRequestHealthWrite_Parms RequestHealthWrite_Parms;
	RequestHealthWrite_Parms.HealthAmount = HealthAmount;

	this->ProcessEvent ( pFnRequestHealthWrite, &RequestHealthWrite_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.LogSpeedHack
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::LogSpeedHack ( )
{
	static UFunction* pFnLogSpeedHack = NULL;

	if ( ! pFnLogSpeedHack )
		pFnLogSpeedHack = (UFunction*) UObject::GObjObjects()->Data[ 72577 ];

	ANDocument_CharacterInfo_execLogSpeedHack_Parms LogSpeedHack_Parms;

	this->ProcessEvent ( pFnLogSpeedHack, &LogSpeedHack_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.AddBloodPoint
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::AddBloodPoint ( )
{
	static UFunction* pFnAddBloodPoint = NULL;

	if ( ! pFnAddBloodPoint )
		pFnAddBloodPoint = (UFunction*) UObject::GObjObjects()->Data[ 72575 ];

	ANDocument_CharacterInfo_execAddBloodPoint_Parms AddBloodPoint_Parms;

	this->ProcessEvent ( pFnAddBloodPoint, &AddBloodPoint_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.DecayBloodPoints
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::DecayBloodPoints ( )
{
	static UFunction* pFnDecayBloodPoints = NULL;

	if ( ! pFnDecayBloodPoints )
		pFnDecayBloodPoints = (UFunction*) UObject::GObjObjects()->Data[ 72574 ];

	ANDocument_CharacterInfo_execDecayBloodPoints_Parms DecayBloodPoints_Parms;

	this->ProcessEvent ( pFnDecayBloodPoints, &DecayBloodPoints_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.ResetBloodPointTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::ResetBloodPointTimer ( )
{
	static UFunction* pFnResetBloodPointTimer = NULL;

	if ( ! pFnResetBloodPointTimer )
		pFnResetBloodPointTimer = (UFunction*) UObject::GObjObjects()->Data[ 72571 ];

	ANDocument_CharacterInfo_execResetBloodPointTimer_Parms ResetBloodPointTimer_Parms;

	this->ProcessEvent ( pFnResetBloodPointTimer, &ResetBloodPointTimer_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.StartBloodPointDecay
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANDocument_CharacterInfo::StartBloodPointDecay ( )
{
	static UFunction* pFnStartBloodPointDecay = NULL;

	if ( ! pFnStartBloodPointDecay )
		pFnStartBloodPointDecay = (UFunction*) UObject::GObjObjects()->Data[ 72570 ];

	ANDocument_CharacterInfo_execStartBloodPointDecay_Parms StartBloodPointDecay_Parms;

	this->ProcessEvent ( pFnStartBloodPointDecay, &StartBloodPointDecay_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.RequestShouldLoadWrite
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShould                        ( CPF_Parm )

void ANDocument_CharacterInfo::RequestShouldLoadWrite ( unsigned long bShould )
{
	static UFunction* pFnRequestShouldLoadWrite = NULL;

	if ( ! pFnRequestShouldLoadWrite )
		pFnRequestShouldLoadWrite = (UFunction*) UObject::GObjObjects()->Data[ 72568 ];

	ANDocument_CharacterInfo_execRequestShouldLoadWrite_Parms RequestShouldLoadWrite_Parms;
	RequestShouldLoadWrite_Parms.bShould = bShould;

	this->ProcessEvent ( pFnRequestShouldLoadWrite, &RequestShouldLoadWrite_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.RequestPositionWrite
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          VecX                           ( CPF_Parm )
// float                          VecY                           ( CPF_Parm )
// float                          VecZ                           ( CPF_Parm )

void ANDocument_CharacterInfo::RequestPositionWrite ( float VecX, float VecY, float VecZ )
{
	static UFunction* pFnRequestPositionWrite = NULL;

	if ( ! pFnRequestPositionWrite )
		pFnRequestPositionWrite = (UFunction*) UObject::GObjObjects()->Data[ 72564 ];

	ANDocument_CharacterInfo_execRequestPositionWrite_Parms RequestPositionWrite_Parms;
	RequestPositionWrite_Parms.VecX = VecX;
	RequestPositionWrite_Parms.VecY = VecY;
	RequestPositionWrite_Parms.VecZ = VecZ;

	this->ProcessEvent ( pFnRequestPositionWrite, &RequestPositionWrite_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.TryUseRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CurrentDate                    ( CPF_Parm )

bool ANDocument_CharacterInfo::TryUseRespawn ( int CurrentDate )
{
	static UFunction* pFnTryUseRespawn = NULL;

	if ( ! pFnTryUseRespawn )
		pFnTryUseRespawn = (UFunction*) UObject::GObjObjects()->Data[ 72561 ];

	ANDocument_CharacterInfo_execTryUseRespawn_Parms TryUseRespawn_Parms;
	TryUseRespawn_Parms.CurrentDate = CurrentDate;

	this->ProcessEvent ( pFnTryUseRespawn, &TryUseRespawn_Parms, NULL );

	return TryUseRespawn_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInfo.SaveDocument
// [0x00020002] 
// Parameters infos:

void ANDocument_CharacterInfo::SaveDocument ( )
{
	static UFunction* pFnSaveDocument = NULL;

	if ( ! pFnSaveDocument )
		pFnSaveDocument = (UFunction*) UObject::GObjObjects()->Data[ 72560 ];

	ANDocument_CharacterInfo_execSaveDocument_Parms SaveDocument_Parms;

	this->ProcessEvent ( pFnSaveDocument, &SaveDocument_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.PreAutosave
// [0x00020000] 
// Parameters infos:

void ANDocument_CharacterInfo::PreAutosave ( )
{
	static UFunction* pFnPreAutosave = NULL;

	if ( ! pFnPreAutosave )
		pFnPreAutosave = (UFunction*) UObject::GObjObjects()->Data[ 72559 ];

	ANDocument_CharacterInfo_execPreAutosave_Parms PreAutosave_Parms;

	this->ProcessEvent ( pFnPreAutosave, &PreAutosave_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.OnDocumentUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANDocument_CharacterInfo::eventOnDocumentUpdate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 72557 ];

	ANDocument_CharacterInfo_eventOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANDocument_CharacterInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 72555 ];

	ANDocument_CharacterInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NetherServerCharacterDocument.GetDocumentName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherServerCharacterDocument::eventGetDocumentName ( )
{
	static UFunction* pFnGetDocumentName = NULL;

	if ( ! pFnGetDocumentName )
		pFnGetDocumentName = (UFunction*) UObject::GObjObjects()->Data[ 72528 ];

	ANetherServerCharacterDocument_eventGetDocumentName_Parms GetDocumentName_Parms;

	this->ProcessEvent ( pFnGetDocumentName, &GetDocumentName_Parms, NULL );

	return GetDocumentName_Parms.ReturnValue;
};

// Function NetherGame.NetherServerCharacterDocument.InitForPlayer
// [0x00020002] 
// Parameters infos:
// class ANetherPlayerController* PC                             ( CPF_Parm )
// int                            CharacterIndex                 ( CPF_Parm )

void ANetherServerCharacterDocument::InitForPlayer ( class ANetherPlayerController* PC, int CharacterIndex )
{
	static UFunction* pFnInitForPlayer = NULL;

	if ( ! pFnInitForPlayer )
		pFnInitForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 72525 ];

	ANetherServerCharacterDocument_execInitForPlayer_Parms InitForPlayer_Parms;
	InitForPlayer_Parms.PC = PC;
	InitForPlayer_Parms.CharacterIndex = CharacterIndex;

	this->ProcessEvent ( pFnInitForPlayer, &InitForPlayer_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.Unselect
// [0x00020002] 
// Parameters infos:

void UGFxCheckBox::Unselect ( )
{
	static UFunction* pFnUnselect = NULL;

	if ( ! pFnUnselect )
		pFnUnselect = (UFunction*) UObject::GObjObjects()->Data[ 69889 ];

	UGFxCheckBox_execUnselect_Parms Unselect_Parms;

	this->ProcessEvent ( pFnUnselect, &Unselect_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.PointOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UGFxCheckBox::PointOver ( float X, float Y )
{
	static UFunction* pFnPointOver = NULL;

	if ( ! pFnPointOver )
		pFnPointOver = (UFunction*) UObject::GObjObjects()->Data[ 69885 ];

	UGFxCheckBox_execPointOver_Parms PointOver_Parms;
	PointOver_Parms.X = X;
	PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnPointOver, &PointOver_Parms, NULL );

	return PointOver_Parms.ReturnValue;
};

// Function NetherGame.GFxCheckBox.Select
// [0x00020002] 
// Parameters infos:

void UGFxCheckBox::Select ( )
{
	static UFunction* pFnSelect = NULL;

	if ( ! pFnSelect )
		pFnSelect = (UFunction*) UObject::GObjObjects()->Data[ 69884 ];

	UGFxCheckBox_execSelect_Parms Select_Parms;

	this->ProcessEvent ( pFnSelect, &Select_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.RightMouseUp
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxCheckBox::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 69881 ];

	UGFxCheckBox_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.RightMouseDown
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxCheckBox::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 69878 ];

	UGFxCheckBox_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.LeftMouseUp
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxCheckBox::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 69875 ];

	UGFxCheckBox_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxCheckBox::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 69872 ];

	UGFxCheckBox_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.ApplyCurrentOption
// [0x00024002] 
// Parameters infos:
// unsigned long                  bApplyAutomatically            ( CPF_OptionalParm | CPF_Parm )

void UGFxCheckBox::ApplyCurrentOption ( unsigned long bApplyAutomatically )
{
	static UFunction* pFnApplyCurrentOption = NULL;

	if ( ! pFnApplyCurrentOption )
		pFnApplyCurrentOption = (UFunction*) UObject::GObjObjects()->Data[ 69870 ];

	UGFxCheckBox_execApplyCurrentOption_Parms ApplyCurrentOption_Parms;
	ApplyCurrentOption_Parms.bApplyAutomatically = bApplyAutomatically;

	this->ProcessEvent ( pFnApplyCurrentOption, &ApplyCurrentOption_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.SetCurrentlySelectedOption
// [0x00020002] 
// Parameters infos:
// int                            OptionIndex                    ( CPF_Parm )

void UGFxCheckBox::SetCurrentlySelectedOption ( int OptionIndex )
{
	static UFunction* pFnSetCurrentlySelectedOption = NULL;

	if ( ! pFnSetCurrentlySelectedOption )
		pFnSetCurrentlySelectedOption = (UFunction*) UObject::GObjObjects()->Data[ 69868 ];

	UGFxCheckBox_execSetCurrentlySelectedOption_Parms SetCurrentlySelectedOption_Parms;
	SetCurrentlySelectedOption_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetCurrentlySelectedOption, &SetCurrentlySelectedOption_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.GetCurrentlySelectedOption
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGFxCheckBox::GetCurrentlySelectedOption ( )
{
	static UFunction* pFnGetCurrentlySelectedOption = NULL;

	if ( ! pFnGetCurrentlySelectedOption )
		pFnGetCurrentlySelectedOption = (UFunction*) UObject::GObjObjects()->Data[ 69866 ];

	UGFxCheckBox_execGetCurrentlySelectedOption_Parms GetCurrentlySelectedOption_Parms;

	this->ProcessEvent ( pFnGetCurrentlySelectedOption, &GetCurrentlySelectedOption_Parms, NULL );

	return GetCurrentlySelectedOption_Parms.ReturnValue;
};

// Function NetherGame.GFxCheckBox.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxCheckBox::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 69865 ];

	UGFxCheckBox_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxCheckBox.OptionSelectedAction
// [0x00120000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UGFxCheckBox::OptionSelectedAction ( int OptionIndex )
{
	static UFunction* pFnOptionSelectedAction = NULL;

	if ( ! pFnOptionSelectedAction )
		pFnOptionSelectedAction = (UFunction*) UObject::GObjObjects()->Data[ 69858 ];

	UGFxCheckBox_execOptionSelectedAction_Parms OptionSelectedAction_Parms;
	OptionSelectedAction_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnOptionSelectedAction, &OptionSelectedAction_Parms, NULL );

	return OptionSelectedAction_Parms.ReturnValue;
};

// Function NetherGame.IGFxOptionSelector.ApplyCurrentOption
// [0x00024000] 
// Parameters infos:
// unsigned long                  bApplyAutomatically            ( CPF_OptionalParm | CPF_Parm )

void UIGFxOptionSelector::ApplyCurrentOption ( unsigned long bApplyAutomatically )
{
	static UFunction* pFnApplyCurrentOption = NULL;

	if ( ! pFnApplyCurrentOption )
		pFnApplyCurrentOption = (UFunction*) UObject::GObjObjects()->Data[ 71081 ];

	UIGFxOptionSelector_execApplyCurrentOption_Parms ApplyCurrentOption_Parms;
	ApplyCurrentOption_Parms.bApplyAutomatically = bApplyAutomatically;

	this->ProcessEvent ( pFnApplyCurrentOption, &ApplyCurrentOption_Parms, NULL );
};

// Function NetherGame.GFxCircleMeter.StopTimedFillUp
// [0x00024002] 
// Parameters infos:
// unsigned long                  SkipAnimation                  ( CPF_OptionalParm | CPF_Parm )

void UGFxCircleMeter::StopTimedFillUp ( unsigned long SkipAnimation )
{
	static UFunction* pFnStopTimedFillUp = NULL;

	if ( ! pFnStopTimedFillUp )
		pFnStopTimedFillUp = (UFunction*) UObject::GObjObjects()->Data[ 69901 ];

	UGFxCircleMeter_execStopTimedFillUp_Parms StopTimedFillUp_Parms;
	StopTimedFillUp_Parms.SkipAnimation = SkipAnimation;

	this->ProcessEvent ( pFnStopTimedFillUp, &StopTimedFillUp_Parms, NULL );
};

// Function NetherGame.GFxCircleMeter.FadeIn
// [0x00020002] 
// Parameters infos:
// float                          FadeSpeed                      ( CPF_Parm )

void UGFxCircleMeter::FadeIn ( float FadeSpeed )
{
	static UFunction* pFnFadeIn = NULL;

	if ( ! pFnFadeIn )
		pFnFadeIn = (UFunction*) UObject::GObjObjects()->Data[ 69899 ];

	UGFxCircleMeter_execFadeIn_Parms FadeIn_Parms;
	FadeIn_Parms.FadeSpeed = FadeSpeed;

	this->ProcessEvent ( pFnFadeIn, &FadeIn_Parms, NULL );
};

// Function NetherGame.GFxCircleMeter.FadeAway
// [0x00020002] 
// Parameters infos:
// float                          FadeSpeed                      ( CPF_Parm )

void UGFxCircleMeter::FadeAway ( float FadeSpeed )
{
	static UFunction* pFnFadeAway = NULL;

	if ( ! pFnFadeAway )
		pFnFadeAway = (UFunction*) UObject::GObjObjects()->Data[ 69897 ];

	UGFxCircleMeter_execFadeAway_Parms FadeAway_Parms;
	FadeAway_Parms.FadeSpeed = FadeSpeed;

	this->ProcessEvent ( pFnFadeAway, &FadeAway_Parms, NULL );
};

// Function NetherGame.GFxCircleMeter.StartTimedFillUp
// [0x00020002] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )

void UGFxCircleMeter::StartTimedFillUp ( float Duration )
{
	static UFunction* pFnStartTimedFillUp = NULL;

	if ( ! pFnStartTimedFillUp )
		pFnStartTimedFillUp = (UFunction*) UObject::GObjObjects()->Data[ 69895 ];

	UGFxCircleMeter_execStartTimedFillUp_Parms StartTimedFillUp_Parms;
	StartTimedFillUp_Parms.Duration = Duration;

	this->ProcessEvent ( pFnStartTimedFillUp, &StartTimedFillUp_Parms, NULL );
};

// Function NetherGame.GFxCircleMeter.SetAmountFull
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UGFxCircleMeter::SetAmountFull ( float Amount )
{
	static UFunction* pFnSetAmountFull = NULL;

	if ( ! pFnSetAmountFull )
		pFnSetAmountFull = (UFunction*) UObject::GObjObjects()->Data[ 69893 ];

	UGFxCircleMeter_execSetAmountFull_Parms SetAmountFull_Parms;
	SetAmountFull_Parms.Amount = Amount;

	this->ProcessEvent ( pFnSetAmountFull, &SetAmountFull_Parms, NULL );
};

// Function NetherGame.GFxMapIcon.SetIconRotation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewRotaion                     ( CPF_Parm )

void UGFxMapIcon::SetIconRotation ( int NewRotaion )
{
	static UFunction* pFnSetIconRotation = NULL;

	if ( ! pFnSetIconRotation )
		pFnSetIconRotation = (UFunction*) UObject::GObjObjects()->Data[ 69909 ];

	UGFxMapIcon_execSetIconRotation_Parms SetIconRotation_Parms;
	SetIconRotation_Parms.NewRotaion = NewRotaion;

	this->ProcessEvent ( pFnSetIconRotation, &SetIconRotation_Parms, NULL );
};

// Function NetherGame.GFxMapIcon.CorrectScale
// [0x00820002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UGFxMapIcon::CorrectScale ( float Amount )
{
	static UFunction* pFnCorrectScale = NULL;

	if ( ! pFnCorrectScale )
		pFnCorrectScale = (UFunction*) UObject::GObjObjects()->Data[ 69906 ];

	UGFxMapIcon_execCorrectScale_Parms CorrectScale_Parms;
	CorrectScale_Parms.Amount = Amount;

	this->ProcessEvent ( pFnCorrectScale, &CorrectScale_Parms, NULL );
};

// Function NetherGame.GFxDebugPoint.CorrectScale
// [0x00020000] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UGFxDebugPoint::CorrectScale ( float Amount )
{
	static UFunction* pFnCorrectScale = NULL;

	if ( ! pFnCorrectScale )
		pFnCorrectScale = (UFunction*) UObject::GObjObjects()->Data[ 69915 ];

	UGFxDebugPoint_execCorrectScale_Parms CorrectScale_Parms;
	CorrectScale_Parms.Amount = Amount;

	this->ProcessEvent ( pFnCorrectScale, &CorrectScale_Parms, NULL );
};

// Function NetherGame.GFxDebugPoint.AS_SetColor
// [0x00020002] 
// Parameters infos:
// int                            ColorIndex                     ( CPF_Parm )

void UGFxDebugPoint::AS_SetColor ( int ColorIndex )
{
	static UFunction* pFnAS_SetColor = NULL;

	if ( ! pFnAS_SetColor )
		pFnAS_SetColor = (UFunction*) UObject::GObjObjects()->Data[ 69913 ];

	UGFxDebugPoint_execAS_SetColor_Parms AS_SetColor_Parms;
	AS_SetColor_Parms.ColorIndex = ColorIndex;

	this->ProcessEvent ( pFnAS_SetColor, &AS_SetColor_Parms, NULL );
};

// Function NetherGame.GFxDropDown.DropDownButtonClicked
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UGFxDropDown::DropDownButtonClicked ( class UGFxButton* Button )
{
	static UFunction* pFnDropDownButtonClicked = NULL;

	if ( ! pFnDropDownButtonClicked )
		pFnDropDownButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 69986 ];

	UGFxDropDown_execDropDownButtonClicked_Parms DropDownButtonClicked_Parms;
	DropDownButtonClicked_Parms.Button = Button;

	this->ProcessEvent ( pFnDropDownButtonClicked, &DropDownButtonClicked_Parms, NULL );

	return DropDownButtonClicked_Parms.ReturnValue;
};

// Function NetherGame.GFxDropDown.CloseDropDownList
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UGFxDropDown::CloseDropDownList ( class UGFxButton* Button )
{
	static UFunction* pFnCloseDropDownList = NULL;

	if ( ! pFnCloseDropDownList )
		pFnCloseDropDownList = (UFunction*) UObject::GObjObjects()->Data[ 69982 ];

	UGFxDropDown_execCloseDropDownList_Parms CloseDropDownList_Parms;
	CloseDropDownList_Parms.Button = Button;

	this->ProcessEvent ( pFnCloseDropDownList, &CloseDropDownList_Parms, NULL );

	return CloseDropDownList_Parms.ReturnValue;
};

// Function NetherGame.GFxDropDown.OpenDropDownList
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UGFxDropDown::OpenDropDownList ( class UGFxButton* Button )
{
	static UFunction* pFnOpenDropDownList = NULL;

	if ( ! pFnOpenDropDownList )
		pFnOpenDropDownList = (UFunction*) UObject::GObjObjects()->Data[ 69977 ];

	UGFxDropDown_execOpenDropDownList_Parms OpenDropDownList_Parms;
	OpenDropDownList_Parms.Button = Button;

	this->ProcessEvent ( pFnOpenDropDownList, &OpenDropDownList_Parms, NULL );

	return OpenDropDownList_Parms.ReturnValue;
};

// Function NetherGame.GFxDropDown.RightMouseUp
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxDropDown::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 69974 ];

	UGFxDropDown_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.GFxDropDown.RightMouseDown
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxDropDown::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 69971 ];

	UGFxDropDown_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.GFxDropDown.LeftMouseUp
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxDropDown::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 69968 ];

	UGFxDropDown_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.GFxDropDown.ApplyCurrentOption
// [0x00024002] 
// Parameters infos:
// unsigned long                  bApplyAutomatically            ( CPF_OptionalParm | CPF_Parm )

void UGFxDropDown::ApplyCurrentOption ( unsigned long bApplyAutomatically )
{
	static UFunction* pFnApplyCurrentOption = NULL;

	if ( ! pFnApplyCurrentOption )
		pFnApplyCurrentOption = (UFunction*) UObject::GObjObjects()->Data[ 69966 ];

	UGFxDropDown_execApplyCurrentOption_Parms ApplyCurrentOption_Parms;
	ApplyCurrentOption_Parms.bApplyAutomatically = bApplyAutomatically;

	this->ProcessEvent ( pFnApplyCurrentOption, &ApplyCurrentOption_Parms, NULL );
};

// Function NetherGame.GFxDropDown.PointOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UGFxDropDown::PointOver ( float X, float Y )
{
	static UFunction* pFnPointOver = NULL;

	if ( ! pFnPointOver )
		pFnPointOver = (UFunction*) UObject::GObjObjects()->Data[ 69960 ];

	UGFxDropDown_execPointOver_Parms PointOver_Parms;
	PointOver_Parms.X = X;
	PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnPointOver, &PointOver_Parms, NULL );

	return PointOver_Parms.ReturnValue;
};

// Function NetherGame.GFxDropDown.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxDropDown::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 69955 ];

	UGFxDropDown_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.GFxDropDown.SetWidth
// [0x00020002] 
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )

void UGFxDropDown::SetWidth ( float NewWidth )
{
	static UFunction* pFnSetWidth = NULL;

	if ( ! pFnSetWidth )
		pFnSetWidth = (UFunction*) UObject::GObjObjects()->Data[ 69952 ];

	UGFxDropDown_execSetWidth_Parms SetWidth_Parms;
	SetWidth_Parms.NewWidth = NewWidth;

	this->ProcessEvent ( pFnSetWidth, &SetWidth_Parms, NULL );
};

// Function NetherGame.GFxDropDown.SetOptionLabel
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )

bool UGFxDropDown::SetOptionLabel ( int Index, struct FString Label )
{
	static UFunction* pFnSetOptionLabel = NULL;

	if ( ! pFnSetOptionLabel )
		pFnSetOptionLabel = (UFunction*) UObject::GObjObjects()->Data[ 69948 ];

	UGFxDropDown_execSetOptionLabel_Parms SetOptionLabel_Parms;
	SetOptionLabel_Parms.Index = Index;
	memcpy ( &SetOptionLabel_Parms.Label, &Label, 0x10 );

	this->ProcessEvent ( pFnSetOptionLabel, &SetOptionLabel_Parms, NULL );

	return SetOptionLabel_Parms.ReturnValue;
};

// Function NetherGame.GFxDropDown.AddOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )

bool UGFxDropDown::AddOption ( struct FString Label )
{
	static UFunction* pFnAddOption = NULL;

	if ( ! pFnAddOption )
		pFnAddOption = (UFunction*) UObject::GObjObjects()->Data[ 69944 ];

	UGFxDropDown_execAddOption_Parms AddOption_Parms;
	memcpy ( &AddOption_Parms.Label, &Label, 0x10 );

	this->ProcessEvent ( pFnAddOption, &AddOption_Parms, NULL );

	return AddOption_Parms.ReturnValue;
};

// Function NetherGame.GFxDropDown.SetCurrentlySelectedOption
// [0x00020002] 
// Parameters infos:
// int                            OptionIndex                    ( CPF_Parm )

void UGFxDropDown::SetCurrentlySelectedOption ( int OptionIndex )
{
	static UFunction* pFnSetCurrentlySelectedOption = NULL;

	if ( ! pFnSetCurrentlySelectedOption )
		pFnSetCurrentlySelectedOption = (UFunction*) UObject::GObjObjects()->Data[ 69938 ];

	UGFxDropDown_execSetCurrentlySelectedOption_Parms SetCurrentlySelectedOption_Parms;
	SetCurrentlySelectedOption_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetCurrentlySelectedOption, &SetCurrentlySelectedOption_Parms, NULL );
};

// Function NetherGame.GFxDropDown.GetCurrentlySelectedOption
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGFxDropDown::GetCurrentlySelectedOption ( )
{
	static UFunction* pFnGetCurrentlySelectedOption = NULL;

	if ( ! pFnGetCurrentlySelectedOption )
		pFnGetCurrentlySelectedOption = (UFunction*) UObject::GObjObjects()->Data[ 69936 ];

	UGFxDropDown_execGetCurrentlySelectedOption_Parms GetCurrentlySelectedOption_Parms;

	this->ProcessEvent ( pFnGetCurrentlySelectedOption, &GetCurrentlySelectedOption_Parms, NULL );

	return GetCurrentlySelectedOption_Parms.ReturnValue;
};

// Function NetherGame.GFxDropDown.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxDropDown::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 69935 ];

	UGFxDropDown_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxDropDown.OptionSelectedAction
// [0x00120000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UGFxDropDown::OptionSelectedAction ( int OptionIndex )
{
	static UFunction* pFnOptionSelectedAction = NULL;

	if ( ! pFnOptionSelectedAction )
		pFnOptionSelectedAction = (UFunction*) UObject::GObjObjects()->Data[ 69923 ];

	UGFxDropDown_execOptionSelectedAction_Parms OptionSelectedAction_Parms;
	OptionSelectedAction_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnOptionSelectedAction, &OptionSelectedAction_Parms, NULL );

	return OptionSelectedAction_Parms.ReturnValue;
};

// Function NetherGame.GFxOptionBox.AS_MouseIsOver
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGFxOptionBox::AS_MouseIsOver ( )
{
	static UFunction* pFnAS_MouseIsOver = NULL;

	if ( ! pFnAS_MouseIsOver )
		pFnAS_MouseIsOver = (UFunction*) UObject::GObjObjects()->Data[ 70241 ];

	UGFxOptionBox_execAS_MouseIsOver_Parms AS_MouseIsOver_Parms;

	this->ProcessEvent ( pFnAS_MouseIsOver, &AS_MouseIsOver_Parms, NULL );

	return AS_MouseIsOver_Parms.ReturnValue;
};

// Function NetherGame.GFxOptionBox.MouseIsOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxOptionBox::MouseIsOver ( )
{
	static UFunction* pFnMouseIsOver = NULL;

	if ( ! pFnMouseIsOver )
		pFnMouseIsOver = (UFunction*) UObject::GObjObjects()->Data[ 70239 ];

	UGFxOptionBox_execMouseIsOver_Parms MouseIsOver_Parms;

	this->ProcessEvent ( pFnMouseIsOver, &MouseIsOver_Parms, NULL );

	return MouseIsOver_Parms.ReturnValue;
};

// Function NetherGame.GFxOptionBox.Unselect
// [0x00020002] 
// Parameters infos:

void UGFxOptionBox::Unselect ( )
{
	static UFunction* pFnUnselect = NULL;

	if ( ! pFnUnselect )
		pFnUnselect = (UFunction*) UObject::GObjObjects()->Data[ 70238 ];

	UGFxOptionBox_execUnselect_Parms Unselect_Parms;

	this->ProcessEvent ( pFnUnselect, &Unselect_Parms, NULL );
};

// Function NetherGame.GFxOptionBox.Select
// [0x00020002] 
// Parameters infos:

void UGFxOptionBox::Select ( )
{
	static UFunction* pFnSelect = NULL;

	if ( ! pFnSelect )
		pFnSelect = (UFunction*) UObject::GObjObjects()->Data[ 70237 ];

	UGFxOptionBox_execSelect_Parms Select_Parms;

	this->ProcessEvent ( pFnSelect, &Select_Parms, NULL );
};

// Function NetherGame.GFxOptionBox.GetLabel
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGFxOptionBox::GetLabel ( )
{
	static UFunction* pFnGetLabel = NULL;

	if ( ! pFnGetLabel )
		pFnGetLabel = (UFunction*) UObject::GObjObjects()->Data[ 69942 ];

	UGFxOptionBox_execGetLabel_Parms GetLabel_Parms;

	this->ProcessEvent ( pFnGetLabel, &GetLabel_Parms, NULL );

	return GetLabel_Parms.ReturnValue;
};

// Function NetherGame.GFxOptionBox.SetLabel
// [0x00020002] 
// Parameters infos:
// struct FString                 NewLabelText                   ( CPF_Parm | CPF_NeedCtorLink )

void UGFxOptionBox::SetLabel ( struct FString NewLabelText )
{
	static UFunction* pFnSetLabel = NULL;

	if ( ! pFnSetLabel )
		pFnSetLabel = (UFunction*) UObject::GObjObjects()->Data[ 70235 ];

	UGFxOptionBox_execSetLabel_Parms SetLabel_Parms;
	memcpy ( &SetLabel_Parms.NewLabelText, &NewLabelText, 0x10 );

	this->ProcessEvent ( pFnSetLabel, &SetLabel_Parms, NULL );
};

// Function NetherGame.GFxOptionBox.SetWidth
// [0x00020002] 
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )

void UGFxOptionBox::SetWidth ( float NewWidth )
{
	static UFunction* pFnSetWidth = NULL;

	if ( ! pFnSetWidth )
		pFnSetWidth = (UFunction*) UObject::GObjObjects()->Data[ 70233 ];

	UGFxOptionBox_execSetWidth_Parms SetWidth_Parms;
	SetWidth_Parms.NewWidth = NewWidth;

	this->ProcessEvent ( pFnSetWidth, &SetWidth_Parms, NULL );
};

// Function NetherGame.GFxOptionBox.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxOptionBox::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70232 ];

	UGFxOptionBox_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxHitIndicator.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxHitIndicator::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70005 ];

	UGFxHitIndicator_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxHitIndicator.Flash
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// float                          Intensity                      ( CPF_Parm )
// struct FVector                 HitDirection                   ( CPF_Parm )
// struct FVector                 PlayerDirection                ( CPF_Parm )

void UGFxHitIndicator::Flash ( float Intensity, struct FVector HitDirection, struct FVector PlayerDirection )
{
	static UFunction* pFnFlash = NULL;

	if ( ! pFnFlash )
		pFnFlash = (UFunction*) UObject::GObjObjects()->Data[ 69995 ];

	UGFxHitIndicator_execFlash_Parms Flash_Parms;
	Flash_Parms.Intensity = Intensity;
	memcpy ( &Flash_Parms.HitDirection, &HitDirection, 0xC );
	memcpy ( &Flash_Parms.PlayerDirection, &PlayerDirection, 0xC );

	this->ProcessEvent ( pFnFlash, &Flash_Parms, NULL );
};

// Function NetherGame.GFxItem.ShowCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxItem::ShowCount ( )
{
	static UFunction* pFnShowCount = NULL;

	if ( ! pFnShowCount )
		pFnShowCount = (UFunction*) UObject::GObjObjects()->Data[ 70037 ];

	UGFxItem_execShowCount_Parms ShowCount_Parms;

	this->ProcessEvent ( pFnShowCount, &ShowCount_Parms, NULL );
};

// Function NetherGame.GFxItem.HideCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxItem::HideCount ( )
{
	static UFunction* pFnHideCount = NULL;

	if ( ! pFnHideCount )
		pFnHideCount = (UFunction*) UObject::GObjObjects()->Data[ 70036 ];

	UGFxItem_execHideCount_Parms HideCount_Parms;

	this->ProcessEvent ( pFnHideCount, &HideCount_Parms, NULL );
};

// Function NetherGame.GFxItem.ClearPrice
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxItem::ClearPrice ( )
{
	static UFunction* pFnClearPrice = NULL;

	if ( ! pFnClearPrice )
		pFnClearPrice = (UFunction*) UObject::GObjObjects()->Data[ 70015 ];

	UGFxItem_execClearPrice_Parms ClearPrice_Parms;

	this->ProcessEvent ( pFnClearPrice, &ClearPrice_Parms, NULL );
};

// Function NetherGame.GFxItem.SetPrice
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          NormalPrice                    ( CPF_Parm )
// float                          PremiumPrice                   ( CPF_OptionalParm | CPF_Parm )

void UGFxItem::SetPrice ( float NormalPrice, float PremiumPrice )
{
	static UFunction* pFnSetPrice = NULL;

	if ( ! pFnSetPrice )
		pFnSetPrice = (UFunction*) UObject::GObjObjects()->Data[ 70028 ];

	UGFxItem_execSetPrice_Parms SetPrice_Parms;
	SetPrice_Parms.NormalPrice = NormalPrice;
	SetPrice_Parms.PremiumPrice = PremiumPrice;

	this->ProcessEvent ( pFnSetPrice, &SetPrice_Parms, NULL );
};

// Function NetherGame.GFxItem.RefreshIcon
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UGFxItem::RefreshIcon ( )
{
	static UFunction* pFnRefreshIcon = NULL;

	if ( ! pFnRefreshIcon )
		pFnRefreshIcon = (UFunction*) UObject::GObjObjects()->Data[ 70026 ];

	UGFxItem_execRefreshIcon_Parms RefreshIcon_Parms;

	this->ProcessEvent ( pFnRefreshIcon, &RefreshIcon_Parms, NULL );
};

// Function NetherGame.GFxItem.GetInventoryID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGFxItem::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 70024 ];

	UGFxItem_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.GFxItem.GetItemType
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGFxItem::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 70022 ];

	UGFxItem_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.GFxItem.IsPremium
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxItem::IsPremium ( )
{
	static UFunction* pFnIsPremium = NULL;

	if ( ! pFnIsPremium )
		pFnIsPremium = (UFunction*) UObject::GObjObjects()->Data[ 70020 ];

	UGFxItem_execIsPremium_Parms IsPremium_Parms;

	this->ProcessEvent ( pFnIsPremium, &IsPremium_Parms, NULL );

	return IsPremium_Parms.ReturnValue;
};

// Function NetherGame.GFxItem.GetInventoryClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UGFxItem::GetInventoryClass ( )
{
	static UFunction* pFnGetInventoryClass = NULL;

	if ( ! pFnGetInventoryClass )
		pFnGetInventoryClass = (UFunction*) UObject::GObjObjects()->Data[ 70016 ];

	UGFxItem_execGetInventoryClass_Parms GetInventoryClass_Parms;

	this->ProcessEvent ( pFnGetInventoryClass, &GetInventoryClass_Parms, NULL );

	return GetInventoryClass_Parms.ReturnValue;
};

// Function NetherGame.GFxItem.SetInventoryInfo
// [0x00020002] 
// Parameters infos:
// int                            InItemID                       ( CPF_Parm )
// int                            InItemCount                    ( CPF_Parm )

void UGFxItem::SetInventoryInfo ( int InItemID, int InItemCount )
{
	static UFunction* pFnSetInventoryInfo = NULL;

	if ( ! pFnSetInventoryInfo )
		pFnSetInventoryInfo = (UFunction*) UObject::GObjObjects()->Data[ 70012 ];

	UGFxItem_execSetInventoryInfo_Parms SetInventoryInfo_Parms;
	SetInventoryInfo_Parms.InItemID = InItemID;
	SetInventoryInfo_Parms.InItemCount = InItemCount;

	this->ProcessEvent ( pFnSetInventoryInfo, &SetInventoryInfo_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.GetBackpack
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// class ANBackpack*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANBackpack* ANetherInventoryManager::GetBackpack ( )
{
	static UFunction* pFnGetBackpack = NULL;

	if ( ! pFnGetBackpack )
		pFnGetBackpack = (UFunction*) UObject::GObjObjects()->Data[ 74556 ];

	ANetherInventoryManager_execGetBackpack_Parms GetBackpack_Parms;

	this->ProcessEvent ( pFnGetBackpack, &GetBackpack_Parms, NULL );

	return GetBackpack_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetInventoryByID
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

class AInventory* ANetherInventoryManager::GetInventoryByID ( int ItemId )
{
	static UFunction* pFnGetInventoryByID = NULL;

	if ( ! pFnGetInventoryByID )
		pFnGetInventoryByID = (UFunction*) UObject::GObjObjects()->Data[ 74686 ];

	ANetherInventoryManager_execGetInventoryByID_Parms GetInventoryByID_Parms;
	GetInventoryByID_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetInventoryByID, &GetInventoryByID_Parms, NULL );

	return GetInventoryByID_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetInventoryBySlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemSlot                       ( CPF_Parm )

class AInventory* ANetherInventoryManager::GetInventoryBySlot ( int ItemSlot )
{
	static UFunction* pFnGetInventoryBySlot = NULL;

	if ( ! pFnGetInventoryBySlot )
		pFnGetInventoryBySlot = (UFunction*) UObject::GObjObjects()->Data[ 74479 ];

	ANetherInventoryManager_execGetInventoryBySlot_Parms GetInventoryBySlot_Parms;
	GetInventoryBySlot_Parms.ItemSlot = ItemSlot;

	this->ProcessEvent ( pFnGetInventoryBySlot, &GetInventoryBySlot_Parms, NULL );

	return GetInventoryBySlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetBackPackItems
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// TArray< class AInventory* >    Items                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ANetherInventoryManager::GetBackPackItems ( TArray< class AInventory* >* Items )
{
	static UFunction* pFnGetBackPackItems = NULL;

	if ( ! pFnGetBackPackItems )
		pFnGetBackPackItems = (UFunction*) UObject::GObjObjects()->Data[ 74718 ];

	ANetherInventoryManager_execGetBackPackItems_Parms GetBackPackItems_Parms;

	this->ProcessEvent ( pFnGetBackPackItems, &GetBackPackItems_Parms, NULL );

	if ( Items )
		memcpy ( Items, &GetBackPackItems_Parms.Items, 0x10 );
};

// Function NetherGame.NetherInventoryManager.GetGold
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherInventoryManager::GetGold ( )
{
	static UFunction* pFnGetGold = NULL;

	if ( ! pFnGetGold )
		pFnGetGold = (UFunction*) UObject::GObjObjects()->Data[ 74715 ];

	ANetherInventoryManager_execGetGold_Parms GetGold_Parms;

	this->ProcessEvent ( pFnGetGold, &GetGold_Parms, NULL );

	return GetGold_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetMoney
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherInventoryManager::GetMoney ( )
{
	static UFunction* pFnGetMoney = NULL;

	if ( ! pFnGetMoney )
		pFnGetMoney = (UFunction*) UObject::GObjObjects()->Data[ 74712 ];

	ANetherInventoryManager_execGetMoney_Parms GetMoney_Parms;

	this->ProcessEvent ( pFnGetMoney, &GetMoney_Parms, NULL );

	return GetMoney_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetTemplateClassFromID
// [0x00022102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InID                           ( CPF_Parm )

class UClass* ANetherInventoryManager::GetTemplateClassFromID ( int InID )
{
	static UFunction* pFnGetTemplateClassFromID = NULL;

	if ( ! pFnGetTemplateClassFromID )
		pFnGetTemplateClassFromID = (UFunction*) UObject::GObjObjects()->Data[ 74709 ];

	ANetherInventoryManager_execGetTemplateClassFromID_Parms GetTemplateClassFromID_Parms;
	GetTemplateClassFromID_Parms.InID = InID;

	this->ProcessEvent ( pFnGetTemplateClassFromID, &GetTemplateClassFromID_Parms, NULL );

	return GetTemplateClassFromID_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetNetherInvClassFromID
// [0x00022102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InID                           ( CPF_Parm )

class UClass* ANetherInventoryManager::GetNetherInvClassFromID ( int InID )
{
	static UFunction* pFnGetNetherInvClassFromID = NULL;

	if ( ! pFnGetNetherInvClassFromID )
		pFnGetNetherInvClassFromID = (UFunction*) UObject::GObjObjects()->Data[ 72832 ];

	ANetherInventoryManager_execGetNetherInvClassFromID_Parms GetNetherInvClassFromID_Parms;
	GetNetherInvClassFromID_Parms.InID = InID;

	this->ProcessEvent ( pFnGetNetherInvClassFromID, &GetNetherInvClassFromID_Parms, NULL );

	return GetNetherInvClassFromID_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.AddAmmoForWeapon
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponID                       ( CPF_Parm )
// int                            AmountToAdd                    ( CPF_Parm )

int ANetherInventoryManager::AddAmmoForWeapon ( int WeaponID, int AmountToAdd )
{
	static UFunction* pFnAddAmmoForWeapon = NULL;

	if ( ! pFnAddAmmoForWeapon )
		pFnAddAmmoForWeapon = (UFunction*) UObject::GObjObjects()->Data[ 73489 ];

	ANetherInventoryManager_execAddAmmoForWeapon_Parms AddAmmoForWeapon_Parms;
	AddAmmoForWeapon_Parms.WeaponID = WeaponID;
	AddAmmoForWeapon_Parms.AmountToAdd = AmountToAdd;

	this->ProcessEvent ( pFnAddAmmoForWeapon, &AddAmmoForWeapon_Parms, NULL );

	return AddAmmoForWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.ConsumeAmmo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponID                       ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )

int ANetherInventoryManager::ConsumeAmmo ( int WeaponID, int Amount )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 74692 ];

	ANetherInventoryManager_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.WeaponID = WeaponID;
	ConsumeAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );

	return ConsumeAmmo_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetAmmoClassForWeapon
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponID                       ( CPF_Parm )

class UClass* ANetherInventoryManager::GetAmmoClassForWeapon ( int WeaponID )
{
	static UFunction* pFnGetAmmoClassForWeapon = NULL;

	if ( ! pFnGetAmmoClassForWeapon )
		pFnGetAmmoClassForWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74687 ];

	ANetherInventoryManager_execGetAmmoClassForWeapon_Parms GetAmmoClassForWeapon_Parms;
	GetAmmoClassForWeapon_Parms.WeaponID = WeaponID;

	this->ProcessEvent ( pFnGetAmmoClassForWeapon, &GetAmmoClassForWeapon_Parms, NULL );

	return GetAmmoClassForWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetAmmoCountForWeapon
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            WeaponID                       ( CPF_Parm )

int ANetherInventoryManager::GetAmmoCountForWeapon ( int WeaponID )
{
	static UFunction* pFnGetAmmoCountForWeapon = NULL;

	if ( ! pFnGetAmmoCountForWeapon )
		pFnGetAmmoCountForWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74678 ];

	ANetherInventoryManager_execGetAmmoCountForWeapon_Parms GetAmmoCountForWeapon_Parms;
	GetAmmoCountForWeapon_Parms.WeaponID = WeaponID;

	this->ProcessEvent ( pFnGetAmmoCountForWeapon, &GetAmmoCountForWeapon_Parms, NULL );

	return GetAmmoCountForWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.IsAnEquippedWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANWeap*                  Inv                            ( CPF_Parm )

bool ANetherInventoryManager::IsAnEquippedWeapon ( class ANWeap* Inv )
{
	static UFunction* pFnIsAnEquippedWeapon = NULL;

	if ( ! pFnIsAnEquippedWeapon )
		pFnIsAnEquippedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74672 ];

	ANetherInventoryManager_execIsAnEquippedWeapon_Parms IsAnEquippedWeapon_Parms;
	IsAnEquippedWeapon_Parms.Inv = Inv;

	this->ProcessEvent ( pFnIsAnEquippedWeapon, &IsAnEquippedWeapon_Parms, NULL );

	return IsAnEquippedWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetBackpackWeight
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANetherInventoryManager::GetBackpackWeight ( )
{
	static UFunction* pFnGetBackpackWeight = NULL;

	if ( ! pFnGetBackpackWeight )
		pFnGetBackpackWeight = (UFunction*) UObject::GObjObjects()->Data[ 74668 ];

	ANetherInventoryManager_execGetBackpackWeight_Parms GetBackpackWeight_Parms;

	this->ProcessEvent ( pFnGetBackpackWeight, &GetBackpackWeight_Parms, NULL );

	return GetBackpackWeight_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetFirstOpenBackpackSlot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemType                       ( CPF_Parm )

int ANetherInventoryManager::GetFirstOpenBackpackSlot ( int ItemType )
{
	static UFunction* pFnGetFirstOpenBackpackSlot = NULL;

	if ( ! pFnGetFirstOpenBackpackSlot )
		pFnGetFirstOpenBackpackSlot = (UFunction*) UObject::GObjObjects()->Data[ 74504 ];

	ANetherInventoryManager_execGetFirstOpenBackpackSlot_Parms GetFirstOpenBackpackSlot_Parms;
	GetFirstOpenBackpackSlot_Parms.ItemType = ItemType;

	this->ProcessEvent ( pFnGetFirstOpenBackpackSlot, &GetFirstOpenBackpackSlot_Parms, NULL );

	return GetFirstOpenBackpackSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.HasBackpackSlotOpen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemType                       ( CPF_Parm )

bool ANetherInventoryManager::HasBackpackSlotOpen ( int ItemType )
{
	static UFunction* pFnHasBackpackSlotOpen = NULL;

	if ( ! pFnHasBackpackSlotOpen )
		pFnHasBackpackSlotOpen = (UFunction*) UObject::GObjObjects()->Data[ 74502 ];

	ANetherInventoryManager_execHasBackpackSlotOpen_Parms HasBackpackSlotOpen_Parms;
	HasBackpackSlotOpen_Parms.ItemType = ItemType;

	this->ProcessEvent ( pFnHasBackpackSlotOpen, &HasBackpackSlotOpen_Parms, NULL );

	return HasBackpackSlotOpen_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.EquipWeapon
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANWeap*                  ToEquip                        ( CPF_Parm )
// unsigned long                  bForceWeaponSwitch             ( CPF_OptionalParm | CPF_Parm )

bool ANetherInventoryManager::EquipWeapon ( class ANWeap* ToEquip, unsigned long bForceWeaponSwitch )
{
	static UFunction* pFnEquipWeapon = NULL;

	if ( ! pFnEquipWeapon )
		pFnEquipWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74646 ];

	ANetherInventoryManager_execEquipWeapon_Parms EquipWeapon_Parms;
	EquipWeapon_Parms.ToEquip = ToEquip;
	EquipWeapon_Parms.bForceWeaponSwitch = bForceWeaponSwitch;

	this->ProcessEvent ( pFnEquipWeapon, &EquipWeapon_Parms, NULL );

	return EquipWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.EquipHeadItem
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANWardrobe*              ToEquip                        ( CPF_Parm )

bool ANetherInventoryManager::EquipHeadItem ( class ANWardrobe* ToEquip )
{
	static UFunction* pFnEquipHeadItem = NULL;

	if ( ! pFnEquipHeadItem )
		pFnEquipHeadItem = (UFunction*) UObject::GObjObjects()->Data[ 74653 ];

	ANetherInventoryManager_execEquipHeadItem_Parms EquipHeadItem_Parms;
	EquipHeadItem_Parms.ToEquip = ToEquip;

	this->ProcessEvent ( pFnEquipHeadItem, &EquipHeadItem_Parms, NULL );

	return EquipHeadItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.EquipRArmItem
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANWardrobe*              ToEquip                        ( CPF_Parm )

bool ANetherInventoryManager::EquipRArmItem ( class ANWardrobe* ToEquip )
{
	static UFunction* pFnEquipRArmItem = NULL;

	if ( ! pFnEquipRArmItem )
		pFnEquipRArmItem = (UFunction*) UObject::GObjObjects()->Data[ 74650 ];

	ANetherInventoryManager_execEquipRArmItem_Parms EquipRArmItem_Parms;
	EquipRArmItem_Parms.ToEquip = ToEquip;

	this->ProcessEvent ( pFnEquipRArmItem, &EquipRArmItem_Parms, NULL );

	return EquipRArmItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.EquipLArmItem
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANWardrobe*              ToEquip                        ( CPF_Parm )

bool ANetherInventoryManager::EquipLArmItem ( class ANWardrobe* ToEquip )
{
	static UFunction* pFnEquipLArmItem = NULL;

	if ( ! pFnEquipLArmItem )
		pFnEquipLArmItem = (UFunction*) UObject::GObjObjects()->Data[ 74647 ];

	ANetherInventoryManager_execEquipLArmItem_Parms EquipLArmItem_Parms;
	EquipLArmItem_Parms.ToEquip = ToEquip;

	this->ProcessEvent ( pFnEquipLArmItem, &EquipLArmItem_Parms, NULL );

	return EquipLArmItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.EquipWeaponBySlot
// [0x002240C3] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemSlot                       ( CPF_Parm )
// unsigned long                  bForceWeaponSwitch             ( CPF_OptionalParm | CPF_Parm )

bool ANetherInventoryManager::EquipWeaponBySlot ( int ItemSlot, unsigned long bForceWeaponSwitch )
{
	static UFunction* pFnEquipWeaponBySlot = NULL;

	if ( ! pFnEquipWeaponBySlot )
		pFnEquipWeaponBySlot = (UFunction*) UObject::GObjObjects()->Data[ 74617 ];

	ANetherInventoryManager_execEquipWeaponBySlot_Parms EquipWeaponBySlot_Parms;
	EquipWeaponBySlot_Parms.ItemSlot = ItemSlot;
	EquipWeaponBySlot_Parms.bForceWeaponSwitch = bForceWeaponSwitch;

	this->ProcessEvent ( pFnEquipWeaponBySlot, &EquipWeaponBySlot_Parms, NULL );

	return EquipWeaponBySlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.ClearItemBySlot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotNum                        ( CPF_Parm )

void ANetherInventoryManager::ClearItemBySlot ( int SlotNum )
{
	static UFunction* pFnClearItemBySlot = NULL;

	if ( ! pFnClearItemBySlot )
		pFnClearItemBySlot = (UFunction*) UObject::GObjObjects()->Data[ 74639 ];

	ANetherInventoryManager_execClearItemBySlot_Parms ClearItemBySlot_Parms;
	ClearItemBySlot_Parms.SlotNum = SlotNum;

	this->ProcessEvent ( pFnClearItemBySlot, &ClearItemBySlot_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.SwitchToBestWeapon
// [0x00024102] 
// Parameters infos:
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

void ANetherInventoryManager::SwitchToBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74636 ];

	ANetherInventoryManager_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;
	SwitchToBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.ServerSetCurrentWeapon
// [0x002200C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void ANetherInventoryManager::ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnServerSetCurrentWeapon = NULL;

	if ( ! pFnServerSetCurrentWeapon )
		pFnServerSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74634 ];

	ANetherInventoryManager_execServerSetCurrentWeapon_Parms ServerSetCurrentWeapon_Parms;
	ServerSetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnServerSetCurrentWeapon, &ServerSetCurrentWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.SetCurrentWeapon
// [0x010201C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void ANetherInventoryManager::SetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetCurrentWeapon = NULL;

	if ( ! pFnSetCurrentWeapon )
		pFnSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74632 ];

	ANetherInventoryManager_execSetCurrentWeapon_Parms SetCurrentWeapon_Parms;
	SetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetCurrentWeapon, &SetCurrentWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.ClientWeaponSet
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ANetherInventoryManager::ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 74628 ];

	ANetherInventoryManager_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.NewWeapon = NewWeapon;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.GetNextWeaponSlot
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CurrentWeaponSlot              ( CPF_Parm )

int ANetherInventoryManager::GetNextWeaponSlot ( int CurrentWeaponSlot )
{
	static UFunction* pFnGetNextWeaponSlot = NULL;

	if ( ! pFnGetNextWeaponSlot )
		pFnGetNextWeaponSlot = (UFunction*) UObject::GObjObjects()->Data[ 74624 ];

	ANetherInventoryManager_execGetNextWeaponSlot_Parms GetNextWeaponSlot_Parms;
	GetNextWeaponSlot_Parms.CurrentWeaponSlot = CurrentWeaponSlot;

	this->ProcessEvent ( pFnGetNextWeaponSlot, &GetNextWeaponSlot_Parms, NULL );

	return GetNextWeaponSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.ServerNextWeapon
// [0x00020102] 
// Parameters infos:

void ANetherInventoryManager::ServerNextWeapon ( )
{
	static UFunction* pFnServerNextWeapon = NULL;

	if ( ! pFnServerNextWeapon )
		pFnServerNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74622 ];

	ANetherInventoryManager_execServerNextWeapon_Parms ServerNextWeapon_Parms;

	this->ProcessEvent ( pFnServerNextWeapon, &ServerNextWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.NextWeapon
// [0x00020102] 
// Parameters infos:

void ANetherInventoryManager::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74621 ];

	ANetherInventoryManager_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.GetPreviousWeaponSlot
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CurrentWeaponSlot              ( CPF_Parm )

int ANetherInventoryManager::GetPreviousWeaponSlot ( int CurrentWeaponSlot )
{
	static UFunction* pFnGetPreviousWeaponSlot = NULL;

	if ( ! pFnGetPreviousWeaponSlot )
		pFnGetPreviousWeaponSlot = (UFunction*) UObject::GObjObjects()->Data[ 74616 ];

	ANetherInventoryManager_execGetPreviousWeaponSlot_Parms GetPreviousWeaponSlot_Parms;
	GetPreviousWeaponSlot_Parms.CurrentWeaponSlot = CurrentWeaponSlot;

	this->ProcessEvent ( pFnGetPreviousWeaponSlot, &GetPreviousWeaponSlot_Parms, NULL );

	return GetPreviousWeaponSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.ServerPrevWeapon
// [0x002200C2] 
// Parameters infos:

void ANetherInventoryManager::ServerPrevWeapon ( )
{
	static UFunction* pFnServerPrevWeapon = NULL;

	if ( ! pFnServerPrevWeapon )
		pFnServerPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74614 ];

	ANetherInventoryManager_execServerPrevWeapon_Parms ServerPrevWeapon_Parms;

	this->ProcessEvent ( pFnServerPrevWeapon, &ServerPrevWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.PrevWeapon
// [0x00020102] 
// Parameters infos:

void ANetherInventoryManager::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74613 ];

	ANetherInventoryManager_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.GetBestWeapon
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

class AWeapon* ANetherInventoryManager::GetBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnGetBestWeapon = NULL;

	if ( ! pFnGetBestWeapon )
		pFnGetBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74609 ];

	ANetherInventoryManager_execGetBestWeapon_Parms GetBestWeapon_Parms;
	GetBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnGetBestWeapon, &GetBestWeapon_Parms, NULL );

	return GetBestWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.ClientSetInventoryToQuickSlot
// [0x010201C2] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )
// int                            QuickSlot                      ( CPF_Parm )

void ANetherInventoryManager::ClientSetInventoryToQuickSlot ( class AInventory* Inv, int QuickSlot )
{
	static UFunction* pFnClientSetInventoryToQuickSlot = NULL;

	if ( ! pFnClientSetInventoryToQuickSlot )
		pFnClientSetInventoryToQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 74606 ];

	ANetherInventoryManager_execClientSetInventoryToQuickSlot_Parms ClientSetInventoryToQuickSlot_Parms;
	ClientSetInventoryToQuickSlot_Parms.Inv = Inv;
	ClientSetInventoryToQuickSlot_Parms.QuickSlot = QuickSlot;

	this->ProcessEvent ( pFnClientSetInventoryToQuickSlot, &ClientSetInventoryToQuickSlot_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.ServerSetInventoryToQuickslot
// [0x002200C2] 
// Parameters infos:
// int                            SlotNumber                     ( CPF_Parm )
// int                            QuickSlot                      ( CPF_Parm )

void ANetherInventoryManager::ServerSetInventoryToQuickslot ( int SlotNumber, int QuickSlot )
{
	static UFunction* pFnServerSetInventoryToQuickslot = NULL;

	if ( ! pFnServerSetInventoryToQuickslot )
		pFnServerSetInventoryToQuickslot = (UFunction*) UObject::GObjObjects()->Data[ 74602 ];

	ANetherInventoryManager_execServerSetInventoryToQuickslot_Parms ServerSetInventoryToQuickslot_Parms;
	ServerSetInventoryToQuickslot_Parms.SlotNumber = SlotNumber;
	ServerSetInventoryToQuickslot_Parms.QuickSlot = QuickSlot;

	this->ProcessEvent ( pFnServerSetInventoryToQuickslot, &ServerSetInventoryToQuickslot_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.ConsumeInventoryItem
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Item                           ( CPF_Parm )

bool ANetherInventoryManager::ConsumeInventoryItem ( class AInventory* Item )
{
	static UFunction* pFnConsumeInventoryItem = NULL;

	if ( ! pFnConsumeInventoryItem )
		pFnConsumeInventoryItem = (UFunction*) UObject::GObjObjects()->Data[ 74598 ];

	ANetherInventoryManager_execConsumeInventoryItem_Parms ConsumeInventoryItem_Parms;
	ConsumeInventoryItem_Parms.Item = Item;

	this->ProcessEvent ( pFnConsumeInventoryItem, &ConsumeInventoryItem_Parms, NULL );

	return ConsumeInventoryItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.ServerConsumeInventoryItem
// [0x002200C3] ( FUNC_Final )
// Parameters infos:
// class AInventory*              Item                           ( CPF_Parm )

void ANetherInventoryManager::ServerConsumeInventoryItem ( class AInventory* Item )
{
	static UFunction* pFnServerConsumeInventoryItem = NULL;

	if ( ! pFnServerConsumeInventoryItem )
		pFnServerConsumeInventoryItem = (UFunction*) UObject::GObjObjects()->Data[ 74580 ];

	ANetherInventoryManager_execServerConsumeInventoryItem_Parms ServerConsumeInventoryItem_Parms;
	ServerConsumeInventoryItem_Parms.Item = Item;

	this->ProcessEvent ( pFnServerConsumeInventoryItem, &ServerConsumeInventoryItem_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.ClearFromQuickSlots
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool ANetherInventoryManager::ClearFromQuickSlots ( class AInventory* Inv )
{
	static UFunction* pFnClearFromQuickSlots = NULL;

	if ( ! pFnClearFromQuickSlots )
		pFnClearFromQuickSlots = (UFunction*) UObject::GObjObjects()->Data[ 74508 ];

	ANetherInventoryManager_execClearFromQuickSlots_Parms ClearFromQuickSlots_Parms;
	ClearFromQuickSlots_Parms.Inv = Inv;

	this->ProcessEvent ( pFnClearFromQuickSlots, &ClearFromQuickSlots_Parms, NULL );

	return ClearFromQuickSlots_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.TryToAutomaticallySetToEmptyQuickslot
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool ANetherInventoryManager::TryToAutomaticallySetToEmptyQuickslot ( class AInventory* Inv )
{
	static UFunction* pFnTryToAutomaticallySetToEmptyQuickslot = NULL;

	if ( ! pFnTryToAutomaticallySetToEmptyQuickslot )
		pFnTryToAutomaticallySetToEmptyQuickslot = (UFunction*) UObject::GObjObjects()->Data[ 74505 ];

	ANetherInventoryManager_execTryToAutomaticallySetToEmptyQuickslot_Parms TryToAutomaticallySetToEmptyQuickslot_Parms;
	TryToAutomaticallySetToEmptyQuickslot_Parms.Inv = Inv;

	this->ProcessEvent ( pFnTryToAutomaticallySetToEmptyQuickslot, &TryToAutomaticallySetToEmptyQuickslot_Parms, NULL );

	return TryToAutomaticallySetToEmptyQuickslot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.SetInventoryToQuickSlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )
// int                            QuickSlotNumber                ( CPF_Parm )

bool ANetherInventoryManager::SetInventoryToQuickSlot ( class AInventory* Inv, int QuickSlotNumber )
{
	static UFunction* pFnSetInventoryToQuickSlot = NULL;

	if ( ! pFnSetInventoryToQuickSlot )
		pFnSetInventoryToQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 74581 ];

	ANetherInventoryManager_execSetInventoryToQuickSlot_Parms SetInventoryToQuickSlot_Parms;
	SetInventoryToQuickSlot_Parms.Inv = Inv;
	SetInventoryToQuickSlot_Parms.QuickSlotNumber = QuickSlotNumber;

	this->ProcessEvent ( pFnSetInventoryToQuickSlot, &SetInventoryToQuickSlot_Parms, NULL );

	return SetInventoryToQuickSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.UseQuickSlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotNum                        ( CPF_Parm )

bool ANetherInventoryManager::UseQuickSlot ( int SlotNum )
{
	static UFunction* pFnUseQuickSlot = NULL;

	if ( ! pFnUseQuickSlot )
		pFnUseQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 74576 ];

	ANetherInventoryManager_execUseQuickSlot_Parms UseQuickSlot_Parms;
	UseQuickSlot_Parms.SlotNum = SlotNum;

	this->ProcessEvent ( pFnUseQuickSlot, &UseQuickSlot_Parms, NULL );

	return UseQuickSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.DiscardInventory
// [0x00020102] 
// Parameters infos:

void ANetherInventoryManager::DiscardInventory ( )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = (UFunction*) UObject::GObjObjects()->Data[ 74574 ];

	ANetherInventoryManager_execDiscardInventory_Parms DiscardInventory_Parms;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.UnloadGun
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Item                           ( CPF_Parm )

bool ANetherInventoryManager::UnloadGun ( class AInventory* Item )
{
	static UFunction* pFnUnloadGun = NULL;

	if ( ! pFnUnloadGun )
		pFnUnloadGun = (UFunction*) UObject::GObjObjects()->Data[ 74567 ];

	ANetherInventoryManager_execUnloadGun_Parms UnloadGun_Parms;
	UnloadGun_Parms.Item = Item;

	this->ProcessEvent ( pFnUnloadGun, &UnloadGun_Parms, NULL );

	return UnloadGun_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.DropItemInFrontOfPlayer
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Item                           ( CPF_Parm )

bool ANetherInventoryManager::DropItemInFrontOfPlayer ( class AInventory* Item )
{
	static UFunction* pFnDropItemInFrontOfPlayer = NULL;

	if ( ! pFnDropItemInFrontOfPlayer )
		pFnDropItemInFrontOfPlayer = (UFunction*) UObject::GObjObjects()->Data[ 74503 ];

	ANetherInventoryManager_execDropItemInFrontOfPlayer_Parms DropItemInFrontOfPlayer_Parms;
	DropItemInFrontOfPlayer_Parms.Item = Item;

	this->ProcessEvent ( pFnDropItemInFrontOfPlayer, &DropItemInFrontOfPlayer_Parms, NULL );

	return DropItemInFrontOfPlayer_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.DropItem
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Item                           ( CPF_Parm )

bool ANetherInventoryManager::DropItem ( class AInventory* Item )
{
	static UFunction* pFnDropItem = NULL;

	if ( ! pFnDropItem )
		pFnDropItem = (UFunction*) UObject::GObjObjects()->Data[ 74555 ];

	ANetherInventoryManager_execDropItem_Parms DropItem_Parms;
	DropItem_Parms.Item = Item;

	this->ProcessEvent ( pFnDropItem, &DropItem_Parms, NULL );

	return DropItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.DropBackpack
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ANetherInventoryManager::DropBackpack ( )
{
	static UFunction* pFnDropBackpack = NULL;

	if ( ! pFnDropBackpack )
		pFnDropBackpack = (UFunction*) UObject::GObjObjects()->Data[ 73467 ];

	ANetherInventoryManager_execDropBackpack_Parms DropBackpack_Parms;

	this->ProcessEvent ( pFnDropBackpack, &DropBackpack_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.AddItemStacks
// [0x00024002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )
// int                            Stacks                         ( CPF_Parm )
// unsigned long                  bAddItemIfMissing              ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  StackableItemClass             ( CPF_OptionalParm | CPF_Parm )

int ANetherInventoryManager::AddItemStacks ( int ItemId, int Stacks, unsigned long bAddItemIfMissing, class UClass* StackableItemClass )
{
	static UFunction* pFnAddItemStacks = NULL;

	if ( ! pFnAddItemStacks )
		pFnAddItemStacks = (UFunction*) UObject::GObjObjects()->Data[ 74541 ];

	ANetherInventoryManager_execAddItemStacks_Parms AddItemStacks_Parms;
	AddItemStacks_Parms.ItemId = ItemId;
	AddItemStacks_Parms.Stacks = Stacks;
	AddItemStacks_Parms.bAddItemIfMissing = bAddItemIfMissing;
	AddItemStacks_Parms.StackableItemClass = StackableItemClass;

	this->ProcessEvent ( pFnAddItemStacks, &AddItemStacks_Parms, NULL );

	return AddItemStacks_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.RemoveFromStacks
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StackableItem                  ( CPF_Parm )
// int                            Count                          ( CPF_Parm )

bool ANetherInventoryManager::RemoveFromStacks ( class UClass* StackableItem, int Count )
{
	static UFunction* pFnRemoveFromStacks = NULL;

	if ( ! pFnRemoveFromStacks )
		pFnRemoveFromStacks = (UFunction*) UObject::GObjObjects()->Data[ 74532 ];

	ANetherInventoryManager_execRemoveFromStacks_Parms RemoveFromStacks_Parms;
	RemoveFromStacks_Parms.StackableItem = StackableItem;
	RemoveFromStacks_Parms.Count = Count;

	this->ProcessEvent ( pFnRemoveFromStacks, &RemoveFromStacks_Parms, NULL );

	return RemoveFromStacks_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetStackableInstance
// [0x00020102] 
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ClassToFind                    ( CPF_Parm )

class AInventory* ANetherInventoryManager::GetStackableInstance ( class UClass* ClassToFind )
{
	static UFunction* pFnGetStackableInstance = NULL;

	if ( ! pFnGetStackableInstance )
		pFnGetStackableInstance = (UFunction*) UObject::GObjObjects()->Data[ 74525 ];

	ANetherInventoryManager_execGetStackableInstance_Parms GetStackableInstance_Parms;
	GetStackableInstance_Parms.ClassToFind = ClassToFind;

	this->ProcessEvent ( pFnGetStackableInstance, &GetStackableInstance_Parms, NULL );

	return GetStackableInstance_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.GetAllInstancesOfClass
// [0x00020102] 
// Parameters infos:
// TArray< class AInventory* >    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UClass*                  ClassToFind                    ( CPF_Parm )

TArray< class AInventory* > ANetherInventoryManager::GetAllInstancesOfClass ( class UClass* ClassToFind )
{
	static UFunction* pFnGetAllInstancesOfClass = NULL;

	if ( ! pFnGetAllInstancesOfClass )
		pFnGetAllInstancesOfClass = (UFunction*) UObject::GObjObjects()->Data[ 74518 ];

	ANetherInventoryManager_execGetAllInstancesOfClass_Parms GetAllInstancesOfClass_Parms;
	GetAllInstancesOfClass_Parms.ClassToFind = ClassToFind;

	this->ProcessEvent ( pFnGetAllInstancesOfClass, &GetAllInstancesOfClass_Parms, NULL );

	return GetAllInstancesOfClass_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.HandlePickupQuerySimulated
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool ANetherInventoryManager::HandlePickupQuerySimulated ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnHandlePickupQuerySimulated = NULL;

	if ( ! pFnHandlePickupQuerySimulated )
		pFnHandlePickupQuerySimulated = (UFunction*) UObject::GObjObjects()->Data[ 74513 ];

	ANetherInventoryManager_execHandlePickupQuerySimulated_Parms HandlePickupQuerySimulated_Parms;
	HandlePickupQuerySimulated_Parms.ItemClass = ItemClass;
	HandlePickupQuerySimulated_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnHandlePickupQuerySimulated, &HandlePickupQuerySimulated_Parms, NULL );

	return HandlePickupQuerySimulated_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.RemoveFromInventory
// [0x00020102] 
// Parameters infos:
// class AInventory*              NInv                           ( CPF_Parm )

void ANetherInventoryManager::RemoveFromInventory ( class AInventory* NInv )
{
	static UFunction* pFnRemoveFromInventory = NULL;

	if ( ! pFnRemoveFromInventory )
		pFnRemoveFromInventory = (UFunction*) UObject::GObjObjects()->Data[ 74509 ];

	ANetherInventoryManager_execRemoveFromInventory_Parms RemoveFromInventory_Parms;
	RemoveFromInventory_Parms.NInv = NInv;

	this->ProcessEvent ( pFnRemoveFromInventory, &RemoveFromInventory_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.ClientRemoveFromInventory
// [0x010201C2] 
// Parameters infos:
// class AInventory*              NInv                           ( CPF_Parm )

void ANetherInventoryManager::ClientRemoveFromInventory ( class AInventory* NInv )
{
	static UFunction* pFnClientRemoveFromInventory = NULL;

	if ( ! pFnClientRemoveFromInventory )
		pFnClientRemoveFromInventory = (UFunction*) UObject::GObjObjects()->Data[ 74506 ];

	ANetherInventoryManager_execClientRemoveFromInventory_Parms ClientRemoveFromInventory_Parms;
	ClientRemoveFromInventory_Parms.NInv = NInv;

	this->ProcessEvent ( pFnClientRemoveFromInventory, &ClientRemoveFromInventory_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.AddInventory
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NewItem                        ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

bool ANetherInventoryManager::AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 73516 ];

	ANetherInventoryManager_execAddInventory_Parms AddInventory_Parms;
	AddInventory_Parms.NewItem = NewItem;
	AddInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );

	return AddInventory_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.AddInventoryToSlot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NewItem                        ( CPF_Parm )
// int                            Slot                           ( CPF_Parm )
// int                            Stacks                         ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

bool ANetherInventoryManager::AddInventoryToSlot ( class AInventory* NewItem, int Slot, int Stacks, unsigned long bDoNotActivate )
{
	static UFunction* pFnAddInventoryToSlot = NULL;

	if ( ! pFnAddInventoryToSlot )
		pFnAddInventoryToSlot = (UFunction*) UObject::GObjObjects()->Data[ 74484 ];

	ANetherInventoryManager_execAddInventoryToSlot_Parms AddInventoryToSlot_Parms;
	AddInventoryToSlot_Parms.NewItem = NewItem;
	AddInventoryToSlot_Parms.Slot = Slot;
	AddInventoryToSlot_Parms.Stacks = Stacks;
	AddInventoryToSlot_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnAddInventoryToSlot, &AddInventoryToSlot_Parms, NULL );

	return AddInventoryToSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.HasInventoryOfClassOrSubClass
// [0x00020002] 
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InvClass                       ( CPF_Parm )

class AInventory* ANetherInventoryManager::HasInventoryOfClassOrSubClass ( class UClass* InvClass )
{
	static UFunction* pFnHasInventoryOfClassOrSubClass = NULL;

	if ( ! pFnHasInventoryOfClassOrSubClass )
		pFnHasInventoryOfClassOrSubClass = (UFunction*) UObject::GObjObjects()->Data[ 74480 ];

	ANetherInventoryManager_execHasInventoryOfClassOrSubClass_Parms HasInventoryOfClassOrSubClass_Parms;
	HasInventoryOfClassOrSubClass_Parms.InvClass = InvClass;

	this->ProcessEvent ( pFnHasInventoryOfClassOrSubClass, &HasInventoryOfClassOrSubClass_Parms, NULL );

	return HasInventoryOfClassOrSubClass_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.SaveWeaponAmmoCounts
// [0x00020002] 
// Parameters infos:

void ANetherInventoryManager::SaveWeaponAmmoCounts ( )
{
	static UFunction* pFnSaveWeaponAmmoCounts = NULL;

	if ( ! pFnSaveWeaponAmmoCounts )
		pFnSaveWeaponAmmoCounts = (UFunction*) UObject::GObjObjects()->Data[ 74475 ];

	ANetherInventoryManager_execSaveWeaponAmmoCounts_Parms SaveWeaponAmmoCounts_Parms;

	this->ProcessEvent ( pFnSaveWeaponAmmoCounts, &SaveWeaponAmmoCounts_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.CreateInventoryInSlot
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )
// int                            Stacks                         ( CPF_Parm )
// int                            Slot                           ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

bool ANetherInventoryManager::CreateInventoryInSlot ( int ItemId, int Stacks, int Slot, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventoryInSlot = NULL;

	if ( ! pFnCreateInventoryInSlot )
		pFnCreateInventoryInSlot = (UFunction*) UObject::GObjObjects()->Data[ 74464 ];

	ANetherInventoryManager_execCreateInventoryInSlot_Parms CreateInventoryInSlot_Parms;
	CreateInventoryInSlot_Parms.ItemId = ItemId;
	CreateInventoryInSlot_Parms.Stacks = Stacks;
	CreateInventoryInSlot_Parms.Slot = Slot;
	CreateInventoryInSlot_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventoryInSlot, &CreateInventoryInSlot_Parms, NULL );

	return CreateInventoryInSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryManager.UpdateBackpackVisibility
// [0x00020102] 
// Parameters infos:

void ANetherInventoryManager::UpdateBackpackVisibility ( )
{
	static UFunction* pFnUpdateBackpackVisibility = NULL;

	if ( ! pFnUpdateBackpackVisibility )
		pFnUpdateBackpackVisibility = (UFunction*) UObject::GObjObjects()->Data[ 74463 ];

	ANetherInventoryManager_execUpdateBackpackVisibility_Parms UpdateBackpackVisibility_Parms;

	this->ProcessEvent ( pFnUpdateBackpackVisibility, &UpdateBackpackVisibility_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.SwitchWeapon
// [0x00020100] 
// Parameters infos:
// unsigned char                  NewGroup                       ( CPF_Parm )

void ANetherInventoryManager::SwitchWeapon ( unsigned char NewGroup )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 74461 ];

	ANetherInventoryManager_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.NewGroup = NewGroup;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.UpdateAttachmentsForThirdPerson
// [0x00020102] 
// Parameters infos:

void ANetherInventoryManager::UpdateAttachmentsForThirdPerson ( )
{
	static UFunction* pFnUpdateAttachmentsForThirdPerson = NULL;

	if ( ! pFnUpdateAttachmentsForThirdPerson )
		pFnUpdateAttachmentsForThirdPerson = (UFunction*) UObject::GObjObjects()->Data[ 74460 ];

	ANetherInventoryManager_execUpdateAttachmentsForThirdPerson_Parms UpdateAttachmentsForThirdPerson_Parms;

	this->ProcessEvent ( pFnUpdateAttachmentsForThirdPerson, &UpdateAttachmentsForThirdPerson_Parms, NULL );
};

// Function NetherGame.NetherInventoryManager.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANetherInventoryManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 74459 ];

	ANetherInventoryManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.ClearMenuCloseButtonDelegates
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMoviePlayer::ClearMenuCloseButtonDelegates ( )
{
	static UFunction* pFnClearMenuCloseButtonDelegates = NULL;

	if ( ! pFnClearMenuCloseButtonDelegates )
		pFnClearMenuCloseButtonDelegates = (UFunction*) UObject::GObjObjects()->Data[ 73331 ];

	UNetherMoviePlayer_execClearMenuCloseButtonDelegates_Parms ClearMenuCloseButtonDelegates_Parms;

	this->ProcessEvent ( pFnClearMenuCloseButtonDelegates, &ClearMenuCloseButtonDelegates_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.SetMenuCloseButtonDelegates
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         EnableButtonDelegate           ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         DisableButtonDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UNetherMoviePlayer::SetMenuCloseButtonDelegates ( struct FScriptDelegate EnableButtonDelegate, struct FScriptDelegate DisableButtonDelegate )
{
	static UFunction* pFnSetMenuCloseButtonDelegates = NULL;

	if ( ! pFnSetMenuCloseButtonDelegates )
		pFnSetMenuCloseButtonDelegates = (UFunction*) UObject::GObjObjects()->Data[ 73328 ];

	UNetherMoviePlayer_execSetMenuCloseButtonDelegates_Parms SetMenuCloseButtonDelegates_Parms;
	memcpy ( &SetMenuCloseButtonDelegates_Parms.EnableButtonDelegate, &EnableButtonDelegate, 0x10 );
	memcpy ( &SetMenuCloseButtonDelegates_Parms.DisableButtonDelegate, &DisableButtonDelegate, 0x10 );

	this->ProcessEvent ( pFnSetMenuCloseButtonDelegates, &SetMenuCloseButtonDelegates_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.DisableMenuCloseButton
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMoviePlayer::DisableMenuCloseButton ( )
{
	static UFunction* pFnDisableMenuCloseButton = NULL;

	if ( ! pFnDisableMenuCloseButton )
		pFnDisableMenuCloseButton = (UFunction*) UObject::GObjObjects()->Data[ 73327 ];

	UNetherMoviePlayer_execDisableMenuCloseButton_Parms DisableMenuCloseButton_Parms;

	this->ProcessEvent ( pFnDisableMenuCloseButton, &DisableMenuCloseButton_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.EnableMenuCloseButton
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMoviePlayer::EnableMenuCloseButton ( )
{
	static UFunction* pFnEnableMenuCloseButton = NULL;

	if ( ! pFnEnableMenuCloseButton )
		pFnEnableMenuCloseButton = (UFunction*) UObject::GObjObjects()->Data[ 73326 ];

	UNetherMoviePlayer_execEnableMenuCloseButton_Parms EnableMenuCloseButton_Parms;

	this->ProcessEvent ( pFnEnableMenuCloseButton, &EnableMenuCloseButton_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.RefreshUI
// [0x00020000] 
// Parameters infos:

void UNetherMoviePlayer::RefreshUI ( )
{
	static UFunction* pFnRefreshUI = NULL;

	if ( ! pFnRefreshUI )
		pFnRefreshUI = (UFunction*) UObject::GObjObjects()->Data[ 73325 ];

	UNetherMoviePlayer_execRefreshUI_Parms RefreshUI_Parms;

	this->ProcessEvent ( pFnRefreshUI, &RefreshUI_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.KeyDown
// [0x00020000] 
// Parameters infos:
// int                            KeyCode                        ( CPF_Parm )

void UNetherMoviePlayer::KeyDown ( int KeyCode )
{
	static UFunction* pFnKeyDown = NULL;

	if ( ! pFnKeyDown )
		pFnKeyDown = (UFunction*) UObject::GObjObjects()->Data[ 73323 ];

	UNetherMoviePlayer_execKeyDown_Parms KeyDown_Parms;
	KeyDown_Parms.KeyCode = KeyCode;

	this->ProcessEvent ( pFnKeyDown, &KeyDown_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.MouseWheel
// [0x00020002] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void UNetherMoviePlayer::MouseWheel ( int Delta )
{
	static UFunction* pFnMouseWheel = NULL;

	if ( ! pFnMouseWheel )
		pFnMouseWheel = (UFunction*) UObject::GObjObjects()->Data[ 73320 ];

	UNetherMoviePlayer_execMouseWheel_Parms MouseWheel_Parms;
	MouseWheel_Parms.Delta = Delta;

	this->ProcessEvent ( pFnMouseWheel, &MouseWheel_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.RightMouseDownCallBack
// [0x00020000] 
// Parameters infos:
// class UIGFxClickable*          ClickableElement               ( CPF_Parm )

void UNetherMoviePlayer::RightMouseDownCallBack ( class UIGFxClickable* ClickableElement )
{
	static UFunction* pFnRightMouseDownCallBack = NULL;

	if ( ! pFnRightMouseDownCallBack )
		pFnRightMouseDownCallBack = (UFunction*) UObject::GObjObjects()->Data[ 73318 ];

	UNetherMoviePlayer_execRightMouseDownCallBack_Parms RightMouseDownCallBack_Parms;
	RightMouseDownCallBack_Parms.ClickableElement = ClickableElement;

	this->ProcessEvent ( pFnRightMouseDownCallBack, &RightMouseDownCallBack_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.LeftMouseDownCallBack
// [0x00020002] 
// Parameters infos:
// class UIGFxClickable*          ClickableElement               ( CPF_Parm )

void UNetherMoviePlayer::LeftMouseDownCallBack ( class UIGFxClickable* ClickableElement )
{
	static UFunction* pFnLeftMouseDownCallBack = NULL;

	if ( ! pFnLeftMouseDownCallBack )
		pFnLeftMouseDownCallBack = (UFunction*) UObject::GObjObjects()->Data[ 73315 ];

	UNetherMoviePlayer_execLeftMouseDownCallBack_Parms LeftMouseDownCallBack_Parms;
	LeftMouseDownCallBack_Parms.ClickableElement = ClickableElement;

	this->ProcessEvent ( pFnLeftMouseDownCallBack, &LeftMouseDownCallBack_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.RightMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMoviePlayer::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 73311 ];

	UNetherMoviePlayer_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.RightMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMoviePlayer::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 73307 ];

	UNetherMoviePlayer_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.LeftMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMoviePlayer::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 73303 ];

	UNetherMoviePlayer_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMoviePlayer::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 73299 ];

	UNetherMoviePlayer_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.MouseMoved
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMoviePlayer::MouseMoved ( float X, float Y )
{
	static UFunction* pFnMouseMoved = NULL;

	if ( ! pFnMouseMoved )
		pFnMouseMoved = (UFunction*) UObject::GObjObjects()->Data[ 73296 ];

	UNetherMoviePlayer_execMouseMoved_Parms MouseMoved_Parms;
	MouseMoved_Parms.X = X;
	MouseMoved_Parms.Y = Y;

	this->ProcessEvent ( pFnMouseMoved, &MouseMoved_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.CheckIfMouseOverClickableElement
// [0x00080002] 
// Parameters infos:
// class UIGFxClickable*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

class UIGFxClickable* UNetherMoviePlayer::CheckIfMouseOverClickableElement ( float X, float Y )
{
	static UFunction* pFnCheckIfMouseOverClickableElement = NULL;

	if ( ! pFnCheckIfMouseOverClickableElement )
		pFnCheckIfMouseOverClickableElement = (UFunction*) UObject::GObjObjects()->Data[ 73291 ];

	UNetherMoviePlayer_execCheckIfMouseOverClickableElement_Parms CheckIfMouseOverClickableElement_Parms;
	CheckIfMouseOverClickableElement_Parms.X = X;
	CheckIfMouseOverClickableElement_Parms.Y = Y;

	this->ProcessEvent ( pFnCheckIfMouseOverClickableElement, &CheckIfMouseOverClickableElement_Parms, NULL );

	return CheckIfMouseOverClickableElement_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.CheckIfMouseOverButtons
// [0x00080002] 
// Parameters infos:
// class UGFxButton*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxButton* UNetherMoviePlayer::CheckIfMouseOverButtons ( )
{
	static UFunction* pFnCheckIfMouseOverButtons = NULL;

	if ( ! pFnCheckIfMouseOverButtons )
		pFnCheckIfMouseOverButtons = (UFunction*) UObject::GObjObjects()->Data[ 73288 ];

	UNetherMoviePlayer_execCheckIfMouseOverButtons_Parms CheckIfMouseOverButtons_Parms;

	this->ProcessEvent ( pFnCheckIfMouseOverButtons, &CheckIfMouseOverButtons_Parms, NULL );

	return CheckIfMouseOverButtons_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.ToFixed
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          Number                         ( CPF_Parm )
// int                            NumDecimals                    ( CPF_Parm )

struct FString UNetherMoviePlayer::ToFixed ( float Number, int NumDecimals )
{
	static UFunction* pFnToFixed = NULL;

	if ( ! pFnToFixed )
		pFnToFixed = (UFunction*) UObject::GObjObjects()->Data[ 70034 ];

	UNetherMoviePlayer_execToFixed_Parms ToFixed_Parms;
	ToFixed_Parms.Number = Number;
	ToFixed_Parms.NumDecimals = NumDecimals;

	this->ProcessEvent ( pFnToFixed, &ToFixed_Parms, NULL );

	return ToFixed_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.IsFrontendMovie
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherMoviePlayer::IsFrontendMovie ( )
{
	static UFunction* pFnIsFrontendMovie = NULL;

	if ( ! pFnIsFrontendMovie )
		pFnIsFrontendMovie = (UFunction*) UObject::GObjObjects()->Data[ 73280 ];

	UNetherMoviePlayer_execIsFrontendMovie_Parms IsFrontendMovie_Parms;

	this->ProcessEvent ( pFnIsFrontendMovie, &IsFrontendMovie_Parms, NULL );

	return IsFrontendMovie_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetHUD
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherHUD*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherHUD* UNetherMoviePlayer::GetHUD ( )
{
	static UFunction* pFnGetHUD = NULL;

	if ( ! pFnGetHUD )
		pFnGetHUD = (UFunction*) UObject::GObjObjects()->Data[ 73278 ];

	UNetherMoviePlayer_execGetHUD_Parms GetHUD_Parms;

	this->ProcessEvent ( pFnGetHUD, &GetHUD_Parms, NULL );

	return GetHUD_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetNetherPawn
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherPawn*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherPawn* UNetherMoviePlayer::GetNetherPawn ( )
{
	static UFunction* pFnGetNetherPawn = NULL;

	if ( ! pFnGetNetherPawn )
		pFnGetNetherPawn = (UFunction*) UObject::GObjObjects()->Data[ 73276 ];

	UNetherMoviePlayer_execGetNetherPawn_Parms GetNetherPawn_Parms;

	this->ProcessEvent ( pFnGetNetherPawn, &GetNetherPawn_Parms, NULL );

	return GetNetherPawn_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetNetherPC
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherPlayerController* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherPlayerController* UNetherMoviePlayer::GetNetherPC ( )
{
	static UFunction* pFnGetNetherPC = NULL;

	if ( ! pFnGetNetherPC )
		pFnGetNetherPC = (UFunction*) UObject::GObjObjects()->Data[ 73246 ];

	UNetherMoviePlayer_execGetNetherPC_Parms GetNetherPC_Parms;

	this->ProcessEvent ( pFnGetNetherPC, &GetNetherPC_Parms, NULL );

	return GetNetherPC_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetInventoryManager
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherInventoryManager* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANetherInventoryManager* UNetherMoviePlayer::GetInventoryManager ( )
{
	static UFunction* pFnGetInventoryManager = NULL;

	if ( ! pFnGetInventoryManager )
		pFnGetInventoryManager = (UFunction*) UObject::GObjObjects()->Data[ 73273 ];

	UNetherMoviePlayer_execGetInventoryManager_Parms GetInventoryManager_Parms;

	this->ProcessEvent ( pFnGetInventoryManager, &GetInventoryManager_Parms, NULL );

	return GetInventoryManager_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetMouseY
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherMoviePlayer::GetMouseY ( )
{
	static UFunction* pFnGetMouseY = NULL;

	if ( ! pFnGetMouseY )
		pFnGetMouseY = (UFunction*) UObject::GObjObjects()->Data[ 73271 ];

	UNetherMoviePlayer_execGetMouseY_Parms GetMouseY_Parms;

	this->ProcessEvent ( pFnGetMouseY, &GetMouseY_Parms, NULL );

	return GetMouseY_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetMouseX
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherMoviePlayer::GetMouseX ( )
{
	static UFunction* pFnGetMouseX = NULL;

	if ( ! pFnGetMouseX )
		pFnGetMouseX = (UFunction*) UObject::GObjObjects()->Data[ 70403 ];

	UNetherMoviePlayer_execGetMouseX_Parms GetMouseX_Parms;

	this->ProcessEvent ( pFnGetMouseX, &GetMouseX_Parms, NULL );

	return GetMouseX_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.OverrideMouseCursor
// [0x00020000] 
// Parameters infos:
// class UGFxObject*              NewCursor                      ( CPF_Parm )

void UNetherMoviePlayer::OverrideMouseCursor ( class UGFxObject* NewCursor )
{
	static UFunction* pFnOverrideMouseCursor = NULL;

	if ( ! pFnOverrideMouseCursor )
		pFnOverrideMouseCursor = (UFunction*) UObject::GObjObjects()->Data[ 73268 ];

	UNetherMoviePlayer_execOverrideMouseCursor_Parms OverrideMouseCursor_Parms;
	OverrideMouseCursor_Parms.NewCursor = NewCursor;

	this->ProcessEvent ( pFnOverrideMouseCursor, &OverrideMouseCursor_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.GetAnimatedObject
// [0x00020002] 
// Parameters infos:
// class UGFxAnimatedObject*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )

class UGFxAnimatedObject* UNetherMoviePlayer::GetAnimatedObject ( struct FString Path )
{
	static UFunction* pFnGetAnimatedObject = NULL;

	if ( ! pFnGetAnimatedObject )
		pFnGetAnimatedObject = (UFunction*) UObject::GObjObjects()->Data[ 73265 ];

	UNetherMoviePlayer_execGetAnimatedObject_Parms GetAnimatedObject_Parms;
	memcpy ( &GetAnimatedObject_Parms.Path, &Path, 0x10 );

	this->ProcessEvent ( pFnGetAnimatedObject, &GetAnimatedObject_Parms, NULL );

	return GetAnimatedObject_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetNetherVariableObject
// [0x00020002] 
// Parameters infos:
// class UGFxNetherObject*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )

class UGFxNetherObject* UNetherMoviePlayer::GetNetherVariableObject ( struct FString Path )
{
	static UFunction* pFnGetNetherVariableObject = NULL;

	if ( ! pFnGetNetherVariableObject )
		pFnGetNetherVariableObject = (UFunction*) UObject::GObjObjects()->Data[ 73262 ];

	UNetherMoviePlayer_execGetNetherVariableObject_Parms GetNetherVariableObject_Parms;
	memcpy ( &GetNetherVariableObject_Parms.Path, &Path, 0x10 );

	this->ProcessEvent ( pFnGetNetherVariableObject, &GetNetherVariableObject_Parms, NULL );

	return GetNetherVariableObject_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetRotationAngleZ
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                Rotation                       ( CPF_Parm )

float UNetherMoviePlayer::GetRotationAngleZ ( struct FRotator Rotation )
{
	static UFunction* pFnGetRotationAngleZ = NULL;

	if ( ! pFnGetRotationAngleZ )
		pFnGetRotationAngleZ = (UFunction*) UObject::GObjObjects()->Data[ 73259 ];

	UNetherMoviePlayer_execGetRotationAngleZ_Parms GetRotationAngleZ_Parms;
	memcpy ( &GetRotationAngleZ_Parms.Rotation, &Rotation, 0xC );

	this->ProcessEvent ( pFnGetRotationAngleZ, &GetRotationAngleZ_Parms, NULL );

	return GetRotationAngleZ_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.GetRootObj
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxObject* UNetherMoviePlayer::GetRootObj ( )
{
	static UFunction* pFnGetRootObj = NULL;

	if ( ! pFnGetRootObj )
		pFnGetRootObj = (UFunction*) UObject::GObjObjects()->Data[ 71125 ];

	UNetherMoviePlayer_execGetRootObj_Parms GetRootObj_Parms;

	this->ProcessEvent ( pFnGetRootObj, &GetRootObj_Parms, NULL );

	return GetRootObj_Parms.ReturnValue;
};

// Function NetherGame.NetherMoviePlayer.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UNetherMoviePlayer::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 73255 ];

	UNetherMoviePlayer_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherMoviePlayer::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 73254 ];

	UNetherMoviePlayer_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.AddMouseOverElement
// [0x00020002] 
// Parameters infos:
// class UGFxNetherObject*        MouseOverElement               ( CPF_Parm )

void UNetherMoviePlayer::AddMouseOverElement ( class UGFxNetherObject* MouseOverElement )
{
	static UFunction* pFnAddMouseOverElement = NULL;

	if ( ! pFnAddMouseOverElement )
		pFnAddMouseOverElement = (UFunction*) UObject::GObjObjects()->Data[ 73252 ];

	UNetherMoviePlayer_execAddMouseOverElement_Parms AddMouseOverElement_Parms;
	AddMouseOverElement_Parms.MouseOverElement = MouseOverElement;

	this->ProcessEvent ( pFnAddMouseOverElement, &AddMouseOverElement_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.AddClickableElement
// [0x00024002] 
// Parameters infos:
// class UIGFxClickable*          ClickableElement               ( CPF_Parm )
// unsigned char                  Layer                          ( CPF_OptionalParm | CPF_Parm )

void UNetherMoviePlayer::AddClickableElement ( class UIGFxClickable* ClickableElement, unsigned char Layer )
{
	static UFunction* pFnAddClickableElement = NULL;

	if ( ! pFnAddClickableElement )
		pFnAddClickableElement = (UFunction*) UObject::GObjObjects()->Data[ 73249 ];

	UNetherMoviePlayer_execAddClickableElement_Parms AddClickableElement_Parms;
	AddClickableElement_Parms.ClickableElement = ClickableElement;
	AddClickableElement_Parms.Layer = Layer;

	this->ProcessEvent ( pFnAddClickableElement, &AddClickableElement_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherMoviePlayer::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 73241 ];

	UNetherMoviePlayer_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.OnDisableMenuCloseButton
// [0x00120000] 
// Parameters infos:

void UNetherMoviePlayer::OnDisableMenuCloseButton ( )
{
	static UFunction* pFnOnDisableMenuCloseButton = NULL;

	if ( ! pFnOnDisableMenuCloseButton )
		pFnOnDisableMenuCloseButton = (UFunction*) UObject::GObjObjects()->Data[ 73227 ];

	UNetherMoviePlayer_execOnDisableMenuCloseButton_Parms OnDisableMenuCloseButton_Parms;

	this->ProcessEvent ( pFnOnDisableMenuCloseButton, &OnDisableMenuCloseButton_Parms, NULL );
};

// Function NetherGame.NetherMoviePlayer.OnEnableMenuCloseButton
// [0x00120000] 
// Parameters infos:

void UNetherMoviePlayer::OnEnableMenuCloseButton ( )
{
	static UFunction* pFnOnEnableMenuCloseButton = NULL;

	if ( ! pFnOnEnableMenuCloseButton )
		pFnOnEnableMenuCloseButton = (UFunction*) UObject::GObjObjects()->Data[ 73229 ];

	UNetherMoviePlayer_execOnEnableMenuCloseButton_Parms OnEnableMenuCloseButton_Parms;

	this->ProcessEvent ( pFnOnEnableMenuCloseButton, &OnEnableMenuCloseButton_Parms, NULL );
};

// Function NetherGame.GFxItemSlot.IsLocked
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxItemSlot::IsLocked ( )
{
	static UFunction* pFnIsLocked = NULL;

	if ( ! pFnIsLocked )
		pFnIsLocked = (UFunction*) UObject::GObjObjects()->Data[ 70071 ];

	UGFxItemSlot_execIsLocked_Parms IsLocked_Parms;

	this->ProcessEvent ( pFnIsLocked, &IsLocked_Parms, NULL );

	return IsLocked_Parms.ReturnValue;
};

// Function NetherGame.GFxItemSlot.Unlock
// [0x00020002] 
// Parameters infos:

void UGFxItemSlot::Unlock ( )
{
	static UFunction* pFnUnlock = NULL;

	if ( ! pFnUnlock )
		pFnUnlock = (UFunction*) UObject::GObjObjects()->Data[ 70070 ];

	UGFxItemSlot_execUnlock_Parms Unlock_Parms;

	this->ProcessEvent ( pFnUnlock, &Unlock_Parms, NULL );
};

// Function NetherGame.GFxItemSlot.Lock
// [0x00020002] 
// Parameters infos:

void UGFxItemSlot::Lock ( )
{
	static UFunction* pFnLock = NULL;

	if ( ! pFnLock )
		pFnLock = (UFunction*) UObject::GObjObjects()->Data[ 70069 ];

	UGFxItemSlot_execLock_Parms Lock_Parms;

	this->ProcessEvent ( pFnLock, &Lock_Parms, NULL );
};

// Function NetherGame.GFxItemSlot.SetType
// [0x00020002] 
// Parameters infos:
// int                            ItemTypeIn                     ( CPF_Parm )

void UGFxItemSlot::SetType ( int ItemTypeIn )
{
	static UFunction* pFnSetType = NULL;

	if ( ! pFnSetType )
		pFnSetType = (UFunction*) UObject::GObjObjects()->Data[ 70067 ];

	UGFxItemSlot_execSetType_Parms SetType_Parms;
	SetType_Parms.ItemTypeIn = ItemTypeIn;

	this->ProcessEvent ( pFnSetType, &SetType_Parms, NULL );
};

// Function NetherGame.GFxItemSlot.ResetItemPosition
// [0x00020002] 
// Parameters infos:

void UGFxItemSlot::ResetItemPosition ( )
{
	static UFunction* pFnResetItemPosition = NULL;

	if ( ! pFnResetItemPosition )
		pFnResetItemPosition = (UFunction*) UObject::GObjObjects()->Data[ 70066 ];

	UGFxItemSlot_execResetItemPosition_Parms ResetItemPosition_Parms;

	this->ProcessEvent ( pFnResetItemPosition, &ResetItemPosition_Parms, NULL );
};

// Function NetherGame.GFxItemSlot.AS_MouseIsOver
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGFxItemSlot::AS_MouseIsOver ( )
{
	static UFunction* pFnAS_MouseIsOver = NULL;

	if ( ! pFnAS_MouseIsOver )
		pFnAS_MouseIsOver = (UFunction*) UObject::GObjObjects()->Data[ 70060 ];

	UGFxItemSlot_execAS_MouseIsOver_Parms AS_MouseIsOver_Parms;

	this->ProcessEvent ( pFnAS_MouseIsOver, &AS_MouseIsOver_Parms, NULL );

	return AS_MouseIsOver_Parms.ReturnValue;
};

// Function NetherGame.GFxItemSlot.CheckMouseSelection
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UGFxItemSlot::CheckMouseSelection ( float X, float Y )
{
	static UFunction* pFnCheckMouseSelection = NULL;

	if ( ! pFnCheckMouseSelection )
		pFnCheckMouseSelection = (UFunction*) UObject::GObjObjects()->Data[ 70061 ];

	UGFxItemSlot_execCheckMouseSelection_Parms CheckMouseSelection_Parms;
	CheckMouseSelection_Parms.X = X;
	CheckMouseSelection_Parms.Y = Y;

	this->ProcessEvent ( pFnCheckMouseSelection, &CheckMouseSelection_Parms, NULL );

	return CheckMouseSelection_Parms.ReturnValue;
};

// Function NetherGame.GFxItemSlot.MouseIsOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxItemSlot::MouseIsOver ( )
{
	static UFunction* pFnMouseIsOver = NULL;

	if ( ! pFnMouseIsOver )
		pFnMouseIsOver = (UFunction*) UObject::GObjObjects()->Data[ 70058 ];

	UGFxItemSlot_execMouseIsOver_Parms MouseIsOver_Parms;

	this->ProcessEvent ( pFnMouseIsOver, &MouseIsOver_Parms, NULL );

	return MouseIsOver_Parms.ReturnValue;
};

// Function NetherGame.GFxItemSlot.RemoveItem
// [0x00020002] 
// Parameters infos:
// class UGFxItem*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxItem* UGFxItemSlot::RemoveItem ( )
{
	static UFunction* pFnRemoveItem = NULL;

	if ( ! pFnRemoveItem )
		pFnRemoveItem = (UFunction*) UObject::GObjObjects()->Data[ 70055 ];

	UGFxItemSlot_execRemoveItem_Parms RemoveItem_Parms;

	this->ProcessEvent ( pFnRemoveItem, &RemoveItem_Parms, NULL );

	return RemoveItem_Parms.ReturnValue;
};

// Function NetherGame.GFxItemSlot.AddInventory
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              Inv                            ( CPF_Parm )

bool UGFxItemSlot::AddInventory ( class AInventory* Inv )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 70051 ];

	UGFxItemSlot_execAddInventory_Parms AddInventory_Parms;
	AddInventory_Parms.Inv = Inv;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );

	return AddInventory_Parms.ReturnValue;
};

// Function NetherGame.GFxItemSlot.AddItem
// [0x00020002] 
// Parameters infos:
// class UGFxItem*                ItemIn                         ( CPF_Parm )

void UGFxItemSlot::AddItem ( class UGFxItem* ItemIn )
{
	static UFunction* pFnAddItem = NULL;

	if ( ! pFnAddItem )
		pFnAddItem = (UFunction*) UObject::GObjObjects()->Data[ 70049 ];

	UGFxItemSlot_execAddItem_Parms AddItem_Parms;
	AddItem_Parms.ItemIn = ItemIn;

	this->ProcessEvent ( pFnAddItem, &AddItem_Parms, NULL );
};

// Function NetherGame.GFxItemSlot.SlotSelectedAction
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxItemSlot*            Slot                           ( CPF_Parm )

bool UGFxItemSlot::SlotSelectedAction ( class UGFxItemSlot* Slot )
{
	static UFunction* pFnSlotSelectedAction = NULL;

	if ( ! pFnSlotSelectedAction )
		pFnSlotSelectedAction = (UFunction*) UObject::GObjObjects()->Data[ 70041 ];

	UGFxItemSlot_execSlotSelectedAction_Parms SlotSelectedAction_Parms;
	SlotSelectedAction_Parms.Slot = Slot;

	this->ProcessEvent ( pFnSlotSelectedAction, &SlotSelectedAction_Parms, NULL );

	return SlotSelectedAction_Parms.ReturnValue;
};

// Function NetherGame.GFxMessageBox.AS_SetMessageStyle
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            FontSize                       ( CPF_Parm )
// struct FString                 Align                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            FontColor                      ( CPF_Parm )

void UGFxMessageBox::AS_SetMessageStyle ( int FontSize, struct FString Align, int FontColor )
{
	static UFunction* pFnAS_SetMessageStyle = NULL;

	if ( ! pFnAS_SetMessageStyle )
		pFnAS_SetMessageStyle = (UFunction*) UObject::GObjObjects()->Data[ 70116 ];

	UGFxMessageBox_execAS_SetMessageStyle_Parms AS_SetMessageStyle_Parms;
	AS_SetMessageStyle_Parms.FontSize = FontSize;
	memcpy ( &AS_SetMessageStyle_Parms.Align, &Align, 0x10 );
	AS_SetMessageStyle_Parms.FontColor = FontColor;

	this->ProcessEvent ( pFnAS_SetMessageStyle, &AS_SetMessageStyle_Parms, NULL );
};

// Function NetherGame.GFxMessageBox.MessageDone
// [0x00020102] 
// Parameters infos:

void UGFxMessageBox::MessageDone ( )
{
	static UFunction* pFnMessageDone = NULL;

	if ( ! pFnMessageDone )
		pFnMessageDone = (UFunction*) UObject::GObjObjects()->Data[ 70124 ];

	UGFxMessageBox_execMessageDone_Parms MessageDone_Parms;

	this->ProcessEvent ( pFnMessageDone, &MessageDone_Parms, NULL );
};

// Function NetherGame.GFxMessageBox.Tick
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxMessageBox::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70120 ];

	UGFxMessageBox_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxMessageBox.PlayClearMessageAnimation
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UGFxMessageBox::PlayClearMessageAnimation ( )
{
	static UFunction* pFnPlayClearMessageAnimation = NULL;

	if ( ! pFnPlayClearMessageAnimation )
		pFnPlayClearMessageAnimation = (UFunction*) UObject::GObjObjects()->Data[ 70117 ];

	UGFxMessageBox_execPlayClearMessageAnimation_Parms PlayClearMessageAnimation_Parms;

	this->ProcessEvent ( pFnPlayClearMessageAnimation, &PlayClearMessageAnimation_Parms, NULL );
};

// Function NetherGame.GFxMessageBox.PlayShowMessageAnimation
// [0x00840103] ( FUNC_Final )
// Parameters infos:
// struct FMessage                MessageIn                      ( CPF_Parm | CPF_NeedCtorLink )

void UGFxMessageBox::PlayShowMessageAnimation ( struct FMessage MessageIn )
{
	static UFunction* pFnPlayShowMessageAnimation = NULL;

	if ( ! pFnPlayShowMessageAnimation )
		pFnPlayShowMessageAnimation = (UFunction*) UObject::GObjObjects()->Data[ 70112 ];

	UGFxMessageBox_execPlayShowMessageAnimation_Parms PlayShowMessageAnimation_Parms;
	memcpy ( &PlayShowMessageAnimation_Parms.MessageIn, &MessageIn, 0x38 );

	this->ProcessEvent ( pFnPlayShowMessageAnimation, &PlayShowMessageAnimation_Parms, NULL );
};

// Function NetherGame.GFxMessageBox.PostMessage
// [0x00024102] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// int                            PosX                           ( CPF_OptionalParm | CPF_Parm )
// int                            PosY                           ( CPF_OptionalParm | CPF_Parm )
// int                            FontSize                       ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Align                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            FontColor                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShowImmediately               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShowOnlyIfUnique              ( CPF_OptionalParm | CPF_Parm )
// float                          Width                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bClearQueue                    ( CPF_OptionalParm | CPF_Parm )

void UGFxMessageBox::PostMessage ( struct FString Text, float Duration, int PosX, int PosY, int FontSize, struct FString Align, int FontColor, unsigned long bShowImmediately, unsigned long bShowOnlyIfUnique, float Width, unsigned long bClearQueue )
{
	static UFunction* pFnPostMessage = NULL;

	if ( ! pFnPostMessage )
		pFnPostMessage = (UFunction*) UObject::GObjObjects()->Data[ 70097 ];

	UGFxMessageBox_execPostMessage_Parms PostMessage_Parms;
	memcpy ( &PostMessage_Parms.Text, &Text, 0x10 );
	PostMessage_Parms.Duration = Duration;
	PostMessage_Parms.PosX = PosX;
	PostMessage_Parms.PosY = PosY;
	PostMessage_Parms.FontSize = FontSize;
	memcpy ( &PostMessage_Parms.Align, &Align, 0x10 );
	PostMessage_Parms.FontColor = FontColor;
	PostMessage_Parms.bShowImmediately = bShowImmediately;
	PostMessage_Parms.bShowOnlyIfUnique = bShowOnlyIfUnique;
	PostMessage_Parms.Width = Width;
	PostMessage_Parms.bClearQueue = bClearQueue;

	this->ProcessEvent ( pFnPostMessage, &PostMessage_Parms, NULL );
};

// Function NetherGame.GFxMessageBox.ClearMessageQueue
// [0x00020002] 
// Parameters infos:

void UGFxMessageBox::ClearMessageQueue ( )
{
	static UFunction* pFnClearMessageQueue = NULL;

	if ( ! pFnClearMessageQueue )
		pFnClearMessageQueue = (UFunction*) UObject::GObjObjects()->Data[ 70095 ];

	UGFxMessageBox_execClearMessageQueue_Parms ClearMessageQueue_Parms;

	this->ProcessEvent ( pFnClearMessageQueue, &ClearMessageQueue_Parms, NULL );
};

// Function NetherGame.GFxMessageBox.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxMessageBox::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70094 ];

	UGFxMessageBox_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.MouseMoved
// [0x00020000] 
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )

void UGFxMessageWindow::MouseMoved ( int X, int Y )
{
	static UFunction* pFnMouseMoved = NULL;

	if ( ! pFnMouseMoved )
		pFnMouseMoved = (UFunction*) UObject::GObjObjects()->Data[ 70177 ];

	UGFxMessageWindow_execMouseMoved_Parms MouseMoved_Parms;
	MouseMoved_Parms.X = X;
	MouseMoved_Parms.Y = Y;

	this->ProcessEvent ( pFnMouseMoved, &MouseMoved_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.AlwaysScroll
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxMessageWindow::AlwaysScroll ( )
{
	static UFunction* pFnAlwaysScroll = NULL;

	if ( ! pFnAlwaysScroll )
		pFnAlwaysScroll = (UFunction*) UObject::GObjObjects()->Data[ 70175 ];

	UGFxMessageWindow_execAlwaysScroll_Parms AlwaysScroll_Parms;

	this->ProcessEvent ( pFnAlwaysScroll, &AlwaysScroll_Parms, NULL );

	return AlwaysScroll_Parms.ReturnValue;
};

// Function NetherGame.GFxMessageWindow.PointOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UGFxMessageWindow::PointOver ( float X, float Y )
{
	static UFunction* pFnPointOver = NULL;

	if ( ! pFnPointOver )
		pFnPointOver = (UFunction*) UObject::GObjObjects()->Data[ 70171 ];

	UGFxMessageWindow_execPointOver_Parms PointOver_Parms;
	PointOver_Parms.X = X;
	PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnPointOver, &PointOver_Parms, NULL );

	return PointOver_Parms.ReturnValue;
};

// Function NetherGame.GFxMessageWindow.Scroll
// [0x00020002] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void UGFxMessageWindow::Scroll ( int Delta )
{
	static UFunction* pFnScroll = NULL;

	if ( ! pFnScroll )
		pFnScroll = (UFunction*) UObject::GObjObjects()->Data[ 70169 ];

	UGFxMessageWindow_execScroll_Parms Scroll_Parms;
	Scroll_Parms.Delta = Delta;

	this->ProcessEvent ( pFnScroll, &Scroll_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.SetSize
// [0x00820002] 
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UGFxMessageWindow::SetSize ( float NewWidth, float NewHeight )
{
	static UFunction* pFnSetSize = NULL;

	if ( ! pFnSetSize )
		pFnSetSize = (UFunction*) UObject::GObjObjects()->Data[ 70165 ];

	UGFxMessageWindow_execSetSize_Parms SetSize_Parms;
	SetSize_Parms.NewWidth = NewWidth;
	SetSize_Parms.NewHeight = NewHeight;

	this->ProcessEvent ( pFnSetSize, &SetSize_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.CreateTextBox
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxTextBox*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NewMessage                     ( CPF_Parm | CPF_NeedCtorLink )

class UGFxTextBox* UGFxMessageWindow::CreateTextBox ( struct FString NewMessage )
{
	static UFunction* pFnCreateTextBox = NULL;

	if ( ! pFnCreateTextBox )
		pFnCreateTextBox = (UFunction*) UObject::GObjObjects()->Data[ 70155 ];

	UGFxMessageWindow_execCreateTextBox_Parms CreateTextBox_Parms;
	memcpy ( &CreateTextBox_Parms.NewMessage, &NewMessage, 0x10 );

	this->ProcessEvent ( pFnCreateTextBox, &CreateTextBox_Parms, NULL );

	return CreateTextBox_Parms.ReturnValue;
};

// Function NetherGame.GFxMessageWindow.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxMessageWindow::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70159 ];

	UGFxMessageWindow_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.MoveMessages
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// float                          AmountY                        ( CPF_Parm )

void UGFxMessageWindow::MoveMessages ( float AmountY )
{
	static UFunction* pFnMoveMessages = NULL;

	if ( ! pFnMoveMessages )
		pFnMoveMessages = (UFunction*) UObject::GObjObjects()->Data[ 70154 ];

	UGFxMessageWindow_execMoveMessages_Parms MoveMessages_Parms;
	MoveMessages_Parms.AmountY = AmountY;

	this->ProcessEvent ( pFnMoveMessages, &MoveMessages_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.PostMessage
// [0x00024002] 
// Parameters infos:
// struct FString                 NewMessage                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            HexColor                       ( CPF_OptionalParm | CPF_Parm )

void UGFxMessageWindow::PostMessage ( struct FString NewMessage, int HexColor )
{
	static UFunction* pFnPostMessage = NULL;

	if ( ! pFnPostMessage )
		pFnPostMessage = (UFunction*) UObject::GObjObjects()->Data[ 70150 ];

	UGFxMessageWindow_execPostMessage_Parms PostMessage_Parms;
	memcpy ( &PostMessage_Parms.NewMessage, &NewMessage, 0x10 );
	PostMessage_Parms.HexColor = HexColor;

	this->ProcessEvent ( pFnPostMessage, &PostMessage_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxMessageWindow::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70147 ];

	UGFxMessageWindow_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxMessageWindow.AddMessageToList
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxTextBox*             NewMessage                     ( CPF_Parm )

void UGFxMessageWindow::AddMessageToList ( class UGFxTextBox* NewMessage )
{
	static UFunction* pFnAddMessageToList = NULL;

	if ( ! pFnAddMessageToList )
		pFnAddMessageToList = (UFunction*) UObject::GObjObjects()->Data[ 70145 ];

	UGFxMessageWindow_execAddMessageToList_Parms AddMessageToList_Parms;
	AddMessageToList_Parms.NewMessage = NewMessage;

	this->ProcessEvent ( pFnAddMessageToList, &AddMessageToList_Parms, NULL );
};

// Function NetherGame.GFxTextBox.SetColor
// [0x00020002] 
// Parameters infos:
// int                            HexColor                       ( CPF_Parm )

void UGFxTextBox::SetColor ( int HexColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 70476 ];

	UGFxTextBox_execSetColor_Parms SetColor_Parms;
	SetColor_Parms.HexColor = HexColor;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );
};

// Function NetherGame.GFxTextBox.SetMessageStyle
// [0x00020002] 
// Parameters infos:
// int                            Size                           ( CPF_Parm )
// struct FString                 Align                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            HexColor                       ( CPF_Parm )

void UGFxTextBox::SetMessageStyle ( int Size, struct FString Align, int HexColor )
{
	static UFunction* pFnSetMessageStyle = NULL;

	if ( ! pFnSetMessageStyle )
		pFnSetMessageStyle = (UFunction*) UObject::GObjObjects()->Data[ 70472 ];

	UGFxTextBox_execSetMessageStyle_Parms SetMessageStyle_Parms;
	SetMessageStyle_Parms.Size = Size;
	memcpy ( &SetMessageStyle_Parms.Align, &Align, 0x10 );
	SetMessageStyle_Parms.HexColor = HexColor;

	this->ProcessEvent ( pFnSetMessageStyle, &SetMessageStyle_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.AlwaysScroll
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxScrollWindow::AlwaysScroll ( )
{
	static UFunction* pFnAlwaysScroll = NULL;

	if ( ! pFnAlwaysScroll )
		pFnAlwaysScroll = (UFunction*) UObject::GObjObjects()->Data[ 70342 ];

	UGFxScrollWindow_execAlwaysScroll_Parms AlwaysScroll_Parms;

	this->ProcessEvent ( pFnAlwaysScroll, &AlwaysScroll_Parms, NULL );

	return AlwaysScroll_Parms.ReturnValue;
};

// Function NetherGame.GFxScrollWindow.DisableBorder
// [0x00020002] 
// Parameters infos:

void UGFxScrollWindow::DisableBorder ( )
{
	static UFunction* pFnDisableBorder = NULL;

	if ( ! pFnDisableBorder )
		pFnDisableBorder = (UFunction*) UObject::GObjObjects()->Data[ 70341 ];

	UGFxScrollWindow_execDisableBorder_Parms DisableBorder_Parms;

	this->ProcessEvent ( pFnDisableBorder, &DisableBorder_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.EnableBorder
// [0x00020002] 
// Parameters infos:

void UGFxScrollWindow::EnableBorder ( )
{
	static UFunction* pFnEnableBorder = NULL;

	if ( ! pFnEnableBorder )
		pFnEnableBorder = (UFunction*) UObject::GObjObjects()->Data[ 70340 ];

	UGFxScrollWindow_execEnableBorder_Parms EnableBorder_Parms;

	this->ProcessEvent ( pFnEnableBorder, &EnableBorder_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.SetPadding
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UGFxScrollWindow::SetPadding ( float Amount )
{
	static UFunction* pFnSetPadding = NULL;

	if ( ! pFnSetPadding )
		pFnSetPadding = (UFunction*) UObject::GObjObjects()->Data[ 70338 ];

	UGFxScrollWindow_execSetPadding_Parms SetPadding_Parms;
	SetPadding_Parms.Amount = Amount;

	this->ProcessEvent ( pFnSetPadding, &SetPadding_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.ScrollToTop
// [0x00820002] 
// Parameters infos:

void UGFxScrollWindow::ScrollToTop ( )
{
	static UFunction* pFnScrollToTop = NULL;

	if ( ! pFnScrollToTop )
		pFnScrollToTop = (UFunction*) UObject::GObjObjects()->Data[ 70336 ];

	UGFxScrollWindow_execScrollToTop_Parms ScrollToTop_Parms;

	this->ProcessEvent ( pFnScrollToTop, &ScrollToTop_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.ScrollToBottom
// [0x00820002] 
// Parameters infos:

void UGFxScrollWindow::ScrollToBottom ( )
{
	static UFunction* pFnScrollToBottom = NULL;

	if ( ! pFnScrollToBottom )
		pFnScrollToBottom = (UFunction*) UObject::GObjObjects()->Data[ 70334 ];

	UGFxScrollWindow_execScrollToBottom_Parms ScrollToBottom_Parms;

	this->ProcessEvent ( pFnScrollToBottom, &ScrollToBottom_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.ScrollY
// [0x00820002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UGFxScrollWindow::ScrollY ( float Amount )
{
	static UFunction* pFnScrollY = NULL;

	if ( ! pFnScrollY )
		pFnScrollY = (UFunction*) UObject::GObjObjects()->Data[ 70331 ];

	UGFxScrollWindow_execScrollY_Parms ScrollY_Parms;
	ScrollY_Parms.Amount = Amount;

	this->ProcessEvent ( pFnScrollY, &ScrollY_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.Scroll
// [0x00020002] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void UGFxScrollWindow::Scroll ( int Delta )
{
	static UFunction* pFnScroll = NULL;

	if ( ! pFnScroll )
		pFnScroll = (UFunction*) UObject::GObjObjects()->Data[ 70329 ];

	UGFxScrollWindow_execScroll_Parms Scroll_Parms;
	Scroll_Parms.Delta = Delta;

	this->ProcessEvent ( pFnScroll, &Scroll_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.ScrollDown
// [0x00020002] 
// Parameters infos:

void UGFxScrollWindow::ScrollDown ( )
{
	static UFunction* pFnScrollDown = NULL;

	if ( ! pFnScrollDown )
		pFnScrollDown = (UFunction*) UObject::GObjObjects()->Data[ 70328 ];

	UGFxScrollWindow_execScrollDown_Parms ScrollDown_Parms;

	this->ProcessEvent ( pFnScrollDown, &ScrollDown_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.ScrollUp
// [0x00020002] 
// Parameters infos:

void UGFxScrollWindow::ScrollUp ( )
{
	static UFunction* pFnScrollUp = NULL;

	if ( ! pFnScrollUp )
		pFnScrollUp = (UFunction*) UObject::GObjObjects()->Data[ 70327 ];

	UGFxScrollWindow_execScrollUp_Parms ScrollUp_Parms;

	this->ProcessEvent ( pFnScrollUp, &ScrollUp_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.RemoveFromWindow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Child                          ( CPF_Parm )

void UGFxScrollWindow::RemoveFromWindow ( class UGFxObject* Child )
{
	static UFunction* pFnRemoveFromWindow = NULL;

	if ( ! pFnRemoveFromWindow )
		pFnRemoveFromWindow = (UFunction*) UObject::GObjObjects()->Data[ 70325 ];

	UGFxScrollWindow_execRemoveFromWindow_Parms RemoveFromWindow_Parms;
	RemoveFromWindow_Parms.Child = Child;

	this->ProcessEvent ( pFnRemoveFromWindow, &RemoveFromWindow_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.AddToWindow
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Child                          ( CPF_Parm )

void UGFxScrollWindow::AddToWindow ( class UGFxObject* Child )
{
	static UFunction* pFnAddToWindow = NULL;

	if ( ! pFnAddToWindow )
		pFnAddToWindow = (UFunction*) UObject::GObjObjects()->Data[ 70323 ];

	UGFxScrollWindow_execAddToWindow_Parms AddToWindow_Parms;
	AddToWindow_Parms.Child = Child;

	this->ProcessEvent ( pFnAddToWindow, &AddToWindow_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.SetSize
// [0x00820002] 
// Parameters infos:
// float                          WidthIn                        ( CPF_Parm )
// float                          HeightIn                       ( CPF_Parm )

void UGFxScrollWindow::SetSize ( float WidthIn, float HeightIn )
{
	static UFunction* pFnSetSize = NULL;

	if ( ! pFnSetSize )
		pFnSetSize = (UFunction*) UObject::GObjObjects()->Data[ 70318 ];

	UGFxScrollWindow_execSetSize_Parms SetSize_Parms;
	SetSize_Parms.WidthIn = WidthIn;
	SetSize_Parms.HeightIn = HeightIn;

	this->ProcessEvent ( pFnSetSize, &SetSize_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxScrollWindow::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70315 ];

	UGFxScrollWindow_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxScrollWindow.Initialize
// [0x00820002] 
// Parameters infos:

void UGFxScrollWindow::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70313 ];

	UGFxScrollWindow_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.IGFxScrollable.PointOver
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

bool UIGFxScrollable::PointOver ( float X, float Y )
{
	static UFunction* pFnPointOver = NULL;

	if ( ! pFnPointOver )
		pFnPointOver = (UFunction*) UObject::GObjObjects()->Data[ 71088 ];

	UIGFxScrollable_execPointOver_Parms PointOver_Parms;
	PointOver_Parms.X = X;
	PointOver_Parms.Y = Y;

	this->ProcessEvent ( pFnPointOver, &PointOver_Parms, NULL );

	return PointOver_Parms.ReturnValue;
};

// Function NetherGame.IGFxScrollable.AlwaysScroll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UIGFxScrollable::AlwaysScroll ( )
{
	static UFunction* pFnAlwaysScroll = NULL;

	if ( ! pFnAlwaysScroll )
		pFnAlwaysScroll = (UFunction*) UObject::GObjObjects()->Data[ 71086 ];

	UIGFxScrollable_execAlwaysScroll_Parms AlwaysScroll_Parms;

	this->ProcessEvent ( pFnAlwaysScroll, &AlwaysScroll_Parms, NULL );

	return AlwaysScroll_Parms.ReturnValue;
};

// Function NetherGame.IGFxScrollable.Scroll
// [0x00020000] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void UIGFxScrollable::Scroll ( int Delta )
{
	static UFunction* pFnScroll = NULL;

	if ( ! pFnScroll )
		pFnScroll = (UFunction*) UObject::GObjObjects()->Data[ 71084 ];

	UIGFxScrollable_execScroll_Parms Scroll_Parms;
	Scroll_Parms.Delta = Delta;

	this->ProcessEvent ( pFnScroll, &Scroll_Parms, NULL );
};

// Function NetherGame.GFxNameTag.RefreshSize
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UGFxNameTag::RefreshSize ( )
{
	static UFunction* pFnRefreshSize = NULL;

	if ( ! pFnRefreshSize )
		pFnRefreshSize = (UFunction*) UObject::GObjObjects()->Data[ 70190 ];

	UGFxNameTag_execRefreshSize_Parms RefreshSize_Parms;

	this->ProcessEvent ( pFnRefreshSize, &RefreshSize_Parms, NULL );
};

// Function NetherGame.GFxNameTag.SetDevBorderVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVisiblity                     ( CPF_Parm )

void UGFxNameTag::SetDevBorderVisible ( unsigned long bVisiblity )
{
	static UFunction* pFnSetDevBorderVisible = NULL;

	if ( ! pFnSetDevBorderVisible )
		pFnSetDevBorderVisible = (UFunction*) UObject::GObjObjects()->Data[ 70191 ];

	UGFxNameTag_execSetDevBorderVisible_Parms SetDevBorderVisible_Parms;
	SetDevBorderVisible_Parms.bVisiblity = bVisiblity;

	this->ProcessEvent ( pFnSetDevBorderVisible, &SetDevBorderVisible_Parms, NULL );
};

// Function NetherGame.GFxNameTag.SetName
// [0x00020002] 
// Parameters infos:
// struct FString                 NewName                        ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UGFxNameTag::SetName ( struct FString NewName )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 70188 ];

	UGFxNameTag_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.NewName, &NewName, 0x10 );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function NetherGame.GFxNameTag.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxNameTag::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70187 ];

	UGFxNameTag_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxObjectiveIcon.SetTimeRemaining
// [0x00020002] 
// Parameters infos:
// struct FString                 TimeRemaining                  ( CPF_Parm | CPF_NeedCtorLink )

void UGFxObjectiveIcon::SetTimeRemaining ( struct FString TimeRemaining )
{
	static UFunction* pFnSetTimeRemaining = NULL;

	if ( ! pFnSetTimeRemaining )
		pFnSetTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 70214 ];

	UGFxObjectiveIcon_execSetTimeRemaining_Parms SetTimeRemaining_Parms;
	memcpy ( &SetTimeRemaining_Parms.TimeRemaining, &TimeRemaining, 0x10 );

	this->ProcessEvent ( pFnSetTimeRemaining, &SetTimeRemaining_Parms, NULL );
};

// Function NetherGame.GFxObjectiveIcon.SetPercentComplete
// [0x00020002] 
// Parameters infos:
// struct FString                 PercentCompleteText            ( CPF_Parm | CPF_NeedCtorLink )

void UGFxObjectiveIcon::SetPercentComplete ( struct FString PercentCompleteText )
{
	static UFunction* pFnSetPercentComplete = NULL;

	if ( ! pFnSetPercentComplete )
		pFnSetPercentComplete = (UFunction*) UObject::GObjObjects()->Data[ 70212 ];

	UGFxObjectiveIcon_execSetPercentComplete_Parms SetPercentComplete_Parms;
	memcpy ( &SetPercentComplete_Parms.PercentCompleteText, &PercentCompleteText, 0x10 );

	this->ProcessEvent ( pFnSetPercentComplete, &SetPercentComplete_Parms, NULL );
};

// Function NetherGame.GFxObjectiveIcon.SetName
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UGFxObjectiveIcon::SetName ( struct FString Text )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 70210 ];

	UGFxObjectiveIcon_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function NetherGame.GFxObjectiveIcon.UpdateInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxObjectiveIcon::UpdateInfo ( )
{
	static UFunction* pFnUpdateInfo = NULL;

	if ( ! pFnUpdateInfo )
		pFnUpdateInfo = (UFunction*) UObject::GObjObjects()->Data[ 70203 ];

	UGFxObjectiveIcon_execUpdateInfo_Parms UpdateInfo_Parms;

	this->ProcessEvent ( pFnUpdateInfo, &UpdateInfo_Parms, NULL );
};

// Function NetherGame.GFxObjectiveIcon.Init
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ANetherObjective*        InObjective                    ( CPF_Parm )

void UGFxObjectiveIcon::Init ( class ANetherObjective* InObjective )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 70199 ];

	UGFxObjectiveIcon_execInit_Parms Init_Parms;
	Init_Parms.InObjective = InObjective;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.GFxObjectiveInfo.SetObjectiveType
// [0x00020002] 
// Parameters infos:
// int                            eObjectiveType                 ( CPF_Parm )

void UGFxObjectiveInfo::SetObjectiveType ( int eObjectiveType )
{
	static UFunction* pFnSetObjectiveType = NULL;

	if ( ! pFnSetObjectiveType )
		pFnSetObjectiveType = (UFunction*) UObject::GObjObjects()->Data[ 70224 ];

	UGFxObjectiveInfo_execSetObjectiveType_Parms SetObjectiveType_Parms;
	SetObjectiveType_Parms.eObjectiveType = eObjectiveType;

	this->ProcessEvent ( pFnSetObjectiveType, &SetObjectiveType_Parms, NULL );
};

// Function NetherGame.GFxObjectiveInfo.SetTimeRemaining
// [0x00020002] 
// Parameters infos:
// struct FString                 TimeRemaining                  ( CPF_Parm | CPF_NeedCtorLink )

void UGFxObjectiveInfo::SetTimeRemaining ( struct FString TimeRemaining )
{
	static UFunction* pFnSetTimeRemaining = NULL;

	if ( ! pFnSetTimeRemaining )
		pFnSetTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 70222 ];

	UGFxObjectiveInfo_execSetTimeRemaining_Parms SetTimeRemaining_Parms;
	memcpy ( &SetTimeRemaining_Parms.TimeRemaining, &TimeRemaining, 0x10 );

	this->ProcessEvent ( pFnSetTimeRemaining, &SetTimeRemaining_Parms, NULL );
};

// Function NetherGame.GFxObjectiveInfo.SetPercentComplete
// [0x00020002] 
// Parameters infos:
// float                          Percent                        ( CPF_Parm )

void UGFxObjectiveInfo::SetPercentComplete ( float Percent )
{
	static UFunction* pFnSetPercentComplete = NULL;

	if ( ! pFnSetPercentComplete )
		pFnSetPercentComplete = (UFunction*) UObject::GObjObjects()->Data[ 70220 ];

	UGFxObjectiveInfo_execSetPercentComplete_Parms SetPercentComplete_Parms;
	SetPercentComplete_Parms.Percent = Percent;

	this->ProcessEvent ( pFnSetPercentComplete, &SetPercentComplete_Parms, NULL );
};

// Function NetherGame.GFxObjectiveInfo.SetName
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UGFxObjectiveInfo::SetName ( struct FString Text )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 70218 ];

	UGFxObjectiveInfo_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function NetherGame.GFxPointOfInterestIcon.AS_SetFontSize
// [0x00020002] 
// Parameters infos:
// float                          NewFontSize                    ( CPF_Parm )

void UGFxPointOfInterestIcon::AS_SetFontSize ( float NewFontSize )
{
	static UFunction* pFnAS_SetFontSize = NULL;

	if ( ! pFnAS_SetFontSize )
		pFnAS_SetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 70247 ];

	UGFxPointOfInterestIcon_execAS_SetFontSize_Parms AS_SetFontSize_Parms;
	AS_SetFontSize_Parms.NewFontSize = NewFontSize;

	this->ProcessEvent ( pFnAS_SetFontSize, &AS_SetFontSize_Parms, NULL );
};

// Function NetherGame.GFxPointOfInterestIcon.SetName
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UGFxPointOfInterestIcon::SetName ( struct FString Text )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 70245 ];

	UGFxPointOfInterestIcon_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function NetherGame.GFxRadar.RotateMap
// [0x00020002] 
// Parameters infos:
// float                          angleInDegrees                 ( CPF_Parm )

void UGFxRadar::RotateMap ( float angleInDegrees )
{
	static UFunction* pFnRotateMap = NULL;

	if ( ! pFnRotateMap )
		pFnRotateMap = (UFunction*) UObject::GObjObjects()->Data[ 70268 ];

	UGFxRadar_execRotateMap_Parms RotateMap_Parms;
	RotateMap_Parms.angleInDegrees = angleInDegrees;

	this->ProcessEvent ( pFnRotateMap, &RotateMap_Parms, NULL );
};

// Function NetherGame.GFxRadar.Tick
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxRadar::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70266 ];

	UGFxRadar_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxRadar.DrawDots
// [0x00820002] 
// Parameters infos:
// struct FVector                 PlayerLoc                      ( CPF_Parm )
// TArray< struct FVector >       Dots                           ( CPF_Parm | CPF_NeedCtorLink )

void UGFxRadar::DrawDots ( struct FVector PlayerLoc, TArray< struct FVector > Dots )
{
	static UFunction* pFnDrawDots = NULL;

	if ( ! pFnDrawDots )
		pFnDrawDots = (UFunction*) UObject::GObjObjects()->Data[ 70259 ];

	UGFxRadar_execDrawDots_Parms DrawDots_Parms;
	memcpy ( &DrawDots_Parms.PlayerLoc, &PlayerLoc, 0xC );
	memcpy ( &DrawDots_Parms.Dots, &Dots, 0x10 );

	this->ProcessEvent ( pFnDrawDots, &DrawDots_Parms, NULL );
};

// Function NetherGame.GFxRadar.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxRadar::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70257 ];

	UGFxRadar_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxRevealMask.SetSize
// [0x00020002] 
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UGFxRevealMask::SetSize ( float NewWidth, float NewHeight )
{
	static UFunction* pFnSetSize = NULL;

	if ( ! pFnSetSize )
		pFnSetSize = (UFunction*) UObject::GObjObjects()->Data[ 70283 ];

	UGFxRevealMask_execSetSize_Parms SetSize_Parms;
	SetSize_Parms.NewWidth = NewWidth;
	SetSize_Parms.NewHeight = NewHeight;

	this->ProcessEvent ( pFnSetSize, &SetSize_Parms, NULL );
};

// Function NetherGame.GFxRevealMask.Show
// [0x00020002] 
// Parameters infos:

void UGFxRevealMask::Show ( )
{
	static UFunction* pFnShow = NULL;

	if ( ! pFnShow )
		pFnShow = (UFunction*) UObject::GObjObjects()->Data[ 70282 ];

	UGFxRevealMask_execShow_Parms Show_Parms;

	this->ProcessEvent ( pFnShow, &Show_Parms, NULL );
};

// Function NetherGame.GFxRevealMask.Hide
// [0x00824002] 
// Parameters infos:
// unsigned long                  bSkipAnimation                 ( CPF_OptionalParm | CPF_Parm )

void UGFxRevealMask::Hide ( unsigned long bSkipAnimation )
{
	static UFunction* pFnHide = NULL;

	if ( ! pFnHide )
		pFnHide = (UFunction*) UObject::GObjObjects()->Data[ 70279 ];

	UGFxRevealMask_execHide_Parms Hide_Parms;
	Hide_Parms.bSkipAnimation = bSkipAnimation;

	this->ProcessEvent ( pFnHide, &Hide_Parms, NULL );
};

// Function NetherGame.GFxRevealMask.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxRevealMask::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70276 ];

	UGFxRevealMask_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxRevealMask.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxRevealMask::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70275 ];

	UGFxRevealMask_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxSafeZoneIcon.CorrectScale
// [0x00820002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void UGFxSafeZoneIcon::CorrectScale ( float Amount )
{
	static UFunction* pFnCorrectScale = NULL;

	if ( ! pFnCorrectScale )
		pFnCorrectScale = (UFunction*) UObject::GObjObjects()->Data[ 70290 ];

	UGFxSafeZoneIcon_execCorrectScale_Parms CorrectScale_Parms;
	CorrectScale_Parms.Amount = Amount;

	this->ProcessEvent ( pFnCorrectScale, &CorrectScale_Parms, NULL );
};

// Function NetherGame.GFxSafeZoneIcon.SetRadius
// [0x00020002] 
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UGFxSafeZoneIcon::SetRadius ( float Radius )
{
	static UFunction* pFnSetRadius = NULL;

	if ( ! pFnSetRadius )
		pFnSetRadius = (UFunction*) UObject::GObjObjects()->Data[ 70288 ];

	UGFxSafeZoneIcon_execSetRadius_Parms SetRadius_Parms;
	SetRadius_Parms.Radius = Radius;

	this->ProcessEvent ( pFnSetRadius, &SetRadius_Parms, NULL );
};

// Function NetherGame.GFxSafeZoneTriggerIcon.AS_SetFontSize
// [0x00020002] 
// Parameters infos:
// float                          NewFontSize                    ( CPF_Parm )

void UGFxSafeZoneTriggerIcon::AS_SetFontSize ( float NewFontSize )
{
	static UFunction* pFnAS_SetFontSize = NULL;

	if ( ! pFnAS_SetFontSize )
		pFnAS_SetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 70298 ];

	UGFxSafeZoneTriggerIcon_execAS_SetFontSize_Parms AS_SetFontSize_Parms;
	AS_SetFontSize_Parms.NewFontSize = NewFontSize;

	this->ProcessEvent ( pFnAS_SetFontSize, &AS_SetFontSize_Parms, NULL );
};

// Function NetherGame.GFxSafeZoneTriggerIcon.SetName
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UGFxSafeZoneTriggerIcon::SetName ( struct FString Text )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 70296 ];

	UGFxSafeZoneTriggerIcon_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function NetherGame.GFxServerButton.Deselect
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxServerButton::Deselect ( )
{
	static UFunction* pFnDeselect = NULL;

	if ( ! pFnDeselect )
		pFnDeselect = (UFunction*) UObject::GObjObjects()->Data[ 70354 ];

	UGFxServerButton_execDeselect_Parms Deselect_Parms;

	this->ProcessEvent ( pFnDeselect, &Deselect_Parms, NULL );
};

// Function NetherGame.GFxServerButton.Select
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxServerButton::Select ( )
{
	static UFunction* pFnSelect = NULL;

	if ( ! pFnSelect )
		pFnSelect = (UFunction*) UObject::GObjObjects()->Data[ 70366 ];

	UGFxServerButton_execSelect_Parms Select_Parms;

	this->ProcessEvent ( pFnSelect, &Select_Parms, NULL );
};

// Function NetherGame.GFxServerButton.IsCustomServer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxServerButton::IsCustomServer ( )
{
	static UFunction* pFnIsCustomServer = NULL;

	if ( ! pFnIsCustomServer )
		pFnIsCustomServer = (UFunction*) UObject::GObjObjects()->Data[ 70364 ];

	UGFxServerButton_execIsCustomServer_Parms IsCustomServer_Parms;

	this->ProcessEvent ( pFnIsCustomServer, &IsCustomServer_Parms, NULL );

	return IsCustomServer_Parms.ReturnValue;
};

// Function NetherGame.GFxServerButton.SetCustomServer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 InServerAddress                ( CPF_Parm | CPF_NeedCtorLink )

void UGFxServerButton::SetCustomServer ( struct FString InServerAddress )
{
	static UFunction* pFnSetCustomServer = NULL;

	if ( ! pFnSetCustomServer )
		pFnSetCustomServer = (UFunction*) UObject::GObjObjects()->Data[ 70362 ];

	UGFxServerButton_execSetCustomServer_Parms SetCustomServer_Parms;
	memcpy ( &SetCustomServer_Parms.InServerAddress, &InServerAddress, 0x10 );

	this->ProcessEvent ( pFnSetCustomServer, &SetCustomServer_Parms, NULL );
};

// Function NetherGame.GFxServerButton.AllowJoinServer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGFxServerButton::AllowJoinServer ( )
{
	static UFunction* pFnAllowJoinServer = NULL;

	if ( ! pFnAllowJoinServer )
		pFnAllowJoinServer = (UFunction*) UObject::GObjObjects()->Data[ 70360 ];

	UGFxServerButton_execAllowJoinServer_Parms AllowJoinServer_Parms;

	this->ProcessEvent ( pFnAllowJoinServer, &AllowJoinServer_Parms, NULL );

	return AllowJoinServer_Parms.ReturnValue;
};

// Function NetherGame.GFxServerButton.SetPlayerStats
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerCount                    ( CPF_Parm )
// int                            MaxPlayers                     ( CPF_Parm )

void UGFxServerButton::SetPlayerStats ( int PlayerCount, int MaxPlayers )
{
	static UFunction* pFnSetPlayerStats = NULL;

	if ( ! pFnSetPlayerStats )
		pFnSetPlayerStats = (UFunction*) UObject::GObjObjects()->Data[ 70355 ];

	UGFxServerButton_execSetPlayerStats_Parms SetPlayerStats_Parms;
	SetPlayerStats_Parms.PlayerCount = PlayerCount;
	SetPlayerStats_Parms.MaxPlayers = MaxPlayers;

	this->ProcessEvent ( pFnSetPlayerStats, &SetPlayerStats_Parms, NULL );
};

// Function NetherGame.GFxServerButton.Init
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            InIndex                        ( CPF_Parm )
// struct FString                 InServerName                   ( CPF_Parm | CPF_NeedCtorLink )

void UGFxServerButton::Init ( int InIndex, struct FString InServerName )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 70351 ];

	UGFxServerButton_execInit_Parms Init_Parms;
	Init_Parms.InIndex = InIndex;
	memcpy ( &Init_Parms.InServerName, &InServerName, 0x10 );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.GFxSlider.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxSlider::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70414 ];

	UGFxSlider_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxSlider.RightMouseUp
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxSlider::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 70411 ];

	UGFxSlider_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.GFxSlider.RightMouseDown
// [0x00020000] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxSlider::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 70408 ];

	UGFxSlider_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.GFxSlider.LeftMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxSlider::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 70405 ];

	UGFxSlider_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.GFxSlider.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UGFxSlider::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 70399 ];

	UGFxSlider_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.GFxSlider.ApplyCurrentOption
// [0x00024002] 
// Parameters infos:
// unsigned long                  bApplyAutomatically            ( CPF_OptionalParm | CPF_Parm )

void UGFxSlider::ApplyCurrentOption ( unsigned long bApplyAutomatically )
{
	static UFunction* pFnApplyCurrentOption = NULL;

	if ( ! pFnApplyCurrentOption )
		pFnApplyCurrentOption = (UFunction*) UObject::GObjObjects()->Data[ 70397 ];

	UGFxSlider_execApplyCurrentOption_Parms ApplyCurrentOption_Parms;
	ApplyCurrentOption_Parms.bApplyAutomatically = bApplyAutomatically;

	this->ProcessEvent ( pFnApplyCurrentOption, &ApplyCurrentOption_Parms, NULL );
};

// Function NetherGame.GFxSlider.SetRange
// [0x00020002] 
// Parameters infos:
// float                          Min                            ( CPF_Parm )
// float                          Max                            ( CPF_Parm )

void UGFxSlider::SetRange ( float Min, float Max )
{
	static UFunction* pFnSetRange = NULL;

	if ( ! pFnSetRange )
		pFnSetRange = (UFunction*) UObject::GObjObjects()->Data[ 70394 ];

	UGFxSlider_execSetRange_Parms SetRange_Parms;
	SetRange_Parms.Min = Min;
	SetRange_Parms.Max = Max;

	this->ProcessEvent ( pFnSetRange, &SetRange_Parms, NULL );
};

// Function NetherGame.GFxSlider.RefreshCurrentlySelectedValue
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UGFxSlider::RefreshCurrentlySelectedValue ( )
{
	static UFunction* pFnRefreshCurrentlySelectedValue = NULL;

	if ( ! pFnRefreshCurrentlySelectedValue )
		pFnRefreshCurrentlySelectedValue = (UFunction*) UObject::GObjObjects()->Data[ 70393 ];

	UGFxSlider_execRefreshCurrentlySelectedValue_Parms RefreshCurrentlySelectedValue_Parms;

	this->ProcessEvent ( pFnRefreshCurrentlySelectedValue, &RefreshCurrentlySelectedValue_Parms, NULL );
};

// Function NetherGame.GFxSlider.RefreshSliderPos
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UGFxSlider::RefreshSliderPos ( )
{
	static UFunction* pFnRefreshSliderPos = NULL;

	if ( ! pFnRefreshSliderPos )
		pFnRefreshSliderPos = (UFunction*) UObject::GObjObjects()->Data[ 70389 ];

	UGFxSlider_execRefreshSliderPos_Parms RefreshSliderPos_Parms;

	this->ProcessEvent ( pFnRefreshSliderPos, &RefreshSliderPos_Parms, NULL );
};

// Function NetherGame.GFxSlider.SetWidth
// [0x00020002] 
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )

void UGFxSlider::SetWidth ( float NewWidth )
{
	static UFunction* pFnSetWidth = NULL;

	if ( ! pFnSetWidth )
		pFnSetWidth = (UFunction*) UObject::GObjObjects()->Data[ 70390 ];

	UGFxSlider_execSetWidth_Parms SetWidth_Parms;
	SetWidth_Parms.NewWidth = NewWidth;

	this->ProcessEvent ( pFnSetWidth, &SetWidth_Parms, NULL );
};

// Function NetherGame.GFxSlider.SetCurrentlySelectedOption
// [0x00020002] 
// Parameters infos:
// float                          OptionValue                    ( CPF_Parm )

void UGFxSlider::SetCurrentlySelectedOption ( float OptionValue )
{
	static UFunction* pFnSetCurrentlySelectedOption = NULL;

	if ( ! pFnSetCurrentlySelectedOption )
		pFnSetCurrentlySelectedOption = (UFunction*) UObject::GObjObjects()->Data[ 70387 ];

	UGFxSlider_execSetCurrentlySelectedOption_Parms SetCurrentlySelectedOption_Parms;
	SetCurrentlySelectedOption_Parms.OptionValue = OptionValue;

	this->ProcessEvent ( pFnSetCurrentlySelectedOption, &SetCurrentlySelectedOption_Parms, NULL );
};

// Function NetherGame.GFxSlider.GetCurrentlySelectedValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGFxSlider::GetCurrentlySelectedValue ( )
{
	static UFunction* pFnGetCurrentlySelectedValue = NULL;

	if ( ! pFnGetCurrentlySelectedValue )
		pFnGetCurrentlySelectedValue = (UFunction*) UObject::GObjObjects()->Data[ 70385 ];

	UGFxSlider_execGetCurrentlySelectedValue_Parms GetCurrentlySelectedValue_Parms;

	this->ProcessEvent ( pFnGetCurrentlySelectedValue, &GetCurrentlySelectedValue_Parms, NULL );

	return GetCurrentlySelectedValue_Parms.ReturnValue;
};

// Function NetherGame.GFxSlider.Initialize
// [0x00020002] 
// Parameters infos:
// class UNetherInputOverlayUI*   InputOverlayIn                 ( CPF_Parm )

void UGFxSlider::Initialize ( class UNetherInputOverlayUI* InputOverlayIn )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70383 ];

	UGFxSlider_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.InputOverlayIn = InputOverlayIn;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxSlider.OptionSelectedAction
// [0x00120000] 
// Parameters infos:
// float                          OptionValue                    ( CPF_Parm )

void UGFxSlider::OptionSelectedAction ( float OptionValue )
{
	static UFunction* pFnOptionSelectedAction = NULL;

	if ( ! pFnOptionSelectedAction )
		pFnOptionSelectedAction = (UFunction*) UObject::GObjObjects()->Data[ 70370 ];

	UGFxSlider_execOptionSelectedAction_Parms OptionSelectedAction_Parms;
	OptionSelectedAction_Parms.OptionValue = OptionValue;

	this->ProcessEvent ( pFnOptionSelectedAction, &OptionSelectedAction_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.GetMouseYDelta
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherInputOverlayUI::GetMouseYDelta ( )
{
	static UFunction* pFnGetMouseYDelta = NULL;

	if ( ! pFnGetMouseYDelta )
		pFnGetMouseYDelta = (UFunction*) UObject::GObjObjects()->Data[ 74243 ];

	UNetherInputOverlayUI_execGetMouseYDelta_Parms GetMouseYDelta_Parms;

	this->ProcessEvent ( pFnGetMouseYDelta, &GetMouseYDelta_Parms, NULL );

	return GetMouseYDelta_Parms.ReturnValue;
};

// Function NetherGame.NetherInputOverlayUI.GetMouseXDelta
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherInputOverlayUI::GetMouseXDelta ( )
{
	static UFunction* pFnGetMouseXDelta = NULL;

	if ( ! pFnGetMouseXDelta )
		pFnGetMouseXDelta = (UFunction*) UObject::GObjObjects()->Data[ 74241 ];

	UNetherInputOverlayUI_execGetMouseXDelta_Parms GetMouseXDelta_Parms;

	this->ProcessEvent ( pFnGetMouseXDelta, &GetMouseXDelta_Parms, NULL );

	return GetMouseXDelta_Parms.ReturnValue;
};

// Function NetherGame.NetherInputOverlayUI.GetMouseYPrev
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherInputOverlayUI::GetMouseYPrev ( )
{
	static UFunction* pFnGetMouseYPrev = NULL;

	if ( ! pFnGetMouseYPrev )
		pFnGetMouseYPrev = (UFunction*) UObject::GObjObjects()->Data[ 74239 ];

	UNetherInputOverlayUI_execGetMouseYPrev_Parms GetMouseYPrev_Parms;

	this->ProcessEvent ( pFnGetMouseYPrev, &GetMouseYPrev_Parms, NULL );

	return GetMouseYPrev_Parms.ReturnValue;
};

// Function NetherGame.NetherInputOverlayUI.GetMouseXPrev
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherInputOverlayUI::GetMouseXPrev ( )
{
	static UFunction* pFnGetMouseXPrev = NULL;

	if ( ! pFnGetMouseXPrev )
		pFnGetMouseXPrev = (UFunction*) UObject::GObjObjects()->Data[ 74237 ];

	UNetherInputOverlayUI_execGetMouseXPrev_Parms GetMouseXPrev_Parms;

	this->ProcessEvent ( pFnGetMouseXPrev, &GetMouseXPrev_Parms, NULL );

	return GetMouseXPrev_Parms.ReturnValue;
};

// Function NetherGame.NetherInputOverlayUI.GetMouseY
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherInputOverlayUI::GetMouseY ( )
{
	static UFunction* pFnGetMouseY = NULL;

	if ( ! pFnGetMouseY )
		pFnGetMouseY = (UFunction*) UObject::GObjObjects()->Data[ 74235 ];

	UNetherInputOverlayUI_execGetMouseY_Parms GetMouseY_Parms;

	this->ProcessEvent ( pFnGetMouseY, &GetMouseY_Parms, NULL );

	return GetMouseY_Parms.ReturnValue;
};

// Function NetherGame.NetherInputOverlayUI.GetMouseX
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherInputOverlayUI::GetMouseX ( )
{
	static UFunction* pFnGetMouseX = NULL;

	if ( ! pFnGetMouseX )
		pFnGetMouseX = (UFunction*) UObject::GObjObjects()->Data[ 70402 ];

	UNetherInputOverlayUI_execGetMouseX_Parms GetMouseX_Parms;

	this->ProcessEvent ( pFnGetMouseX, &GetMouseX_Parms, NULL );

	return GetMouseX_Parms.ReturnValue;
};

// Function NetherGame.NetherInputOverlayUI.AS_SetFocuseToTextInput
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::AS_SetFocuseToTextInput ( )
{
	static UFunction* pFnAS_SetFocuseToTextInput = NULL;

	if ( ! pFnAS_SetFocuseToTextInput )
		pFnAS_SetFocuseToTextInput = (UFunction*) UObject::GObjObjects()->Data[ 74234 ];

	UNetherInputOverlayUI_execAS_SetFocuseToTextInput_Parms AS_SetFocuseToTextInput_Parms;

	this->ProcessEvent ( pFnAS_SetFocuseToTextInput, &AS_SetFocuseToTextInput_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_ResetFocus
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::AS_ResetFocus ( )
{
	static UFunction* pFnAS_ResetFocus = NULL;

	if ( ! pFnAS_ResetFocus )
		pFnAS_ResetFocus = (UFunction*) UObject::GObjObjects()->Data[ 74233 ];

	UNetherInputOverlayUI_execAS_ResetFocus_Parms AS_ResetFocus_Parms;

	this->ProcessEvent ( pFnAS_ResetFocus, &AS_ResetFocus_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.ClearInputText
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::ClearInputText ( )
{
	static UFunction* pFnClearInputText = NULL;

	if ( ! pFnClearInputText )
		pFnClearInputText = (UFunction*) UObject::GObjObjects()->Data[ 74232 ];

	UNetherInputOverlayUI_execClearInputText_Parms ClearInputText_Parms;

	this->ProcessEvent ( pFnClearInputText, &ClearInputText_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.GetInputText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNetherInputOverlayUI::GetInputText ( )
{
	static UFunction* pFnGetInputText = NULL;

	if ( ! pFnGetInputText )
		pFnGetInputText = (UFunction*) UObject::GObjObjects()->Data[ 74043 ];

	UNetherInputOverlayUI_execGetInputText_Parms GetInputText_Parms;

	this->ProcessEvent ( pFnGetInputText, &GetInputText_Parms, NULL );

	return GetInputText_Parms.ReturnValue;
};

// Function NetherGame.NetherInputOverlayUI.HideTextInput
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::HideTextInput ( )
{
	static UFunction* pFnHideTextInput = NULL;

	if ( ! pFnHideTextInput )
		pFnHideTextInput = (UFunction*) UObject::GObjObjects()->Data[ 74231 ];

	UNetherInputOverlayUI_execHideTextInput_Parms HideTextInput_Parms;

	this->ProcessEvent ( pFnHideTextInput, &HideTextInput_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.ShowTextInput
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::ShowTextInput ( )
{
	static UFunction* pFnShowTextInput = NULL;

	if ( ! pFnShowTextInput )
		pFnShowTextInput = (UFunction*) UObject::GObjObjects()->Data[ 74230 ];

	UNetherInputOverlayUI_execShowTextInput_Parms ShowTextInput_Parms;

	this->ProcessEvent ( pFnShowTextInput, &ShowTextInput_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.HideMouseCursor
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::HideMouseCursor ( )
{
	static UFunction* pFnHideMouseCursor = NULL;

	if ( ! pFnHideMouseCursor )
		pFnHideMouseCursor = (UFunction*) UObject::GObjObjects()->Data[ 74229 ];

	UNetherInputOverlayUI_execHideMouseCursor_Parms HideMouseCursor_Parms;

	this->ProcessEvent ( pFnHideMouseCursor, &HideMouseCursor_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.ShowMouseCursor
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::ShowMouseCursor ( )
{
	static UFunction* pFnShowMouseCursor = NULL;

	if ( ! pFnShowMouseCursor )
		pFnShowMouseCursor = (UFunction*) UObject::GObjObjects()->Data[ 74228 ];

	UNetherInputOverlayUI_execShowMouseCursor_Parms ShowMouseCursor_Parms;

	this->ProcessEvent ( pFnShowMouseCursor, &ShowMouseCursor_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_KeyUp
// [0x00020000] 
// Parameters infos:
// int                            KeyCode                        ( CPF_Parm )

void UNetherInputOverlayUI::AS_KeyUp ( int KeyCode )
{
	static UFunction* pFnAS_KeyUp = NULL;

	if ( ! pFnAS_KeyUp )
		pFnAS_KeyUp = (UFunction*) UObject::GObjObjects()->Data[ 74226 ];

	UNetherInputOverlayUI_execAS_KeyUp_Parms AS_KeyUp_Parms;
	AS_KeyUp_Parms.KeyCode = KeyCode;

	this->ProcessEvent ( pFnAS_KeyUp, &AS_KeyUp_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_KeyDown
// [0x00020002] 
// Parameters infos:
// int                            KeyCode                        ( CPF_Parm )

void UNetherInputOverlayUI::AS_KeyDown ( int KeyCode )
{
	static UFunction* pFnAS_KeyDown = NULL;

	if ( ! pFnAS_KeyDown )
		pFnAS_KeyDown = (UFunction*) UObject::GObjObjects()->Data[ 74224 ];

	UNetherInputOverlayUI_execAS_KeyDown_Parms AS_KeyDown_Parms;
	AS_KeyDown_Parms.KeyCode = KeyCode;

	this->ProcessEvent ( pFnAS_KeyDown, &AS_KeyDown_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_MouseWheel
// [0x00020002] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void UNetherInputOverlayUI::AS_MouseWheel ( int Delta )
{
	static UFunction* pFnAS_MouseWheel = NULL;

	if ( ! pFnAS_MouseWheel )
		pFnAS_MouseWheel = (UFunction*) UObject::GObjObjects()->Data[ 74222 ];

	UNetherInputOverlayUI_execAS_MouseWheel_Parms AS_MouseWheel_Parms;
	AS_MouseWheel_Parms.Delta = Delta;

	this->ProcessEvent ( pFnAS_MouseWheel, &AS_MouseWheel_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_RightMouseUp
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::AS_RightMouseUp ( )
{
	static UFunction* pFnAS_RightMouseUp = NULL;

	if ( ! pFnAS_RightMouseUp )
		pFnAS_RightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 74221 ];

	UNetherInputOverlayUI_execAS_RightMouseUp_Parms AS_RightMouseUp_Parms;

	this->ProcessEvent ( pFnAS_RightMouseUp, &AS_RightMouseUp_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_RightMouseDown
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::AS_RightMouseDown ( )
{
	static UFunction* pFnAS_RightMouseDown = NULL;

	if ( ! pFnAS_RightMouseDown )
		pFnAS_RightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 74220 ];

	UNetherInputOverlayUI_execAS_RightMouseDown_Parms AS_RightMouseDown_Parms;

	this->ProcessEvent ( pFnAS_RightMouseDown, &AS_RightMouseDown_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_LeftMouseUp
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::AS_LeftMouseUp ( )
{
	static UFunction* pFnAS_LeftMouseUp = NULL;

	if ( ! pFnAS_LeftMouseUp )
		pFnAS_LeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 74219 ];

	UNetherInputOverlayUI_execAS_LeftMouseUp_Parms AS_LeftMouseUp_Parms;

	this->ProcessEvent ( pFnAS_LeftMouseUp, &AS_LeftMouseUp_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_LeftMouseDown
// [0x00020002] 
// Parameters infos:

void UNetherInputOverlayUI::AS_LeftMouseDown ( )
{
	static UFunction* pFnAS_LeftMouseDown = NULL;

	if ( ! pFnAS_LeftMouseDown )
		pFnAS_LeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 74218 ];

	UNetherInputOverlayUI_execAS_LeftMouseDown_Parms AS_LeftMouseDown_Parms;

	this->ProcessEvent ( pFnAS_LeftMouseDown, &AS_LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.AS_MouseMoved
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherInputOverlayUI::AS_MouseMoved ( float X, float Y )
{
	static UFunction* pFnAS_MouseMoved = NULL;

	if ( ! pFnAS_MouseMoved )
		pFnAS_MouseMoved = (UFunction*) UObject::GObjObjects()->Data[ 74215 ];

	UNetherInputOverlayUI_execAS_MouseMoved_Parms AS_MouseMoved_Parms;
	AS_MouseMoved_Parms.X = X;
	AS_MouseMoved_Parms.Y = Y;

	this->ProcessEvent ( pFnAS_MouseMoved, &AS_MouseMoved_Parms, NULL );
};

// Function NetherGame.NetherInputOverlayUI.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherInputOverlayUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 74213 ];

	UNetherInputOverlayUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.GFxStatModifierButton.RemoveStatPoint
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxStatModifierButton::RemoveStatPoint ( )
{
	static UFunction* pFnRemoveStatPoint = NULL;

	if ( ! pFnRemoveStatPoint )
		pFnRemoveStatPoint = (UFunction*) UObject::GObjObjects()->Data[ 70429 ];

	UGFxStatModifierButton_execRemoveStatPoint_Parms RemoveStatPoint_Parms;

	this->ProcessEvent ( pFnRemoveStatPoint, &RemoveStatPoint_Parms, NULL );
};

// Function NetherGame.GFxStatModifierButton.SetRemoveDelegate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UGFxStatModifierButton::SetRemoveDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnSetRemoveDelegate = NULL;

	if ( ! pFnSetRemoveDelegate )
		pFnSetRemoveDelegate = (UFunction*) UObject::GObjObjects()->Data[ 70427 ];

	UGFxStatModifierButton_execSetRemoveDelegate_Parms SetRemoveDelegate_Parms;
	memcpy ( &SetRemoveDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnSetRemoveDelegate, &SetRemoveDelegate_Parms, NULL );
};

// Function NetherGame.GFxStatModifierButton.SpendStatPoint
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxStatModifierButton::SpendStatPoint ( )
{
	static UFunction* pFnSpendStatPoint = NULL;

	if ( ! pFnSpendStatPoint )
		pFnSpendStatPoint = (UFunction*) UObject::GObjObjects()->Data[ 70426 ];

	UGFxStatModifierButton_execSpendStatPoint_Parms SpendStatPoint_Parms;

	this->ProcessEvent ( pFnSpendStatPoint, &SpendStatPoint_Parms, NULL );
};

// Function NetherGame.GFxStatModifierButton.SetSpendDelegate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UGFxStatModifierButton::SetSpendDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnSetSpendDelegate = NULL;

	if ( ! pFnSetSpendDelegate )
		pFnSetSpendDelegate = (UFunction*) UObject::GObjObjects()->Data[ 70424 ];

	UGFxStatModifierButton_execSetSpendDelegate_Parms SetSpendDelegate_Parms;
	memcpy ( &SetSpendDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnSetSpendDelegate, &SetSpendDelegate_Parms, NULL );
};

// Function NetherGame.GFxStatModifierButton.Initialize
// [0x00020001] ( FUNC_Final )
// Parameters infos:

void UGFxStatModifierButton::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70423 ];

	UGFxStatModifierButton_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxStatModifierButton.RemovePointDelegate
// [0x00120000] 
// Parameters infos:

void UGFxStatModifierButton::RemovePointDelegate ( )
{
	static UFunction* pFnRemovePointDelegate = NULL;

	if ( ! pFnRemovePointDelegate )
		pFnRemovePointDelegate = (UFunction*) UObject::GObjObjects()->Data[ 70421 ];

	UGFxStatModifierButton_execRemovePointDelegate_Parms RemovePointDelegate_Parms;

	this->ProcessEvent ( pFnRemovePointDelegate, &RemovePointDelegate_Parms, NULL );
};

// Function NetherGame.GFxStatModifierButton.SpendPointDelegate
// [0x00120000] 
// Parameters infos:

void UGFxStatModifierButton::SpendPointDelegate ( )
{
	static UFunction* pFnSpendPointDelegate = NULL;

	if ( ! pFnSpendPointDelegate )
		pFnSpendPointDelegate = (UFunction*) UObject::GObjObjects()->Data[ 70419 ];

	UGFxStatModifierButton_execSpendPointDelegate_Parms SpendPointDelegate_Parms;

	this->ProcessEvent ( pFnSpendPointDelegate, &SpendPointDelegate_Parms, NULL );
};

// Function NetherGame.GFxStatWidget.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGFxStatWidget::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 70468 ];

	UGFxStatWidget_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.GFxStatWidget.ScaleProgressBar
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UGFxStatWidget::ScaleProgressBar ( int Level )
{
	static UFunction* pFnScaleProgressBar = NULL;

	if ( ! pFnScaleProgressBar )
		pFnScaleProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 70465 ];

	UGFxStatWidget_execScaleProgressBar_Parms ScaleProgressBar_Parms;
	ScaleProgressBar_Parms.Level = Level;

	this->ProcessEvent ( pFnScaleProgressBar, &ScaleProgressBar_Parms, NULL );
};

// Function NetherGame.GFxStatWidget.ApplyUpgrades
// [0x00020001] ( FUNC_Final )
// Parameters infos:

void UGFxStatWidget::ApplyUpgrades ( )
{
	static UFunction* pFnApplyUpgrades = NULL;

	if ( ! pFnApplyUpgrades )
		pFnApplyUpgrades = (UFunction*) UObject::GObjObjects()->Data[ 70464 ];

	UGFxStatWidget_execApplyUpgrades_Parms ApplyUpgrades_Parms;

	this->ProcessEvent ( pFnApplyUpgrades, &ApplyUpgrades_Parms, NULL );
};

// Function NetherGame.GFxStatWidget.AskServerToAddPoint
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxAbilityNode*         Button                         ( CPF_Parm )

int UGFxStatWidget::AskServerToAddPoint ( class UGFxAbilityNode* Button )
{
	static UFunction* pFnAskServerToAddPoint = NULL;

	if ( ! pFnAskServerToAddPoint )
		pFnAskServerToAddPoint = (UFunction*) UObject::GObjObjects()->Data[ 70461 ];

	UGFxStatWidget_execAskServerToAddPoint_Parms AskServerToAddPoint_Parms;
	AskServerToAddPoint_Parms.Button = Button;

	this->ProcessEvent ( pFnAskServerToAddPoint, &AskServerToAddPoint_Parms, NULL );

	return AskServerToAddPoint_Parms.ReturnValue;
};

// Function NetherGame.GFxStatWidget.AddPoint
// [0x00020002] 
// Parameters infos:

void UGFxStatWidget::AddPoint ( )
{
	static UFunction* pFnAddPoint = NULL;

	if ( ! pFnAddPoint )
		pFnAddPoint = (UFunction*) UObject::GObjObjects()->Data[ 70460 ];

	UGFxStatWidget_execAddPoint_Parms AddPoint_Parms;

	this->ProcessEvent ( pFnAddPoint, &AddPoint_Parms, NULL );
};

// Function NetherGame.GFxStatWidget.SetData
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UGFxStatWidget::SetData ( )
{
	static UFunction* pFnSetData = NULL;

	if ( ! pFnSetData )
		pFnSetData = (UFunction*) UObject::GObjObjects()->Data[ 70451 ];

	UGFxStatWidget_execSetData_Parms SetData_Parms;

	this->ProcessEvent ( pFnSetData, &SetData_Parms, NULL );
};

// Function NetherGame.GFxStatWidget.Initialize
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewStat                        ( CPF_Parm )
// class ANetherPlayerController* PlayerController               ( CPF_Parm )

void UGFxStatWidget::Initialize ( unsigned char NewStat, class ANetherPlayerController* PlayerController )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70445 ];

	UGFxStatWidget_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.NewStat = NewStat;
	Initialize_Parms.PlayerController = PlayerController;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.GFxStatWidget.OnStatAllocated
// [0x00120000] 
// Parameters infos:

void UGFxStatWidget::OnStatAllocated ( )
{
	static UFunction* pFnOnStatAllocated = NULL;

	if ( ! pFnOnStatAllocated )
		pFnOnStatAllocated = (UFunction*) UObject::GObjObjects()->Data[ 70435 ];

	UGFxStatWidget_execOnStatAllocated_Parms OnStatAllocated_Parms;

	this->ProcessEvent ( pFnOnStatAllocated, &OnStatAllocated_Parms, NULL );
};

// Function NetherGame.GFxToolTip.SetToolTipText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UGFxToolTip::SetToolTipText ( struct FString Text )
{
	static UFunction* pFnSetToolTipText = NULL;

	if ( ! pFnSetToolTipText )
		pFnSetToolTipText = (UFunction*) UObject::GObjObjects()->Data[ 70487 ];

	UGFxToolTip_execSetToolTipText_Parms SetToolTipText_Parms;
	memcpy ( &SetToolTipText_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSetToolTipText, &SetToolTipText_Parms, NULL );
};

// Function NetherGame.GFxToolTip.SetSize
// [0x00020002] 
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UGFxToolTip::SetSize ( float NewWidth, float NewHeight )
{
	static UFunction* pFnSetSize = NULL;

	if ( ! pFnSetSize )
		pFnSetSize = (UFunction*) UObject::GObjObjects()->Data[ 70484 ];

	UGFxToolTip_execSetSize_Parms SetSize_Parms;
	SetSize_Parms.NewWidth = NewWidth;
	SetSize_Parms.NewHeight = NewHeight;

	this->ProcessEvent ( pFnSetSize, &SetSize_Parms, NULL );
};

// Function NetherGame.GFxToolTip.Initialize
// [0x00020002] 
// Parameters infos:

void UGFxToolTip::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 70483 ];

	UGFxToolTip_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.NBotEnemy_Teleporter.GetPlayerTeleportLocation
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANBotEnemy_Teleporter::GetPlayerTeleportLocation ( )
{
	static UFunction* pFnGetPlayerTeleportLocation = NULL;

	if ( ! pFnGetPlayerTeleportLocation )
		pFnGetPlayerTeleportLocation = (UFunction*) UObject::GObjObjects()->Data[ 72134 ];

	ANBotEnemy_Teleporter_execGetPlayerTeleportLocation_Parms GetPlayerTeleportLocation_Parms;

	this->ProcessEvent ( pFnGetPlayerTeleportLocation, &GetPlayerTeleportLocation_Parms, NULL );

	return GetPlayerTeleportLocation_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy_Teleporter.GetObjectTeleportLocation
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANBotEnemy_Teleporter::GetObjectTeleportLocation ( )
{
	static UFunction* pFnGetObjectTeleportLocation = NULL;

	if ( ! pFnGetObjectTeleportLocation )
		pFnGetObjectTeleportLocation = (UFunction*) UObject::GObjObjects()->Data[ 72129 ];

	ANBotEnemy_Teleporter_execGetObjectTeleportLocation_Parms GetObjectTeleportLocation_Parms;

	this->ProcessEvent ( pFnGetObjectTeleportLocation, &GetObjectTeleportLocation_Parms, NULL );

	return GetObjectTeleportLocation_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy_Teleporter.GetForwardTeleportLocation
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANBotEnemy_Teleporter::GetForwardTeleportLocation ( )
{
	static UFunction* pFnGetForwardTeleportLocation = NULL;

	if ( ! pFnGetForwardTeleportLocation )
		pFnGetForwardTeleportLocation = (UFunction*) UObject::GObjObjects()->Data[ 72124 ];

	ANBotEnemy_Teleporter_execGetForwardTeleportLocation_Parms GetForwardTeleportLocation_Parms;

	this->ProcessEvent ( pFnGetForwardTeleportLocation, &GetForwardTeleportLocation_Parms, NULL );

	return GetForwardTeleportLocation_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy_Teleporter.AttemptTeleportToObject
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TargetActor                    ( CPF_Parm )

bool ANBotEnemy_Teleporter::AttemptTeleportToObject ( class AActor* TargetActor )
{
	static UFunction* pFnAttemptTeleportToObject = NULL;

	if ( ! pFnAttemptTeleportToObject )
		pFnAttemptTeleportToObject = (UFunction*) UObject::GObjObjects()->Data[ 72099 ];

	ANBotEnemy_Teleporter_execAttemptTeleportToObject_Parms AttemptTeleportToObject_Parms;
	AttemptTeleportToObject_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnAttemptTeleportToObject, &AttemptTeleportToObject_Parms, NULL );

	return AttemptTeleportToObject_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy_Teleporter.AttemptTeleport
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBotEnemy_Teleporter::AttemptTeleport ( )
{
	static UFunction* pFnAttemptTeleport = NULL;

	if ( ! pFnAttemptTeleport )
		pFnAttemptTeleport = (UFunction*) UObject::GObjObjects()->Data[ 72102 ];

	ANBotEnemy_Teleporter_execAttemptTeleport_Parms AttemptTeleport_Parms;

	this->ProcessEvent ( pFnAttemptTeleport, &AttemptTeleport_Parms, NULL );

	return AttemptTeleport_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy_Teleporter.GetUnstuck
// [0x00020002] 
// Parameters infos:

void ANBotEnemy_Teleporter::GetUnstuck ( )
{
	static UFunction* pFnGetUnstuck = NULL;

	if ( ! pFnGetUnstuck )
		pFnGetUnstuck = (UFunction*) UObject::GObjObjects()->Data[ 72116 ];

	ANBotEnemy_Teleporter_execGetUnstuck_Parms GetUnstuck_Parms;

	this->ProcessEvent ( pFnGetUnstuck, &GetUnstuck_Parms, NULL );
};

// Function NetherGame.NBotEnemy_Teleporter.IsTeleporting
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBotEnemy_Teleporter::IsTeleporting ( )
{
	static UFunction* pFnIsTeleporting = NULL;

	if ( ! pFnIsTeleporting )
		pFnIsTeleporting = (UFunction*) UObject::GObjObjects()->Data[ 72114 ];

	ANBotEnemy_Teleporter_execIsTeleporting_Parms IsTeleporting_Parms;

	this->ProcessEvent ( pFnIsTeleporting, &IsTeleporting_Parms, NULL );

	return IsTeleporting_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy_Teleporter.OnAggroEnded
// [0x00080002] 
// Parameters infos:

void ANBotEnemy_Teleporter::OnAggroEnded ( )
{
	static UFunction* pFnOnAggroEnded = NULL;

	if ( ! pFnOnAggroEnded )
		pFnOnAggroEnded = (UFunction*) UObject::GObjObjects()->Data[ 72106 ];

	ANBotEnemy_Teleporter_execOnAggroEnded_Parms OnAggroEnded_Parms;

	this->ProcessEvent ( pFnOnAggroEnded, &OnAggroEnded_Parms, NULL );
};

// Function NetherGame.NBotEnemy_Teleporter.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ANBotEnemy_Teleporter::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 72095 ];

	ANBotEnemy_Teleporter_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function NetherGame.HorrorSubBoss.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AHorrorSubBoss::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 71044 ];

	AHorrorSubBoss_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function NetherGame.HorrorSubBoss.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AHorrorSubBoss::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 71033 ];

	AHorrorSubBoss_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function NetherGame.NBotEnemy_Subboss.NotifyStunned
// [0x00020000] 
// Parameters infos:
// float                          InStunDuration                 ( CPF_Parm )

void ANBotEnemy_Subboss::NotifyStunned ( float InStunDuration )
{
	static UFunction* pFnNotifyStunned = NULL;

	if ( ! pFnNotifyStunned )
		pFnNotifyStunned = (UFunction*) UObject::GObjObjects()->Data[ 72198 ];

	ANBotEnemy_Subboss_execNotifyStunned_Parms NotifyStunned_Parms;
	NotifyStunned_Parms.InStunDuration = InStunDuration;

	this->ProcessEvent ( pFnNotifyStunned, &NotifyStunned_Parms, NULL );
};

// Function NetherGame.MICReflectionUpdater.Tick
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AMICReflectionUpdater::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 71098 ];

	AMICReflectionUpdater_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.MICReflectionUpdater.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AMICReflectionUpdater::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 71096 ];

	AMICReflectionUpdater_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NameTagManager.Draw
// [0x00820102] 
// Parameters infos:

void ANameTagManager::Draw ( )
{
	static UFunction* pFnDraw = NULL;

	if ( ! pFnDraw )
		pFnDraw = (UFunction*) UObject::GObjObjects()->Data[ 71127 ];

	ANameTagManager_execDraw_Parms Draw_Parms;

	this->ProcessEvent ( pFnDraw, &Draw_Parms, NULL );
};

// Function NetherGame.NameTagManager.Initialize
// [0x00820002] 
// Parameters infos:
// class ANetherHUD*              NewHud                         ( CPF_Parm )

void ANameTagManager::Initialize ( class ANetherHUD* NewHud )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 71119 ];

	ANameTagManager_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.NewHud = NewHud;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function NetherGame.NStackableItem.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ANStackableItem::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 71393 ];

	ANStackableItem_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function NetherGame.NStackableItem.GetInvClass
// [0x00022102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ANStackableItem::GetInvClass ( )
{
	static UFunction* pFnGetInvClass = NULL;

	if ( ! pFnGetInvClass )
		pFnGetInvClass = (UFunction*) UObject::GObjObjects()->Data[ 71391 ];

	ANStackableItem_execGetInvClass_Parms GetInvClass_Parms;

	this->ProcessEvent ( pFnGetInvClass, &GetInvClass_Parms, NULL );

	return GetInvClass_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANStackableItem::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 71389 ];

	ANStackableItem_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANStackableItem::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 71387 ];

	ANStackableItem_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NStackableItem.GetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANStackableItem::GetSlotNumber ( )
{
	static UFunction* pFnGetSlotNumber = NULL;

	if ( ! pFnGetSlotNumber )
		pFnGetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 71385 ];

	ANStackableItem_execGetSlotNumber_Parms GetSlotNumber_Parms;

	this->ProcessEvent ( pFnGetSlotNumber, &GetSlotNumber_Parms, NULL );

	return GetSlotNumber_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.IsQuickSlotable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANStackableItem::IsQuickSlotable ( )
{
	static UFunction* pFnIsQuickSlotable = NULL;

	if ( ! pFnIsQuickSlotable )
		pFnIsQuickSlotable = (UFunction*) UObject::GObjObjects()->Data[ 71383 ];

	ANStackableItem_execIsQuickSlotable_Parms IsQuickSlotable_Parms;

	this->ProcessEvent ( pFnIsQuickSlotable, &IsQuickSlotable_Parms, NULL );

	return IsQuickSlotable_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetInventoryCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANStackableItem::GetInventoryCount ( )
{
	static UFunction* pFnGetInventoryCount = NULL;

	if ( ! pFnGetInventoryCount )
		pFnGetInventoryCount = (UFunction*) UObject::GObjObjects()->Data[ 71381 ];

	ANStackableItem_execGetInventoryCount_Parms GetInventoryCount_Parms;

	this->ProcessEvent ( pFnGetInventoryCount, &GetInventoryCount_Parms, NULL );

	return GetInventoryCount_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetDefaultInventoryCount
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANStackableItem::GetDefaultInventoryCount ( )
{
	static UFunction* pFnGetDefaultInventoryCount = NULL;

	if ( ! pFnGetDefaultInventoryCount )
		pFnGetDefaultInventoryCount = (UFunction*) UObject::GObjObjects()->Data[ 71379 ];

	ANStackableItem_execGetDefaultInventoryCount_Parms GetDefaultInventoryCount_Parms;

	this->ProcessEvent ( pFnGetDefaultInventoryCount, &GetDefaultInventoryCount_Parms, NULL );

	return GetDefaultInventoryCount_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.RemoveItemStacks
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ANStackableItem::RemoveItemStacks ( int Amount )
{
	static UFunction* pFnRemoveItemStacks = NULL;

	if ( ! pFnRemoveItemStacks )
		pFnRemoveItemStacks = (UFunction*) UObject::GObjObjects()->Data[ 71375 ];

	ANStackableItem_execRemoveItemStacks_Parms RemoveItemStacks_Parms;
	RemoveItemStacks_Parms.Amount = Amount;

	this->ProcessEvent ( pFnRemoveItemStacks, &RemoveItemStacks_Parms, NULL );

	return RemoveItemStacks_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.SetItemStacks
// [0x00020002] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void ANStackableItem::SetItemStacks ( int Amount )
{
	static UFunction* pFnSetItemStacks = NULL;

	if ( ! pFnSetItemStacks )
		pFnSetItemStacks = (UFunction*) UObject::GObjObjects()->Data[ 71373 ];

	ANStackableItem_execSetItemStacks_Parms SetItemStacks_Parms;
	SetItemStacks_Parms.Amount = Amount;

	this->ProcessEvent ( pFnSetItemStacks, &SetItemStacks_Parms, NULL );
};

// Function NetherGame.NStackableItem.ClientSetItemStacks
// [0x010201C2] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void ANStackableItem::ClientSetItemStacks ( int Amount )
{
	static UFunction* pFnClientSetItemStacks = NULL;

	if ( ! pFnClientSetItemStacks )
		pFnClientSetItemStacks = (UFunction*) UObject::GObjObjects()->Data[ 71371 ];

	ANStackableItem_execClientSetItemStacks_Parms ClientSetItemStacks_Parms;
	ClientSetItemStacks_Parms.Amount = Amount;

	this->ProcessEvent ( pFnClientSetItemStacks, &ClientSetItemStacks_Parms, NULL );
};

// Function NetherGame.NStackableItem.AddItemStacks
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ANStackableItem::AddItemStacks ( int Amount )
{
	static UFunction* pFnAddItemStacks = NULL;

	if ( ! pFnAddItemStacks )
		pFnAddItemStacks = (UFunction*) UObject::GObjObjects()->Data[ 71367 ];

	ANStackableItem_execAddItemStacks_Parms AddItemStacks_Parms;
	AddItemStacks_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddItemStacks, &AddItemStacks_Parms, NULL );

	return AddItemStacks_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.ConsumeItem
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Consumer                       ( CPF_Parm )

bool ANStackableItem::ConsumeItem ( class APawn* Consumer )
{
	static UFunction* pFnConsumeItem = NULL;

	if ( ! pFnConsumeItem )
		pFnConsumeItem = (UFunction*) UObject::GObjObjects()->Data[ 71364 ];

	ANStackableItem_execConsumeItem_Parms ConsumeItem_Parms;
	ConsumeItem_Parms.Consumer = Consumer;

	this->ProcessEvent ( pFnConsumeItem, &ConsumeItem_Parms, NULL );

	return ConsumeItem_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANStackableItem::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71362 ];

	ANStackableItem_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetWeight
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANStackableItem::GetWeight ( )
{
	static UFunction* pFnGetWeight = NULL;

	if ( ! pFnGetWeight )
		pFnGetWeight = (UFunction*) UObject::GObjObjects()->Data[ 71360 ];

	ANStackableItem_execGetWeight_Parms GetWeight_Parms;

	this->ProcessEvent ( pFnGetWeight, &GetWeight_Parms, NULL );

	return GetWeight_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetStackCap
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANStackableItem::GetStackCap ( )
{
	static UFunction* pFnGetStackCap = NULL;

	if ( ! pFnGetStackCap )
		pFnGetStackCap = (UFunction*) UObject::GObjObjects()->Data[ 71358 ];

	ANStackableItem_execGetStackCap_Parms GetStackCap_Parms;

	this->ProcessEvent ( pFnGetStackCap, &GetStackCap_Parms, NULL );

	return GetStackCap_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.IsStackable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANStackableItem::IsStackable ( )
{
	static UFunction* pFnIsStackable = NULL;

	if ( ! pFnIsStackable )
		pFnIsStackable = (UFunction*) UObject::GObjObjects()->Data[ 71356 ];

	ANStackableItem_execIsStackable_Parms IsStackable_Parms;

	this->ProcessEvent ( pFnIsStackable, &IsStackable_Parms, NULL );

	return IsStackable_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetInventoryDesc
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANStackableItem::GetInventoryDesc ( )
{
	static UFunction* pFnGetInventoryDesc = NULL;

	if ( ! pFnGetInventoryDesc )
		pFnGetInventoryDesc = (UFunction*) UObject::GObjObjects()->Data[ 71354 ];

	ANStackableItem_execGetInventoryDesc_Parms GetInventoryDesc_Parms;

	this->ProcessEvent ( pFnGetInventoryDesc, &GetInventoryDesc_Parms, NULL );

	return GetInventoryDesc_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.GetInventoryName
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANStackableItem::GetInventoryName ( )
{
	static UFunction* pFnGetInventoryName = NULL;

	if ( ! pFnGetInventoryName )
		pFnGetInventoryName = (UFunction*) UObject::GObjObjects()->Data[ 71352 ];

	ANStackableItem_execGetInventoryName_Parms GetInventoryName_Parms;

	this->ProcessEvent ( pFnGetInventoryName, &GetInventoryName_Parms, NULL );

	return GetInventoryName_Parms.ReturnValue;
};

// Function NetherGame.NStackableItem.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool ANStackableItem::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 71348 ];

	ANStackableItem_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function NetherGame.NDroppedPickup.IsInUse
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANDroppedPickup::IsInUse ( )
{
	static UFunction* pFnIsInUse = NULL;

	if ( ! pFnIsInUse )
		pFnIsInUse = (UFunction*) UObject::GObjObjects()->Data[ 73109 ];

	ANDroppedPickup_execIsInUse_Parms IsInUse_Parms;

	this->ProcessEvent ( pFnIsInUse, &IsInUse_Parms, NULL );

	return IsInUse_Parms.ReturnValue;
};

// Function NetherGame.NDroppedPickup.ReleaseFromUse
// [0x00020002] 
// Parameters infos:

void ANDroppedPickup::ReleaseFromUse ( )
{
	static UFunction* pFnReleaseFromUse = NULL;

	if ( ! pFnReleaseFromUse )
		pFnReleaseFromUse = (UFunction*) UObject::GObjObjects()->Data[ 73108 ];

	ANDroppedPickup_execReleaseFromUse_Parms ReleaseFromUse_Parms;

	this->ProcessEvent ( pFnReleaseFromUse, &ReleaseFromUse_Parms, NULL );
};

// Function NetherGame.NDroppedPickup.MarkForUse
// [0x00020002] 
// Parameters infos:

void ANDroppedPickup::MarkForUse ( )
{
	static UFunction* pFnMarkForUse = NULL;

	if ( ! pFnMarkForUse )
		pFnMarkForUse = (UFunction*) UObject::GObjObjects()->Data[ 73107 ];

	ANDroppedPickup_execMarkForUse_Parms MarkForUse_Parms;

	this->ProcessEvent ( pFnMarkForUse, &MarkForUse_Parms, NULL );
};

// Function NetherGame.NDroppedPickup.PawnHasSight
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANDroppedPickup::PawnHasSight ( class APawn* Other )
{
	static UFunction* pFnPawnHasSight = NULL;

	if ( ! pFnPawnHasSight )
		pFnPawnHasSight = (UFunction*) UObject::GObjObjects()->Data[ 73100 ];

	ANDroppedPickup_execPawnHasSight_Parms PawnHasSight_Parms;
	PawnHasSight_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnHasSight, &PawnHasSight_Parms, NULL );

	return PawnHasSight_Parms.ReturnValue;
};

// Function NetherGame.NDroppedPickup.SetPickupMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     NewPickupMesh                  ( CPF_Parm | CPF_EditInline )

void ANDroppedPickup::eventSetPickupMesh ( class UPrimitiveComponent* NewPickupMesh )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 73098 ];

	ANDroppedPickup_eventSetPickupMesh_Parms SetPickupMesh_Parms;
	SetPickupMesh_Parms.NewPickupMesh = NewPickupMesh;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function NetherGame.NAmmo.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANAmmo::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 71400 ];

	ANAmmo_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NAmmo_12Gauge.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANAmmo_12Gauge::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71405 ];

	ANAmmo_12Gauge_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NAmmo_45ACP.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANAmmo_45ACP::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71410 ];

	ANAmmo_45ACP_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NAmmo_50cal.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANAmmo_50cal::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71415 ];

	ANAmmo_50cal_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NAmmo_5pt56.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANAmmo_5pt56::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71420 ];

	ANAmmo_5pt56_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NAmmo_7pt62.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANAmmo_7pt62::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71425 ];

	ANAmmo_7pt62_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NAmmo_9mm.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANAmmo_9mm::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71430 ];

	ANAmmo_9mm_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NAttachment.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ANAttachment::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 71441 ];

	ANAttachment_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function NetherGame.NAttachment.UpdateAttachmentDepthPriority
// [0x00020102] 
// Parameters infos:

void ANAttachment::UpdateAttachmentDepthPriority ( )
{
	static UFunction* pFnUpdateAttachmentDepthPriority = NULL;

	if ( ! pFnUpdateAttachmentDepthPriority )
		pFnUpdateAttachmentDepthPriority = (UFunction*) UObject::GObjObjects()->Data[ 71440 ];

	ANAttachment_execUpdateAttachmentDepthPriority_Parms UpdateAttachmentDepthPriority_Parms;

	this->ProcessEvent ( pFnUpdateAttachmentDepthPriority, &UpdateAttachmentDepthPriority_Parms, NULL );
};

// Function NetherGame.NAttachment.AttachTo
// [0x00020102] 
// Parameters infos:
// class AUTPawn*                 OwnerPawn                      ( CPF_Parm )

void ANAttachment::AttachTo ( class AUTPawn* OwnerPawn )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = (UFunction*) UObject::GObjObjects()->Data[ 71438 ];

	ANAttachment_execAttachTo_Parms AttachTo_Parms;
	AttachTo_Parms.OwnerPawn = OwnerPawn;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function NetherGame.NAttachment_Ranged.SetMuzzleFlashParams
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ANAttachment_Ranged::SetMuzzleFlashParams ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnSetMuzzleFlashParams = NULL;

	if ( ! pFnSetMuzzleFlashParams )
		pFnSetMuzzleFlashParams = (UFunction*) UObject::GObjObjects()->Data[ 71476 ];

	ANAttachment_Ranged_execSetMuzzleFlashParams_Parms SetMuzzleFlashParams_Parms;
	SetMuzzleFlashParams_Parms.PSC = PSC;

	this->ProcessEvent ( pFnSetMuzzleFlashParams, &SetMuzzleFlashParams_Parms, NULL );
};

// Function NetherGame.NAttachment_Ranged.AttachTo
// [0x00020102] 
// Parameters infos:
// class AUTPawn*                 OwnerPawn                      ( CPF_Parm )

void ANAttachment_Ranged::AttachTo ( class AUTPawn* OwnerPawn )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = (UFunction*) UObject::GObjObjects()->Data[ 71472 ];

	ANAttachment_Ranged_execAttachTo_Parms AttachTo_Parms;
	AttachTo_Parms.OwnerPawn = OwnerPawn;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function NetherGame.NAttachment_Ranged.GetMuzzleLoc
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANAttachment_Ranged::GetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 71469 ];

	ANAttachment_Ranged_execGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function NetherGame.NAttachment_Ranged.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ANAttachment_Ranged::ThirdPersonFireEffects ( struct FVector HitLocation )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 71466 ];

	ANAttachment_Ranged_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;
	memcpy ( &ThirdPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function NetherGame.NAttachment_Ranged.FirstPersonFireEffects
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 PawnWeapon                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ANAttachment_Ranged::FirstPersonFireEffects ( class AWeapon* PawnWeapon, struct FVector HitLocation )
{
	static UFunction* pFnFirstPersonFireEffects = NULL;

	if ( ! pFnFirstPersonFireEffects )
		pFnFirstPersonFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 71460 ];

	ANAttachment_Ranged_execFirstPersonFireEffects_Parms FirstPersonFireEffects_Parms;
	FirstPersonFireEffects_Parms.PawnWeapon = PawnWeapon;
	memcpy ( &FirstPersonFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnFirstPersonFireEffects, &FirstPersonFireEffects_Parms, NULL );
};

// Function NetherGame.NAttachment_Ranged.SpawnBeam
// [0x00820102] 
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// unsigned long                  bFirstPerson                   ( CPF_Parm )

void ANAttachment_Ranged::SpawnBeam ( struct FVector Start, struct FVector End, unsigned long bFirstPerson )
{
	static UFunction* pFnSpawnBeam = NULL;

	if ( ! pFnSpawnBeam )
		pFnSpawnBeam = (UFunction*) UObject::GObjObjects()->Data[ 71450 ];

	ANAttachment_Ranged_execSpawnBeam_Parms SpawnBeam_Parms;
	memcpy ( &SpawnBeam_Parms.Start, &Start, 0xC );
	memcpy ( &SpawnBeam_Parms.End, &End, 0xC );
	SpawnBeam_Parms.bFirstPerson = bFirstPerson;

	this->ProcessEvent ( pFnSpawnBeam, &SpawnBeam_Parms, NULL );
};

// Function NetherGame.NWeapRanged.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapRanged::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 81915 ];

	ANWeapRanged_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.StopMuzzleFlash
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANWeapRanged::eventStopMuzzleFlash ( )
{
	static UFunction* pFnStopMuzzleFlash = NULL;

	if ( ! pFnStopMuzzleFlash )
		pFnStopMuzzleFlash = (UFunction*) UObject::GObjObjects()->Data[ 81914 ];

	ANWeapRanged_eventStopMuzzleFlash_Parms StopMuzzleFlash_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlash, &StopMuzzleFlash_Parms, NULL );
};

// Function NetherGame.NWeapRanged.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ANWeapRanged::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 81913 ];

	ANWeapRanged_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function NetherGame.NWeapRanged.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ANWeapRanged::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 81910 ];

	ANWeapRanged_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function NetherGame.NWeapRanged.ProcessViewRotation
// [0x00C20102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ANWeapRanged::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 81905 ];

	ANWeapRanged_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function NetherGame.NWeapRanged.ReloadWeapon
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReloadAmount                   ( CPF_Parm )

void ANWeapRanged::ReloadWeapon ( int ReloadAmount )
{
	static UFunction* pFnReloadWeapon = NULL;

	if ( ! pFnReloadWeapon )
		pFnReloadWeapon = (UFunction*) UObject::GObjObjects()->Data[ 81903 ];

	ANWeapRanged_execReloadWeapon_Parms ReloadWeapon_Parms;
	ReloadWeapon_Parms.ReloadAmount = ReloadAmount;

	this->ProcessEvent ( pFnReloadWeapon, &ReloadWeapon_Parms, NULL );
};

// Function NetherGame.NWeapRanged.GetEffectLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANWeapRanged::GetEffectLocation ( )
{
	static UFunction* pFnGetEffectLocation = NULL;

	if ( ! pFnGetEffectLocation )
		pFnGetEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 81887 ];

	ANWeapRanged_execGetEffectLocation_Parms GetEffectLocation_Parms;

	this->ProcessEvent ( pFnGetEffectLocation, &GetEffectLocation_Parms, NULL );

	return GetEffectLocation_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANWeapRanged::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 81884 ];

	ANWeapRanged_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NWeapRanged.GetPostureSpreadScalar
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANWeapRanged::GetPostureSpreadScalar ( )
{
	static UFunction* pFnGetPostureSpreadScalar = NULL;

	if ( ! pFnGetPostureSpreadScalar )
		pFnGetPostureSpreadScalar = (UFunction*) UObject::GObjObjects()->Data[ 81881 ];

	ANWeapRanged_execGetPostureSpreadScalar_Parms GetPostureSpreadScalar_Parms;

	this->ProcessEvent ( pFnGetPostureSpreadScalar, &GetPostureSpreadScalar_Parms, NULL );

	return GetPostureSpreadScalar_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.DebugDrawSpread
// [0x00820002] 
// Parameters infos:

void ANWeapRanged::DebugDrawSpread ( )
{
	static UFunction* pFnDebugDrawSpread = NULL;

	if ( ! pFnDebugDrawSpread )
		pFnDebugDrawSpread = (UFunction*) UObject::GObjObjects()->Data[ 81864 ];

	ANWeapRanged_execDebugDrawSpread_Parms DebugDrawSpread_Parms;

	this->ProcessEvent ( pFnDebugDrawSpread, &DebugDrawSpread_Parms, NULL );
};

// Function NetherGame.NWeapRanged.DrawWeaponCrosshair
// [0x00020102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )

void ANWeapRanged::DrawWeaponCrosshair ( class AHUD* HUD )
{
	static UFunction* pFnDrawWeaponCrosshair = NULL;

	if ( ! pFnDrawWeaponCrosshair )
		pFnDrawWeaponCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 81862 ];

	ANWeapRanged_execDrawWeaponCrosshair_Parms DrawWeaponCrosshair_Parms;
	DrawWeaponCrosshair_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDrawWeaponCrosshair, &DrawWeaponCrosshair_Parms, NULL );
};

// Function NetherGame.NWeapRanged.GetWeaponBaseAim
// [0x00024102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_OptionalParm | CPF_Parm )

struct FRotator ANWeapRanged::GetWeaponBaseAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetWeaponBaseAim = NULL;

	if ( ! pFnGetWeaponBaseAim )
		pFnGetWeaponBaseAim = (UFunction*) UObject::GObjObjects()->Data[ 76065 ];

	ANWeapRanged_execGetWeaponBaseAim_Parms GetWeaponBaseAim_Parms;
	memcpy ( &GetWeaponBaseAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetWeaponBaseAim, &GetWeaponBaseAim_Parms, NULL );

	return GetWeaponBaseAim_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.GetAdjustedAim
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ANWeapRanged::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 81857 ];

	ANWeapRanged_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.GetMuzzleLoc
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANWeapRanged::eventGetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 71464 ];

	ANWeapRanged_eventGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.GetPhysicalFireStartLoc
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ANWeapRanged::eventGetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 81852 ];

	ANWeapRanged_eventGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.IsUnloadable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapRanged::IsUnloadable ( )
{
	static UFunction* pFnIsUnloadable = NULL;

	if ( ! pFnIsUnloadable )
		pFnIsUnloadable = (UFunction*) UObject::GObjObjects()->Data[ 81850 ];

	ANWeapRanged_execIsUnloadable_Parms IsUnloadable_Parms;

	this->ProcessEvent ( pFnIsUnloadable, &IsUnloadable_Parms, NULL );

	return IsUnloadable_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.ConsumeAmmo
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANWeapRanged::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 81848 ];

	ANWeapRanged_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function NetherGame.NWeapRanged.ClearGun
// [0x00020002] 
// Parameters infos:

void ANWeapRanged::ClearGun ( )
{
	static UFunction* pFnClearGun = NULL;

	if ( ! pFnClearGun )
		pFnClearGun = (UFunction*) UObject::GObjObjects()->Data[ 81847 ];

	ANWeapRanged_execClearGun_Parms ClearGun_Parms;

	this->ProcessEvent ( pFnClearGun, &ClearGun_Parms, NULL );
};

// Function NetherGame.NWeapRanged.AddAmmo
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ANWeapRanged::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 81844 ];

	ANWeapRanged_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.WeaponEmpty
// [0x00020100] 
// Parameters infos:

void ANWeapRanged::WeaponEmpty ( )
{
	static UFunction* pFnWeaponEmpty = NULL;

	if ( ! pFnWeaponEmpty )
		pFnWeaponEmpty = (UFunction*) UObject::GObjObjects()->Data[ 81843 ];

	ANWeapRanged_execWeaponEmpty_Parms WeaponEmpty_Parms;

	this->ProcessEvent ( pFnWeaponEmpty, &WeaponEmpty_Parms, NULL );
};

// Function NetherGame.NWeapRanged.ClientAttemptReload
// [0x010401C3] ( FUNC_Final )
// Parameters infos:

void ANWeapRanged::ClientAttemptReload ( )
{
	static UFunction* pFnClientAttemptReload = NULL;

	if ( ! pFnClientAttemptReload )
		pFnClientAttemptReload = (UFunction*) UObject::GObjObjects()->Data[ 81842 ];

	ANWeapRanged_execClientAttemptReload_Parms ClientAttemptReload_Parms;

	this->ProcessEvent ( pFnClientAttemptReload, &ClientAttemptReload_Parms, NULL );
};

// Function NetherGame.NWeapRanged.ServerAttemptReload
// [0x002200C3] ( FUNC_Final )
// Parameters infos:

void ANWeapRanged::ServerAttemptReload ( )
{
	static UFunction* pFnServerAttemptReload = NULL;

	if ( ! pFnServerAttemptReload )
		pFnServerAttemptReload = (UFunction*) UObject::GObjObjects()->Data[ 75552 ];

	ANWeapRanged_execServerAttemptReload_Parms ServerAttemptReload_Parms;

	this->ProcessEvent ( pFnServerAttemptReload, &ServerAttemptReload_Parms, NULL );
};

// Function NetherGame.NWeapRanged.CanReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapRanged::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 81840 ];

	ANWeapRanged_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.IsReloading
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapRanged::IsReloading ( )
{
	static UFunction* pFnIsReloading = NULL;

	if ( ! pFnIsReloading )
		pFnIsReloading = (UFunction*) UObject::GObjObjects()->Data[ 77960 ];

	ANWeapRanged_execIsReloading_Parms IsReloading_Parms;

	this->ProcessEvent ( pFnIsReloading, &IsReloading_Parms, NULL );

	return IsReloading_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.UpdateIKRecoil
// [0x00020102] 
// Parameters infos:
// int                            Num                            ( CPF_Parm )

void ANWeapRanged::UpdateIKRecoil ( int Num )
{
	static UFunction* pFnUpdateIKRecoil = NULL;

	if ( ! pFnUpdateIKRecoil )
		pFnUpdateIKRecoil = (UFunction*) UObject::GObjObjects()->Data[ 81838 ];

	ANWeapRanged_execUpdateIKRecoil_Parms UpdateIKRecoil_Parms;
	UpdateIKRecoil_Parms.Num = Num;

	this->ProcessEvent ( pFnUpdateIKRecoil, &UpdateIKRecoil_Parms, NULL );
};

// Function NetherGame.NWeapRanged.OnPawnSwitchedPerspective
// [0x00020102] 
// Parameters infos:

void ANWeapRanged::OnPawnSwitchedPerspective ( )
{
	static UFunction* pFnOnPawnSwitchedPerspective = NULL;

	if ( ! pFnOnPawnSwitchedPerspective )
		pFnOnPawnSwitchedPerspective = (UFunction*) UObject::GObjObjects()->Data[ 81836 ];

	ANWeapRanged_execOnPawnSwitchedPerspective_Parms OnPawnSwitchedPerspective_Parms;

	this->ProcessEvent ( pFnOnPawnSwitchedPerspective, &OnPawnSwitchedPerspective_Parms, NULL );
};

// Function NetherGame.NWeapRanged.LowerWeapon
// [0x00080002] 
// Parameters infos:

void ANWeapRanged::LowerWeapon ( )
{
	static UFunction* pFnLowerWeapon = NULL;

	if ( ! pFnLowerWeapon )
		pFnLowerWeapon = (UFunction*) UObject::GObjObjects()->Data[ 81834 ];

	ANWeapRanged_execLowerWeapon_Parms LowerWeapon_Parms;

	this->ProcessEvent ( pFnLowerWeapon, &LowerWeapon_Parms, NULL );
};

// Function NetherGame.NWeapRanged.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANWeapRanged::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 81832 ];

	ANWeapRanged_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function NetherGame.NWeapRanged.BeginFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANWeapRanged::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 81829 ];

	ANWeapRanged_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function NetherGame.NWeapRanged.GetInstantHitDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireMode                       ( CPF_Parm )

float ANWeapRanged::GetInstantHitDamage ( int FireMode )
{
	static UFunction* pFnGetInstantHitDamage = NULL;

	if ( ! pFnGetInstantHitDamage )
		pFnGetInstantHitDamage = (UFunction*) UObject::GObjObjects()->Data[ 81825 ];

	ANWeapRanged_execGetInstantHitDamage_Parms GetInstantHitDamage_Parms;
	GetInstantHitDamage_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnGetInstantHitDamage, &GetInstantHitDamage_Parms, NULL );

	return GetInstantHitDamage_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.GetReserveAmmo
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapRanged::GetReserveAmmo ( )
{
	static UFunction* pFnGetReserveAmmo = NULL;

	if ( ! pFnGetReserveAmmo )
		pFnGetReserveAmmo = (UFunction*) UObject::GObjObjects()->Data[ 74059 ];

	ANWeapRanged_execGetReserveAmmo_Parms GetReserveAmmo_Parms;

	this->ProcessEvent ( pFnGetReserveAmmo, &GetReserveAmmo_Parms, NULL );

	return GetReserveAmmo_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.GetClipSize
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapRanged::GetClipSize ( )
{
	static UFunction* pFnGetClipSize = NULL;

	if ( ! pFnGetClipSize )
		pFnGetClipSize = (UFunction*) UObject::GObjObjects()->Data[ 75550 ];

	ANWeapRanged_execGetClipSize_Parms GetClipSize_Parms;

	this->ProcessEvent ( pFnGetClipSize, &GetClipSize_Parms, NULL );

	return GetClipSize_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.Activate
// [0x00020102] 
// Parameters infos:

void ANWeapRanged::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 81823 ];

	ANWeapRanged_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function NetherGame.NWeapRanged.GetInventoryCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapRanged::GetInventoryCount ( )
{
	static UFunction* pFnGetInventoryCount = NULL;

	if ( ! pFnGetInventoryCount )
		pFnGetInventoryCount = (UFunction*) UObject::GObjObjects()->Data[ 81821 ];

	ANWeapRanged_execGetInventoryCount_Parms GetInventoryCount_Parms;

	this->ProcessEvent ( pFnGetInventoryCount, &GetInventoryCount_Parms, NULL );

	return GetInventoryCount_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANWeapRanged::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81820 ];

	ANWeapRanged_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeap.OverrideViewRotation
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                WeaponViewRotation             ( CPF_Parm | CPF_OutParm )

bool ANWeap::OverrideViewRotation ( struct FRotator* WeaponViewRotation )
{
	static UFunction* pFnOverrideViewRotation = NULL;

	if ( ! pFnOverrideViewRotation )
		pFnOverrideViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 77861 ];

	ANWeap_execOverrideViewRotation_Parms OverrideViewRotation_Parms;

	this->ProcessEvent ( pFnOverrideViewRotation, &OverrideViewRotation_Parms, NULL );

	if ( WeaponViewRotation )
		memcpy ( WeaponViewRotation, &OverrideViewRotation_Parms.WeaponViewRotation, 0xC );

	return OverrideViewRotation_Parms.ReturnValue;
};

// Function NetherGame.NWeap.OverrideViewLocation
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WeaponViewLocation             ( CPF_Parm | CPF_OutParm )

bool ANWeap::OverrideViewLocation ( struct FVector* WeaponViewLocation )
{
	static UFunction* pFnOverrideViewLocation = NULL;

	if ( ! pFnOverrideViewLocation )
		pFnOverrideViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 77868 ];

	ANWeap_execOverrideViewLocation_Parms OverrideViewLocation_Parms;

	this->ProcessEvent ( pFnOverrideViewLocation, &OverrideViewLocation_Parms, NULL );

	if ( WeaponViewLocation )
		memcpy ( WeaponViewLocation, &OverrideViewLocation_Parms.WeaponViewLocation, 0xC );

	return OverrideViewLocation_Parms.ReturnValue;
};

// Function NetherGame.NWeap.OverrideViewSocketRotation
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WeaponViewSocket               ( CPF_Parm | CPF_OutParm )

bool ANWeap::OverrideViewSocketRotation ( struct FName* WeaponViewSocket )
{
	static UFunction* pFnOverrideViewSocketRotation = NULL;

	if ( ! pFnOverrideViewSocketRotation )
		pFnOverrideViewSocketRotation = (UFunction*) UObject::GObjObjects()->Data[ 77863 ];

	ANWeap_execOverrideViewSocketRotation_Parms OverrideViewSocketRotation_Parms;

	this->ProcessEvent ( pFnOverrideViewSocketRotation, &OverrideViewSocketRotation_Parms, NULL );

	if ( WeaponViewSocket )
		memcpy ( WeaponViewSocket, &OverrideViewSocketRotation_Parms.WeaponViewSocket, 0x8 );

	return OverrideViewSocketRotation_Parms.ReturnValue;
};

// Function NetherGame.NWeap.OverrideViewSocket
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WeaponViewSocket               ( CPF_Parm | CPF_OutParm )

bool ANWeap::OverrideViewSocket ( struct FName* WeaponViewSocket )
{
	static UFunction* pFnOverrideViewSocket = NULL;

	if ( ! pFnOverrideViewSocket )
		pFnOverrideViewSocket = (UFunction*) UObject::GObjObjects()->Data[ 77870 ];

	ANWeap_execOverrideViewSocket_Parms OverrideViewSocket_Parms;

	this->ProcessEvent ( pFnOverrideViewSocket, &OverrideViewSocket_Parms, NULL );

	if ( WeaponViewSocket )
		memcpy ( WeaponViewSocket, &OverrideViewSocket_Parms.WeaponViewSocket, 0x8 );

	return OverrideViewSocket_Parms.ReturnValue;
};

// Function NetherGame.NWeap.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool ANWeap::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 81205 ];

	ANWeap_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function NetherGame.NWeap.CanPlayerSprint
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeap::CanPlayerSprint ( )
{
	static UFunction* pFnCanPlayerSprint = NULL;

	if ( ! pFnCanPlayerSprint )
		pFnCanPlayerSprint = (UFunction*) UObject::GObjObjects()->Data[ 77952 ];

	ANWeap_execCanPlayerSprint_Parms CanPlayerSprint_Parms;

	this->ProcessEvent ( pFnCanPlayerSprint, &CanPlayerSprint_Parms, NULL );

	return CanPlayerSprint_Parms.ReturnValue;
};

// Function NetherGame.NWeap.DrawWeaponCrosshair
// [0x00020102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )

void ANWeap::DrawWeaponCrosshair ( class AHUD* HUD )
{
	static UFunction* pFnDrawWeaponCrosshair = NULL;

	if ( ! pFnDrawWeaponCrosshair )
		pFnDrawWeaponCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 81200 ];

	ANWeap_execDrawWeaponCrosshair_Parms DrawWeaponCrosshair_Parms;
	DrawWeaponCrosshair_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDrawWeaponCrosshair, &DrawWeaponCrosshair_Parms, NULL );
};

// Function NetherGame.NWeap.CanDrawWeaponCrosshair
// [0x00080102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeap::CanDrawWeaponCrosshair ( )
{
	static UFunction* pFnCanDrawWeaponCrosshair = NULL;

	if ( ! pFnCanDrawWeaponCrosshair )
		pFnCanDrawWeaponCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 81198 ];

	ANWeap_execCanDrawWeaponCrosshair_Parms CanDrawWeaponCrosshair_Parms;

	this->ProcessEvent ( pFnCanDrawWeaponCrosshair, &CanDrawWeaponCrosshair_Parms, NULL );

	return CanDrawWeaponCrosshair_Parms.ReturnValue;
};

// Function NetherGame.NWeap.PlayWeaponAnim
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   InAnimName                     ( CPF_Parm )
// float                          InAnimDuration                 ( CPF_Parm )

void ANWeap::PlayWeaponAnim ( struct FName InAnimName, float InAnimDuration )
{
	static UFunction* pFnPlayWeaponAnim = NULL;

	if ( ! pFnPlayWeaponAnim )
		pFnPlayWeaponAnim = (UFunction*) UObject::GObjObjects()->Data[ 81185 ];

	ANWeap_execPlayWeaponAnim_Parms PlayWeaponAnim_Parms;
	memcpy ( &PlayWeaponAnim_Parms.InAnimName, &InAnimName, 0x8 );
	PlayWeaponAnim_Parms.InAnimDuration = InAnimDuration;

	this->ProcessEvent ( pFnPlayWeaponAnim, &PlayWeaponAnim_Parms, NULL );
};

// Function NetherGame.NWeap.AttachWeaponTo
// [0x00024102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void ANWeap::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 81181 ];

	ANWeap_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function NetherGame.NWeap.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ANWeap::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 81179 ];

	ANWeap_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function NetherGame.NWeap.WeaponPlaySound
// [0x00024100] 
// Parameters infos:
// class UAkEvent*                Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )

void ANWeap::WeaponPlaySound ( class UAkEvent* Sound, float NoiseLoudness )
{
	static UFunction* pFnWeaponPlaySound = NULL;

	if ( ! pFnWeaponPlaySound )
		pFnWeaponPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 81176 ];

	ANWeap_execWeaponPlaySound_Parms WeaponPlaySound_Parms;
	WeaponPlaySound_Parms.Sound = Sound;
	WeaponPlaySound_Parms.NoiseLoudness = NoiseLoudness;

	this->ProcessEvent ( pFnWeaponPlaySound, &WeaponPlaySound_Parms, NULL );
};

// Function NetherGame.NWeap.PlayFiringSound
// [0x00020100] 
// Parameters infos:

void ANWeap::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = (UFunction*) UObject::GObjObjects()->Data[ 81175 ];

	ANWeap_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function NetherGame.NWeap.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ANWeap::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 81173 ];

	ANWeap_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function NetherGame.NWeap.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeap::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 81171 ];

	ANWeap_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function NetherGame.NWeap.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANWeap::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 81169 ];

	ANWeap_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NWeap.GetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeap::GetSlotNumber ( )
{
	static UFunction* pFnGetSlotNumber = NULL;

	if ( ! pFnGetSlotNumber )
		pFnGetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 74676 ];

	ANWeap_execGetSlotNumber_Parms GetSlotNumber_Parms;

	this->ProcessEvent ( pFnGetSlotNumber, &GetSlotNumber_Parms, NULL );

	return GetSlotNumber_Parms.ReturnValue;
};

// Function NetherGame.NWeap.IsQuickSlotable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeap::IsQuickSlotable ( )
{
	static UFunction* pFnIsQuickSlotable = NULL;

	if ( ! pFnIsQuickSlotable )
		pFnIsQuickSlotable = (UFunction*) UObject::GObjObjects()->Data[ 81167 ];

	ANWeap_execIsQuickSlotable_Parms IsQuickSlotable_Parms;

	this->ProcessEvent ( pFnIsQuickSlotable, &IsQuickSlotable_Parms, NULL );

	return IsQuickSlotable_Parms.ReturnValue;
};

// Function NetherGame.NWeap.GetNumStacksToAdd
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANWeap::GetNumStacksToAdd ( )
{
	static UFunction* pFnGetNumStacksToAdd = NULL;

	if ( ! pFnGetNumStacksToAdd )
		pFnGetNumStacksToAdd = (UFunction*) UObject::GObjObjects()->Data[ 81165 ];

	ANWeap_execGetNumStacksToAdd_Parms GetNumStacksToAdd_Parms;

	this->ProcessEvent ( pFnGetNumStacksToAdd, &GetNumStacksToAdd_Parms, NULL );

	return GetNumStacksToAdd_Parms.ReturnValue;
};

// Function NetherGame.NWeap.GetInventoryDesc
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANWeap::GetInventoryDesc ( )
{
	static UFunction* pFnGetInventoryDesc = NULL;

	if ( ! pFnGetInventoryDesc )
		pFnGetInventoryDesc = (UFunction*) UObject::GObjObjects()->Data[ 81163 ];

	ANWeap_execGetInventoryDesc_Parms GetInventoryDesc_Parms;

	this->ProcessEvent ( pFnGetInventoryDesc, &GetInventoryDesc_Parms, NULL );

	return GetInventoryDesc_Parms.ReturnValue;
};

// Function NetherGame.NWeap.GetInventoryName
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANWeap::GetInventoryName ( )
{
	static UFunction* pFnGetInventoryName = NULL;

	if ( ! pFnGetInventoryName )
		pFnGetInventoryName = (UFunction*) UObject::GObjObjects()->Data[ 74029 ];

	ANWeap_execGetInventoryName_Parms GetInventoryName_Parms;

	this->ProcessEvent ( pFnGetInventoryName, &GetInventoryName_Parms, NULL );

	return GetInventoryName_Parms.ReturnValue;
};

// Function NetherGame.NWeap.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeap::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 73491 ];

	ANWeap_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NWeap.GetWeight
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANWeap::GetWeight ( )
{
	static UFunction* pFnGetWeight = NULL;

	if ( ! pFnGetWeight )
		pFnGetWeight = (UFunction*) UObject::GObjObjects()->Data[ 81161 ];

	ANWeap_execGetWeight_Parms GetWeight_Parms;

	this->ProcessEvent ( pFnGetWeight, &GetWeight_Parms, NULL );

	return GetWeight_Parms.ReturnValue;
};

// Function NetherGame.NWeap.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )
// float                          HeadShot                       ( CPF_OptionalParm | CPF_Parm )

void ANWeap::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits, float HeadShot )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 81142 ];

	ANWeap_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x60 );
	ProcessInstantHit_Parms.NumHits = NumHits;
	ProcessInstantHit_Parms.HeadShot = HeadShot;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function NetherGame.NWeap.CalcWeaponFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// float                          fHeadShot                      ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

struct FImpactInfo ANWeap::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList, float* fHeadShot )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 81125 ];

	ANWeap_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0x10 );

	if ( fHeadShot )
		*fHeadShot = CalcWeaponFire_Parms.fHeadShot;

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function NetherGame.NWeap.DetachWeapon
// [0x00020102] 
// Parameters infos:

void ANWeap::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 81123 ];

	ANWeap_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function NetherGame.NWeap.ClientGivenTo
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewOwner                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

void ANWeap::ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 81120 ];

	ANWeap_execClientGivenTo_Parms ClientGivenTo_Parms;
	ClientGivenTo_Parms.NewOwner = NewOwner;
	ClientGivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function NetherGame.NWeap.ProcessViewRotation
// [0x00420100] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ANWeap::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 81116 ];

	ANWeap_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function NetherGame.NWeap.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeap::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81115 ];

	ANWeap_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeap.GetInvClass
// [0x00022102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ANWeap::GetInvClass ( )
{
	static UFunction* pFnGetInvClass = NULL;

	if ( ! pFnGetInvClass )
		pFnGetInvClass = (UFunction*) UObject::GObjObjects()->Data[ 81113 ];

	ANWeap_execGetInvClass_Parms GetInvClass_Parms;

	this->ProcessEvent ( pFnGetInvClass, &GetInvClass_Parms, NULL );

	return GetInvClass_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Shotgun.DebugDrawSpread
// [0x00820002] 
// Parameters infos:

void ANWeapRanged_Shotgun::DebugDrawSpread ( )
{
	static UFunction* pFnDebugDrawSpread = NULL;

	if ( ! pFnDebugDrawSpread )
		pFnDebugDrawSpread = (UFunction*) UObject::GObjObjects()->Data[ 82035 ];

	ANWeapRanged_Shotgun_execDebugDrawSpread_Parms DebugDrawSpread_Parms;

	this->ProcessEvent ( pFnDebugDrawSpread, &DebugDrawSpread_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Shotgun.GetInstantHitDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireMode                       ( CPF_Parm )

float ANWeapRanged_Shotgun::GetInstantHitDamage ( int FireMode )
{
	static UFunction* pFnGetInstantHitDamage = NULL;

	if ( ! pFnGetInstantHitDamage )
		pFnGetInstantHitDamage = (UFunction*) UObject::GObjObjects()->Data[ 82032 ];

	ANWeapRanged_Shotgun_execGetInstantHitDamage_Parms GetInstantHitDamage_Parms;
	GetInstantHitDamage_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnGetInstantHitDamage, &GetInstantHitDamage_Parms, NULL );

	return GetInstantHitDamage_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Shotgun.FireAllPellets
// [0x00C20002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FRotator                InAimRot                       ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FImpactInfo             OutImpactInfo                  ( CPF_Parm | CPF_OutParm )

void ANWeapRanged_Shotgun::FireAllPellets ( struct FVector StartLocation, struct FRotator InAimRot, unsigned char FireModeNum, struct FImpactInfo* OutImpactInfo )
{
	static UFunction* pFnFireAllPellets = NULL;

	if ( ! pFnFireAllPellets )
		pFnFireAllPellets = (UFunction*) UObject::GObjObjects()->Data[ 82013 ];

	ANWeapRanged_Shotgun_execFireAllPellets_Parms FireAllPellets_Parms;
	memcpy ( &FireAllPellets_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &FireAllPellets_Parms.InAimRot, &InAimRot, 0xC );
	FireAllPellets_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnFireAllPellets, &FireAllPellets_Parms, NULL );

	if ( OutImpactInfo )
		memcpy ( OutImpactInfo, &FireAllPellets_Parms.OutImpactInfo, 0x60 );
};

// Function NetherGame.NWeapRanged_Shotgun.CustomFire
// [0x00820102] 
// Parameters infos:

void ANWeapRanged_Shotgun::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 82009 ];

	ANWeapRanged_Shotgun_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Shotgun.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Shotgun::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 82008 ];

	ANWeapRanged_Shotgun_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Rifle.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Rifle::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81994 ];

	ANWeapRanged_Rifle_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.CanPlayerSprint
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapRanged_Ironsight::CanPlayerSprint ( )
{
	static UFunction* pFnCanPlayerSprint = NULL;

	if ( ! pFnCanPlayerSprint )
		pFnCanPlayerSprint = (UFunction*) UObject::GObjObjects()->Data[ 81984 ];

	ANWeapRanged_Ironsight_execCanPlayerSprint_Parms CanPlayerSprint_Parms;

	this->ProcessEvent ( pFnCanPlayerSprint, &CanPlayerSprint_Parms, NULL );

	return CanPlayerSprint_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.ShakeView
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Ironsight::ShakeView ( )
{
	static UFunction* pFnShakeView = NULL;

	if ( ! pFnShakeView )
		pFnShakeView = (UFunction*) UObject::GObjObjects()->Data[ 81977 ];

	ANWeapRanged_Ironsight_execShakeView_Parms ShakeView_Parms;

	this->ProcessEvent ( pFnShakeView, &ShakeView_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.OverrideViewRotation
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                WeaponViewRotation             ( CPF_Parm | CPF_OutParm )

bool ANWeapRanged_Ironsight::OverrideViewRotation ( struct FRotator* WeaponViewRotation )
{
	static UFunction* pFnOverrideViewRotation = NULL;

	if ( ! pFnOverrideViewRotation )
		pFnOverrideViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 81973 ];

	ANWeapRanged_Ironsight_execOverrideViewRotation_Parms OverrideViewRotation_Parms;

	this->ProcessEvent ( pFnOverrideViewRotation, &OverrideViewRotation_Parms, NULL );

	if ( WeaponViewRotation )
		memcpy ( WeaponViewRotation, &OverrideViewRotation_Parms.WeaponViewRotation, 0xC );

	return OverrideViewRotation_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.OverrideViewLocation
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WeaponViewLocation             ( CPF_Parm | CPF_OutParm )

bool ANWeapRanged_Ironsight::OverrideViewLocation ( struct FVector* WeaponViewLocation )
{
	static UFunction* pFnOverrideViewLocation = NULL;

	if ( ! pFnOverrideViewLocation )
		pFnOverrideViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 81970 ];

	ANWeapRanged_Ironsight_execOverrideViewLocation_Parms OverrideViewLocation_Parms;

	this->ProcessEvent ( pFnOverrideViewLocation, &OverrideViewLocation_Parms, NULL );

	if ( WeaponViewLocation )
		memcpy ( WeaponViewLocation, &OverrideViewLocation_Parms.WeaponViewLocation, 0xC );

	return OverrideViewLocation_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.GetWeaponBaseAim
// [0x00824102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_OptionalParm | CPF_Parm )

struct FRotator ANWeapRanged_Ironsight::GetWeaponBaseAim ( struct FVector StartTrace )
{
	static UFunction* pFnGetWeaponBaseAim = NULL;

	if ( ! pFnGetWeaponBaseAim )
		pFnGetWeaponBaseAim = (UFunction*) UObject::GObjObjects()->Data[ 76064 ];

	ANWeapRanged_Ironsight_execGetWeaponBaseAim_Parms GetWeaponBaseAim_Parms;
	memcpy ( &GetWeaponBaseAim_Parms.StartTrace, &StartTrace, 0xC );

	this->ProcessEvent ( pFnGetWeaponBaseAim, &GetWeaponBaseAim_Parms, NULL );

	return GetWeaponBaseAim_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.InstantFireStartTrace
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANWeapRanged_Ironsight::InstantFireStartTrace ( )
{
	static UFunction* pFnInstantFireStartTrace = NULL;

	if ( ! pFnInstantFireStartTrace )
		pFnInstantFireStartTrace = (UFunction*) UObject::GObjObjects()->Data[ 76067 ];

	ANWeapRanged_Ironsight_execInstantFireStartTrace_Parms InstantFireStartTrace_Parms;

	this->ProcessEvent ( pFnInstantFireStartTrace, &InstantFireStartTrace_Parms, NULL );

	return InstantFireStartTrace_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.HasSocket
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

bool ANWeapRanged_Ironsight::HasSocket ( struct FName InSocketName )
{
	static UFunction* pFnHasSocket = NULL;

	if ( ! pFnHasSocket )
		pFnHasSocket = (UFunction*) UObject::GObjObjects()->Data[ 81963 ];

	ANWeapRanged_Ironsight_execHasSocket_Parms HasSocket_Parms;
	memcpy ( &HasSocket_Parms.InSocketName, &InSocketName, 0x8 );

	this->ProcessEvent ( pFnHasSocket, &HasSocket_Parms, NULL );

	return HasSocket_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.CanDrawWeaponCrosshair
// [0x00080102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapRanged_Ironsight::CanDrawWeaponCrosshair ( )
{
	static UFunction* pFnCanDrawWeaponCrosshair = NULL;

	if ( ! pFnCanDrawWeaponCrosshair )
		pFnCanDrawWeaponCrosshair = (UFunction*) UObject::GObjObjects()->Data[ 81961 ];

	ANWeapRanged_Ironsight_execCanDrawWeaponCrosshair_Parms CanDrawWeaponCrosshair_Parms;

	this->ProcessEvent ( pFnCanDrawWeaponCrosshair, &CanDrawWeaponCrosshair_Parms, NULL );

	return CanDrawWeaponCrosshair_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.SetPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AUDKPawn*                Holder                         ( CPF_Parm )

void ANWeapRanged_Ironsight::eventSetPosition ( class AUDKPawn* Holder )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 81959 ];

	ANWeapRanged_Ironsight_eventSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.Holder = Holder;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.OnPawnSwitchedPerspective
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Ironsight::OnPawnSwitchedPerspective ( )
{
	static UFunction* pFnOnPawnSwitchedPerspective = NULL;

	if ( ! pFnOnPawnSwitchedPerspective )
		pFnOnPawnSwitchedPerspective = (UFunction*) UObject::GObjObjects()->Data[ 81958 ];

	ANWeapRanged_Ironsight_execOnPawnSwitchedPerspective_Parms OnPawnSwitchedPerspective_Parms;

	this->ProcessEvent ( pFnOnPawnSwitchedPerspective, &OnPawnSwitchedPerspective_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.CheckZoom
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ANWeapRanged_Ironsight::CheckZoom ( unsigned char FireModeNum )
{
	static UFunction* pFnCheckZoom = NULL;

	if ( ! pFnCheckZoom )
		pFnCheckZoom = (UFunction*) UObject::GObjObjects()->Data[ 81955 ];

	ANWeapRanged_Ironsight_execCheckZoom_Parms CheckZoom_Parms;
	CheckZoom_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCheckZoom, &CheckZoom_Parms, NULL );

	return CheckZoom_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.EndZoom
// [0x00020102] 
// Parameters infos:
// class AUTPlayerController*     PC                             ( CPF_Parm )

void ANWeapRanged_Ironsight::EndZoom ( class AUTPlayerController* PC )
{
	static UFunction* pFnEndZoom = NULL;

	if ( ! pFnEndZoom )
		pFnEndZoom = (UFunction*) UObject::GObjObjects()->Data[ 81952 ];

	ANWeapRanged_Ironsight_execEndZoom_Parms EndZoom_Parms;
	EndZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnEndZoom, &EndZoom_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.StartZoom
// [0x00020102] 
// Parameters infos:
// class AUTPlayerController*     PC                             ( CPF_Parm )

void ANWeapRanged_Ironsight::StartZoom ( class AUTPlayerController* PC )
{
	static UFunction* pFnStartZoom = NULL;

	if ( ! pFnStartZoom )
		pFnStartZoom = (UFunction*) UObject::GObjObjects()->Data[ 81949 ];

	ANWeapRanged_Ironsight_execStartZoom_Parms StartZoom_Parms;
	StartZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnStartZoom, &StartZoom_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.ServerCheckMyZoom
// [0x002200C2] 
// Parameters infos:

void ANWeapRanged_Ironsight::ServerCheckMyZoom ( )
{
	static UFunction* pFnServerCheckMyZoom = NULL;

	if ( ! pFnServerCheckMyZoom )
		pFnServerCheckMyZoom = (UFunction*) UObject::GObjObjects()->Data[ 81948 ];

	ANWeapRanged_Ironsight_execServerCheckMyZoom_Parms ServerCheckMyZoom_Parms;

	this->ProcessEvent ( pFnServerCheckMyZoom, &ServerCheckMyZoom_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.GetPostureSpreadScalar
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANWeapRanged_Ironsight::GetPostureSpreadScalar ( )
{
	static UFunction* pFnGetPostureSpreadScalar = NULL;

	if ( ! pFnGetPostureSpreadScalar )
		pFnGetPostureSpreadScalar = (UFunction*) UObject::GObjObjects()->Data[ 81945 ];

	ANWeapRanged_Ironsight_execGetPostureSpreadScalar_Parms GetPostureSpreadScalar_Parms;

	this->ProcessEvent ( pFnGetPostureSpreadScalar, &GetPostureSpreadScalar_Parms, NULL );

	return GetPostureSpreadScalar_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.CheckMyZoom
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Ironsight::CheckMyZoom ( )
{
	static UFunction* pFnCheckMyZoom = NULL;

	if ( ! pFnCheckMyZoom )
		pFnCheckMyZoom = (UFunction*) UObject::GObjObjects()->Data[ 81944 ];

	ANWeapRanged_Ironsight_execCheckMyZoom_Parms CheckMyZoom_Parms;

	this->ProcessEvent ( pFnCheckMyZoom, &CheckMyZoom_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.IsZoomed
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapRanged_Ironsight::IsZoomed ( )
{
	static UFunction* pFnIsZoomed = NULL;

	if ( ! pFnIsZoomed )
		pFnIsZoomed = (UFunction*) UObject::GObjObjects()->Data[ 75562 ];

	ANWeapRanged_Ironsight_execIsZoomed_Parms IsZoomed_Parms;

	this->ProcessEvent ( pFnIsZoomed, &IsZoomed_Parms, NULL );

	return IsZoomed_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.GetZoomedState
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ANWeapRanged_Ironsight::GetZoomedState ( )
{
	static UFunction* pFnGetZoomedState = NULL;

	if ( ! pFnGetZoomedState )
		pFnGetZoomedState = (UFunction*) UObject::GObjObjects()->Data[ 81941 ];

	ANWeapRanged_Ironsight_execGetZoomedState_Parms GetZoomedState_Parms;

	this->ProcessEvent ( pFnGetZoomedState, &GetZoomedState_Parms, NULL );

	return GetZoomedState_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Ironsight.LowerWeapon
// [0x00080002] 
// Parameters infos:

void ANWeapRanged_Ironsight::LowerWeapon ( )
{
	static UFunction* pFnLowerWeapon = NULL;

	if ( ! pFnLowerWeapon )
		pFnLowerWeapon = (UFunction*) UObject::GObjObjects()->Data[ 81940 ];

	ANWeapRanged_Ironsight_execLowerWeapon_Parms LowerWeapon_Parms;

	this->ProcessEvent ( pFnLowerWeapon, &LowerWeapon_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.PlayFireEffects
// [0x00024102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ANWeapRanged_Ironsight::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 81937 ];

	ANWeapRanged_Ironsight_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.Activate
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Ironsight::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 81936 ];

	ANWeapRanged_Ironsight_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.DeactivateZoom
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void ANWeapRanged_Ironsight::DeactivateZoom ( )
{
	static UFunction* pFnDeactivateZoom = NULL;

	if ( ! pFnDeactivateZoom )
		pFnDeactivateZoom = (UFunction*) UObject::GObjObjects()->Data[ 81935 ];

	ANWeapRanged_Ironsight_execDeactivateZoom_Parms DeactivateZoom_Parms;

	this->ProcessEvent ( pFnDeactivateZoom, &DeactivateZoom_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANWeapRanged_Ironsight::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 81933 ];

	ANWeapRanged_Ironsight_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Ironsight.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Ironsight::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81932 ];

	ANWeapRanged_Ironsight_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Axe.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Axe::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81509 ];

	ANWeapMelee_Axe_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapMelee::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 81502 ];

	ANWeapMelee_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.CalculateMeleeCritical
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 RayDir                         ( CPF_Parm )

float ANWeapMelee::CalculateMeleeCritical ( class AActor* HitActor, struct FVector RayDir )
{
	static UFunction* pFnCalculateMeleeCritical = NULL;

	if ( ! pFnCalculateMeleeCritical )
		pFnCalculateMeleeCritical = (UFunction*) UObject::GObjObjects()->Data[ 81495 ];

	ANWeapMelee_execCalculateMeleeCritical_Parms CalculateMeleeCritical_Parms;
	CalculateMeleeCritical_Parms.HitActor = HitActor;
	memcpy ( &CalculateMeleeCritical_Parms.RayDir, &RayDir, 0xC );

	this->ProcessEvent ( pFnCalculateMeleeCritical, &CalculateMeleeCritical_Parms, NULL );

	return CalculateMeleeCritical_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.InstantFire
// [0x00820102] 
// Parameters infos:

void ANWeapMelee::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 81486 ];

	ANWeapMelee_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function NetherGame.NWeapMelee.IsBlocking
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapMelee::IsBlocking ( )
{
	static UFunction* pFnIsBlocking = NULL;

	if ( ! pFnIsBlocking )
		pFnIsBlocking = (UFunction*) UObject::GObjObjects()->Data[ 81453 ];

	ANWeapMelee_execIsBlocking_Parms IsBlocking_Parms;

	this->ProcessEvent ( pFnIsBlocking, &IsBlocking_Parms, NULL );

	return IsBlocking_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.IsInChargedAttack
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapMelee::IsInChargedAttack ( )
{
	static UFunction* pFnIsInChargedAttack = NULL;

	if ( ! pFnIsInChargedAttack )
		pFnIsInChargedAttack = (UFunction*) UObject::GObjObjects()->Data[ 81451 ];

	ANWeapMelee_execIsInChargedAttack_Parms IsInChargedAttack_Parms;

	this->ProcessEvent ( pFnIsInChargedAttack, &IsInChargedAttack_Parms, NULL );

	return IsInChargedAttack_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.InstantFireStartTrace
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANWeapMelee::InstantFireStartTrace ( )
{
	static UFunction* pFnInstantFireStartTrace = NULL;

	if ( ! pFnInstantFireStartTrace )
		pFnInstantFireStartTrace = (UFunction*) UObject::GObjObjects()->Data[ 81449 ];

	ANWeapMelee_execInstantFireStartTrace_Parms InstantFireStartTrace_Parms;

	this->ProcessEvent ( pFnInstantFireStartTrace, &InstantFireStartTrace_Parms, NULL );

	return InstantFireStartTrace_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.HandleFinishedFiring
// [0x00020100] 
// Parameters infos:

void ANWeapMelee::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 81448 ];

	ANWeapMelee_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function NetherGame.NWeapMelee.ServerCancelPendingAction
// [0x002200C2] 
// Parameters infos:

void ANWeapMelee::ServerCancelPendingAction ( )
{
	static UFunction* pFnServerCancelPendingAction = NULL;

	if ( ! pFnServerCancelPendingAction )
		pFnServerCancelPendingAction = (UFunction*) UObject::GObjObjects()->Data[ 81447 ];

	ANWeapMelee_execServerCancelPendingAction_Parms ServerCancelPendingAction_Parms;

	this->ProcessEvent ( pFnServerCancelPendingAction, &ServerCancelPendingAction_Parms, NULL );
};

// Function NetherGame.NWeapMelee.CancelPendingAction
// [0x00020102] 
// Parameters infos:

void ANWeapMelee::CancelPendingAction ( )
{
	static UFunction* pFnCancelPendingAction = NULL;

	if ( ! pFnCancelPendingAction )
		pFnCancelPendingAction = (UFunction*) UObject::GObjObjects()->Data[ 81446 ];

	ANWeapMelee_execCancelPendingAction_Parms CancelPendingAction_Parms;

	this->ProcessEvent ( pFnCancelPendingAction, &CancelPendingAction_Parms, NULL );
};

// Function NetherGame.NWeapMelee.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANWeapMelee::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 81443 ];

	ANWeapMelee_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function NetherGame.NWeapMelee.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ANWeapMelee::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 81440 ];

	ANWeapMelee_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function NetherGame.NWeapMelee.GetInstantHitDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireMode                       ( CPF_Parm )

float ANWeapMelee::GetInstantHitDamage ( int FireMode )
{
	static UFunction* pFnGetInstantHitDamage = NULL;

	if ( ! pFnGetInstantHitDamage )
		pFnGetInstantHitDamage = (UFunction*) UObject::GObjObjects()->Data[ 81436 ];

	ANWeapMelee_execGetInstantHitDamage_Parms GetInstantHitDamage_Parms;
	GetInstantHitDamage_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnGetInstantHitDamage, &GetInstantHitDamage_Parms, NULL );

	return GetInstantHitDamage_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ANWeapMelee::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 81432 ];

	ANWeapMelee_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWeapMelee::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 81430 ];

	ANWeapMelee_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee.Activate
// [0x00020102] 
// Parameters infos:

void ANWeapMelee::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 81429 ];

	ANWeapMelee_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function NetherGame.NWeapMelee.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81428 ];

	ANWeapMelee_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Bat.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Bat::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81517 ];

	ANWeapMelee_Bat_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_BattleAxe.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_BattleAxe::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81525 ];

	ANWeapMelee_BattleAxe_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Bolo.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Bolo::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81531 ];

	ANWeapMelee_Bolo_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Crowbar.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Crowbar::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81537 ];

	ANWeapMelee_Crowbar_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Pistol.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapRanged_Pistol::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 82069 ];

	ANWeapRanged_Pistol_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NWeapRanged_Pistol.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Pistol::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 82068 ];

	ANWeapRanged_Pistol_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_EastSword.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_EastSword::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81544 ];

	ANWeapMelee_EastSword_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Hands.GetBackpackSlotCapacity
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapMelee_Hands::GetBackpackSlotCapacity ( )
{
	static UFunction* pFnGetBackpackSlotCapacity = NULL;

	if ( ! pFnGetBackpackSlotCapacity )
		pFnGetBackpackSlotCapacity = (UFunction*) UObject::GObjObjects()->Data[ 81558 ];

	ANWeapMelee_Hands_execGetBackpackSlotCapacity_Parms GetBackpackSlotCapacity_Parms;

	this->ProcessEvent ( pFnGetBackpackSlotCapacity, &GetBackpackSlotCapacity_Parms, NULL );

	return GetBackpackSlotCapacity_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee_Hands.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANWeapMelee_Hands::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 81556 ];

	ANWeapMelee_Hands_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Hands.GetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapMelee_Hands::GetSlotNumber ( )
{
	static UFunction* pFnGetSlotNumber = NULL;

	if ( ! pFnGetSlotNumber )
		pFnGetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 81554 ];

	ANWeapMelee_Hands_execGetSlotNumber_Parms GetSlotNumber_Parms;

	this->ProcessEvent ( pFnGetSlotNumber, &GetSlotNumber_Parms, NULL );

	return GetSlotNumber_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee_Hands.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWeapMelee_Hands::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 81552 ];

	ANWeapMelee_Hands_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NWeapMelee_Hands.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Hands::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81550 ];

	ANWeapMelee_Hands_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Katana.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Katana::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81565 ];

	ANWeapMelee_Katana_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Knife.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Knife::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81571 ];

	ANWeapMelee_Knife_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapMelee_Machete.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapMelee_Machete::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 81577 ];

	ANWeapMelee_Machete_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Sniper.TakeOffMaterial
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Sniper::TakeOffMaterial ( )
{
	static UFunction* pFnTakeOffMaterial = NULL;

	if ( ! pFnTakeOffMaterial )
		pFnTakeOffMaterial = (UFunction*) UObject::GObjObjects()->Data[ 82123 ];

	ANWeapRanged_Sniper_execTakeOffMaterial_Parms TakeOffMaterial_Parms;

	this->ProcessEvent ( pFnTakeOffMaterial, &TakeOffMaterial_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Sniper.EndZoom
// [0x00020102] 
// Parameters infos:
// class AUTPlayerController*     PC                             ( CPF_Parm )

void ANWeapRanged_Sniper::EndZoom ( class AUTPlayerController* PC )
{
	static UFunction* pFnEndZoom = NULL;

	if ( ! pFnEndZoom )
		pFnEndZoom = (UFunction*) UObject::GObjObjects()->Data[ 82121 ];

	ANWeapRanged_Sniper_execEndZoom_Parms EndZoom_Parms;
	EndZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnEndZoom, &EndZoom_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Sniper.SniperReleaseBreath
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Sniper::SniperReleaseBreath ( )
{
	static UFunction* pFnSniperReleaseBreath = NULL;

	if ( ! pFnSniperReleaseBreath )
		pFnSniperReleaseBreath = (UFunction*) UObject::GObjObjects()->Data[ 82120 ];

	ANWeapRanged_Sniper_execSniperReleaseBreath_Parms SniperReleaseBreath_Parms;

	this->ProcessEvent ( pFnSniperReleaseBreath, &SniperReleaseBreath_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Sniper.SniperHoldBreath
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Sniper::SniperHoldBreath ( )
{
	static UFunction* pFnSniperHoldBreath = NULL;

	if ( ! pFnSniperHoldBreath )
		pFnSniperHoldBreath = (UFunction*) UObject::GObjObjects()->Data[ 82119 ];

	ANWeapRanged_Sniper_execSniperHoldBreath_Parms SniperHoldBreath_Parms;

	this->ProcessEvent ( pFnSniperHoldBreath, &SniperHoldBreath_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Sniper.PutOnMaterial
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Sniper::PutOnMaterial ( )
{
	static UFunction* pFnPutOnMaterial = NULL;

	if ( ! pFnPutOnMaterial )
		pFnPutOnMaterial = (UFunction*) UObject::GObjObjects()->Data[ 82118 ];

	ANWeapRanged_Sniper_execPutOnMaterial_Parms PutOnMaterial_Parms;

	this->ProcessEvent ( pFnPutOnMaterial, &PutOnMaterial_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Sniper.StartZoom
// [0x00020102] 
// Parameters infos:
// class AUTPlayerController*     PC                             ( CPF_Parm )

void ANWeapRanged_Sniper::StartZoom ( class AUTPlayerController* PC )
{
	static UFunction* pFnStartZoom = NULL;

	if ( ! pFnStartZoom )
		pFnStartZoom = (UFunction*) UObject::GObjObjects()->Data[ 82115 ];

	ANWeapRanged_Sniper_execStartZoom_Parms StartZoom_Parms;
	StartZoom_Parms.PC = PC;

	this->ProcessEvent ( pFnStartZoom, &StartZoom_Parms, NULL );
};

// Function NetherGame.NWeapRanged_Sniper.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANWeapRanged_Sniper::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 82114 ];

	ANWeapRanged_Sniper_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWardrobe.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ANWardrobe::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 71847 ];

	ANWardrobe_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function NetherGame.NWardrobe.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool ANWardrobe::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 71843 ];

	ANWardrobe_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANWardrobe::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 71841 ];

	ANWardrobe_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NWardrobe.IsDroppable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWardrobe::IsDroppable ( )
{
	static UFunction* pFnIsDroppable = NULL;

	if ( ! pFnIsDroppable )
		pFnIsDroppable = (UFunction*) UObject::GObjObjects()->Data[ 71839 ];

	ANWardrobe_execIsDroppable_Parms IsDroppable_Parms;

	this->ProcessEvent ( pFnIsDroppable, &IsDroppable_Parms, NULL );

	return IsDroppable_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.GetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWardrobe::GetSlotNumber ( )
{
	static UFunction* pFnGetSlotNumber = NULL;

	if ( ! pFnGetSlotNumber )
		pFnGetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 71837 ];

	ANWardrobe_execGetSlotNumber_Parms GetSlotNumber_Parms;

	this->ProcessEvent ( pFnGetSlotNumber, &GetSlotNumber_Parms, NULL );

	return GetSlotNumber_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.GetInventoryDesc
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANWardrobe::GetInventoryDesc ( )
{
	static UFunction* pFnGetInventoryDesc = NULL;

	if ( ! pFnGetInventoryDesc )
		pFnGetInventoryDesc = (UFunction*) UObject::GObjObjects()->Data[ 71835 ];

	ANWardrobe_execGetInventoryDesc_Parms GetInventoryDesc_Parms;

	this->ProcessEvent ( pFnGetInventoryDesc, &GetInventoryDesc_Parms, NULL );

	return GetInventoryDesc_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.GetInventoryName
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANWardrobe::GetInventoryName ( )
{
	static UFunction* pFnGetInventoryName = NULL;

	if ( ! pFnGetInventoryName )
		pFnGetInventoryName = (UFunction*) UObject::GObjObjects()->Data[ 71833 ];

	ANWardrobe_execGetInventoryName_Parms GetInventoryName_Parms;

	this->ProcessEvent ( pFnGetInventoryName, &GetInventoryName_Parms, NULL );

	return GetInventoryName_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWardrobe::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71831 ];

	ANWardrobe_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.GetWeight
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANWardrobe::GetWeight ( )
{
	static UFunction* pFnGetWeight = NULL;

	if ( ! pFnGetWeight )
		pFnGetWeight = (UFunction*) UObject::GObjObjects()->Data[ 71829 ];

	ANWardrobe_execGetWeight_Parms GetWeight_Parms;

	this->ProcessEvent ( pFnGetWeight, &GetWeight_Parms, NULL );

	return GetWeight_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.ConsumeItem
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Consumer                       ( CPF_Parm )

bool ANWardrobe::ConsumeItem ( class APawn* Consumer )
{
	static UFunction* pFnConsumeItem = NULL;

	if ( ! pFnConsumeItem )
		pFnConsumeItem = (UFunction*) UObject::GObjObjects()->Data[ 71826 ];

	ANWardrobe_execConsumeItem_Parms ConsumeItem_Parms;
	ConsumeItem_Parms.Consumer = Consumer;

	this->ProcessEvent ( pFnConsumeItem, &ConsumeItem_Parms, NULL );

	return ConsumeItem_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe.DetachFrom
// [0x00020102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )

void ANWardrobe::DetachFrom ( class USkeletalMeshComponent* MeshCpnt )
{
	static UFunction* pFnDetachFrom = NULL;

	if ( ! pFnDetachFrom )
		pFnDetachFrom = (UFunction*) UObject::GObjObjects()->Data[ 71818 ];

	ANWardrobe_execDetachFrom_Parms DetachFrom_Parms;
	DetachFrom_Parms.MeshCpnt = MeshCpnt;

	this->ProcessEvent ( pFnDetachFrom, &DetachFrom_Parms, NULL );
};

// Function NetherGame.NWardrobe.AttachTo
// [0x00020102] 
// Parameters infos:
// class ANetherPawn*             OwnerPawn                      ( CPF_Parm )
// struct FName                   AttachmentSocket               ( CPF_Parm )

void ANWardrobe::AttachTo ( class ANetherPawn* OwnerPawn, struct FName AttachmentSocket )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = (UFunction*) UObject::GObjObjects()->Data[ 71815 ];

	ANWardrobe_execAttachTo_Parms AttachTo_Parms;
	AttachTo_Parms.OwnerPawn = OwnerPawn;
	memcpy ( &AttachTo_Parms.AttachmentSocket, &AttachmentSocket, 0x8 );

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function NetherGame.NWardrobe.SetSkin
// [0x00020002] 
// Parameters infos:
// class UMaterial*               NewMaterial                    ( CPF_Parm )

void ANWardrobe::SetSkin ( class UMaterial* NewMaterial )
{
	static UFunction* pFnSetSkin = NULL;

	if ( ! pFnSetSkin )
		pFnSetSkin = (UFunction*) UObject::GObjObjects()->Data[ 71811 ];

	ANWardrobe_execSetSkin_Parms SetSkin_Parms;
	SetSkin_Parms.NewMaterial = NewMaterial;

	this->ProcessEvent ( pFnSetSkin, &SetSkin_Parms, NULL );
};

// Function NetherGame.NWardrobe.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANWardrobe::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 71810 ];

	ANWardrobe_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NWardrobe.GetInvClass
// [0x00022102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ANWardrobe::GetInvClass ( )
{
	static UFunction* pFnGetInvClass = NULL;

	if ( ! pFnGetInvClass )
		pFnGetInvClass = (UFunction*) UObject::GObjObjects()->Data[ 71808 ];

	ANWardrobe_execGetInvClass_Parms GetInvClass_Parms;

	this->ProcessEvent ( pFnGetInvClass, &GetInvClass_Parms, NULL );

	return GetInvClass_Parms.ReturnValue;
};

// Function NetherGame.NBackpack.UpdateVisibility
// [0x00020102] 
// Parameters infos:

void ANBackpack::UpdateVisibility ( )
{
	static UFunction* pFnUpdateVisibility = NULL;

	if ( ! pFnUpdateVisibility )
		pFnUpdateVisibility = (UFunction*) UObject::GObjObjects()->Data[ 71870 ];

	ANBackpack_execUpdateVisibility_Parms UpdateVisibility_Parms;

	this->ProcessEvent ( pFnUpdateVisibility, &UpdateVisibility_Parms, NULL );
};

// Function NetherGame.NBackpack.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANBackpack::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 71865 ];

	ANBackpack_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NBackpack.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANBackpack::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 71863 ];

	ANBackpack_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NBackpack.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANBackpack::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 71861 ];

	ANBackpack_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NBackpack.IsQuickSlotable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBackpack::IsQuickSlotable ( )
{
	static UFunction* pFnIsQuickSlotable = NULL;

	if ( ! pFnIsQuickSlotable )
		pFnIsQuickSlotable = (UFunction*) UObject::GObjObjects()->Data[ 71859 ];

	ANBackpack_execIsQuickSlotable_Parms IsQuickSlotable_Parms;

	this->ProcessEvent ( pFnIsQuickSlotable, &IsQuickSlotable_Parms, NULL );

	return IsQuickSlotable_Parms.ReturnValue;
};

// Function NetherGame.NBackpack.IsStackable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBackpack::IsStackable ( )
{
	static UFunction* pFnIsStackable = NULL;

	if ( ! pFnIsStackable )
		pFnIsStackable = (UFunction*) UObject::GObjObjects()->Data[ 71857 ];

	ANBackpack_execIsStackable_Parms IsStackable_Parms;

	this->ProcessEvent ( pFnIsStackable, &IsStackable_Parms, NULL );

	return IsStackable_Parms.ReturnValue;
};

// Function NetherGame.NBackpack.IsDroppable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANBackpack::IsDroppable ( )
{
	static UFunction* pFnIsDroppable = NULL;

	if ( ! pFnIsDroppable )
		pFnIsDroppable = (UFunction*) UObject::GObjObjects()->Data[ 71855 ];

	ANBackpack_execIsDroppable_Parms IsDroppable_Parms;

	this->ProcessEvent ( pFnIsDroppable, &IsDroppable_Parms, NULL );

	return IsDroppable_Parms.ReturnValue;
};

// Function NetherGame.NBackpack.GetWeight
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANBackpack::GetWeight ( )
{
	static UFunction* pFnGetWeight = NULL;

	if ( ! pFnGetWeight )
		pFnGetWeight = (UFunction*) UObject::GObjObjects()->Data[ 71853 ];

	ANBackpack_execGetWeight_Parms GetWeight_Parms;

	this->ProcessEvent ( pFnGetWeight, &GetWeight_Parms, NULL );

	return GetWeight_Parms.ReturnValue;
};

// Function NetherGame.NBackpack_ExtraLarge.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANBackpack_ExtraLarge::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71877 ];

	ANBackpack_ExtraLarge_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NBackpack_Large.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANBackpack_Large::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71882 ];

	ANBackpack_Large_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NBackpack_Medium.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANBackpack_Medium::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71887 ];

	ANBackpack_Medium_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NBackpack_Military.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANBackpack_Military::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71892 ];

	ANBackpack_Military_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NBackpack_MilitaryLarge.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANBackpack_MilitaryLarge::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71897 ];

	ANBackpack_MilitaryLarge_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NBackpack_Small.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANBackpack_Small::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 71902 ];

	ANBackpack_Small_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NBotEnemy_Shrieker.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ANBotEnemy_Shrieker::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 72165 ];

	ANBotEnemy_Shrieker_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function NetherGame.NCash.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ANCash::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 72417 ];

	ANCash_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function NetherGame.NCash.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool ANCash::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 72413 ];

	ANCash_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function NetherGame.NCash.GetInventoryDesc
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANCash::GetInventoryDesc ( )
{
	static UFunction* pFnGetInventoryDesc = NULL;

	if ( ! pFnGetInventoryDesc )
		pFnGetInventoryDesc = (UFunction*) UObject::GObjObjects()->Data[ 72411 ];

	ANCash_execGetInventoryDesc_Parms GetInventoryDesc_Parms;

	this->ProcessEvent ( pFnGetInventoryDesc, &GetInventoryDesc_Parms, NULL );

	return GetInventoryDesc_Parms.ReturnValue;
};

// Function NetherGame.NCash.GetInventoryName
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANCash::GetInventoryName ( )
{
	static UFunction* pFnGetInventoryName = NULL;

	if ( ! pFnGetInventoryName )
		pFnGetInventoryName = (UFunction*) UObject::GObjObjects()->Data[ 72409 ];

	ANCash_execGetInventoryName_Parms GetInventoryName_Parms;

	this->ProcessEvent ( pFnGetInventoryName, &GetInventoryName_Parms, NULL );

	return GetInventoryName_Parms.ReturnValue;
};

// Function NetherGame.NCash.ConsumeItem
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Consumer                       ( CPF_Parm )

bool ANCash::ConsumeItem ( class APawn* Consumer )
{
	static UFunction* pFnConsumeItem = NULL;

	if ( ! pFnConsumeItem )
		pFnConsumeItem = (UFunction*) UObject::GObjObjects()->Data[ 72403 ];

	ANCash_execConsumeItem_Parms ConsumeItem_Parms;
	ConsumeItem_Parms.Consumer = Consumer;

	this->ProcessEvent ( pFnConsumeItem, &ConsumeItem_Parms, NULL );

	return ConsumeItem_Parms.ReturnValue;
};

// Function NetherGame.NCash.ShouldConsumeImmediately
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANCash::ShouldConsumeImmediately ( )
{
	static UFunction* pFnShouldConsumeImmediately = NULL;

	if ( ! pFnShouldConsumeImmediately )
		pFnShouldConsumeImmediately = (UFunction*) UObject::GObjObjects()->Data[ 72401 ];

	ANCash_execShouldConsumeImmediately_Parms ShouldConsumeImmediately_Parms;

	this->ProcessEvent ( pFnShouldConsumeImmediately, &ShouldConsumeImmediately_Parms, NULL );

	return ShouldConsumeImmediately_Parms.ReturnValue;
};

// Function NetherGame.NCash.SetCash
// [0x00020102] 
// Parameters infos:
// int                            NewAmount                      ( CPF_Parm )

void ANCash::SetCash ( int NewAmount )
{
	static UFunction* pFnSetCash = NULL;

	if ( ! pFnSetCash )
		pFnSetCash = (UFunction*) UObject::GObjObjects()->Data[ 72399 ];

	ANCash_execSetCash_Parms SetCash_Parms;
	SetCash_Parms.NewAmount = NewAmount;

	this->ProcessEvent ( pFnSetCash, &SetCash_Parms, NULL );
};

// Function NetherGame.NetherGameSettings.GetServerDescription
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNetherGameSettings::GetServerDescription ( )
{
	static UFunction* pFnGetServerDescription = NULL;

	if ( ! pFnGetServerDescription )
		pFnGetServerDescription = (UFunction*) UObject::GObjObjects()->Data[ 73903 ];

	UNetherGameSettings_execGetServerDescription_Parms GetServerDescription_Parms;

	this->ProcessEvent ( pFnGetServerDescription, &GetServerDescription_Parms, NULL );

	return GetServerDescription_Parms.ReturnValue;
};

// Function NetherGame.NetherGameSettings.UpdateFromURL
// [0x00420002] 
// Parameters infos:
// class AGameInfo*               Game                           ( CPF_Parm )
// struct FString                 URL                            ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNetherGameSettings::UpdateFromURL ( class AGameInfo* Game, struct FString* URL )
{
	static UFunction* pFnUpdateFromURL = NULL;

	if ( ! pFnUpdateFromURL )
		pFnUpdateFromURL = (UFunction*) UObject::GObjObjects()->Data[ 73898 ];

	UNetherGameSettings_execUpdateFromURL_Parms UpdateFromURL_Parms;
	UpdateFromURL_Parms.Game = Game;

	this->ProcessEvent ( pFnUpdateFromURL, &UpdateFromURL_Parms, NULL );

	if ( URL )
		memcpy ( URL, &UpdateFromURL_Parms.URL, 0x10 );
};

// Function NetherGame.NetherGame.AddDefaultInventory
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ANetherGame::AddDefaultInventory ( class APawn* P )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 73866 ];

	ANetherGame_execAddDefaultInventory_Parms AddDefaultInventory_Parms;
	AddDefaultInventory_Parms.P = P;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function NetherGame.NetherGame.NeedPlayers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherGame::NeedPlayers ( )
{
	static UFunction* pFnNeedPlayers = NULL;

	if ( ! pFnNeedPlayers )
		pFnNeedPlayers = (UFunction*) UObject::GObjObjects()->Data[ 73864 ];

	ANetherGame_execNeedPlayers_Parms NeedPlayers_Parms;

	this->ProcessEvent ( pFnNeedPlayers, &NeedPlayers_Parms, NULL );

	return NeedPlayers_Parms.ReturnValue;
};

// Function NetherGame.NetherGame.BroadcastChatMessage
// [0x00024002] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            HexColor                       ( CPF_OptionalParm | CPF_Parm )

void ANetherGame::BroadcastChatMessage ( struct FString Message, int HexColor )
{
	static UFunction* pFnBroadcastChatMessage = NULL;

	if ( ! pFnBroadcastChatMessage )
		pFnBroadcastChatMessage = (UFunction*) UObject::GObjObjects()->Data[ 73860 ];

	ANetherGame_execBroadcastChatMessage_Parms BroadcastChatMessage_Parms;
	memcpy ( &BroadcastChatMessage_Parms.Message, &Message, 0x10 );
	BroadcastChatMessage_Parms.HexColor = HexColor;

	this->ProcessEvent ( pFnBroadcastChatMessage, &BroadcastChatMessage_Parms, NULL );
};

// Function NetherGame.NetherGame.Killed
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ANetherGame::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = (UFunction*) UObject::GObjObjects()->Data[ 73851 ];

	ANetherGame_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function NetherGame.NetherGame.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float ANetherGame::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 73835 ];

	ANetherGame_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function NetherGame.NetherGame.SpawnDefaultPawnFor
// [0x00820002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* ANetherGame::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 73824 ];

	ANetherGame_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function NetherGame.NetherGame.ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ANetherGame::ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = (UFunction*) UObject::GObjObjects()->Data[ 73816 ];

	ANetherGame_execReduceDamage_Parms ReduceDamage_Parms;
	ReduceDamage_Parms.injured = injured;
	ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	ReduceDamage_Parms.DamageType = DamageType;
	ReduceDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &ReduceDamage_Parms.Momentum, 0xC );
};

// Function NetherGame.NetherGame.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             aPlayer                        ( CPF_Parm )

void ANetherGame::RestartPlayer ( class AController* aPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 73813 ];

	ANetherGame_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function NetherGame.NetherGame.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ANetherGame::eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = (UFunction*) UObject::GObjObjects()->Data[ 73808 ];

	ANetherGame_eventSetGameType_Parms SetGameType_Parms;
	memcpy ( &SetGameType_Parms.MapName, &MapName, 0x10 );
	memcpy ( &SetGameType_Parms.Options, &Options, 0x10 );
	memcpy ( &SetGameType_Parms.Portal, &Portal, 0x10 );

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );

	return SetGameType_Parms.ReturnValue;
};

// Function NetherGame.NetherGame.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void ANetherGame::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 73807 ];

	ANetherGame_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherGame.Logout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void ANetherGame::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 73803 ];

	ANetherGame_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function NetherGame.NetherGame.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void ANetherGame::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 73793 ];

	ANetherGame_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function NetherGame.NetherGame.ServerHeartbeat
// [0x00020002] 
// Parameters infos:

void ANetherGame::ServerHeartbeat ( )
{
	static UFunction* pFnServerHeartbeat = NULL;

	if ( ! pFnServerHeartbeat )
		pFnServerHeartbeat = (UFunction*) UObject::GObjObjects()->Data[ 73792 ];

	ANetherGame_execServerHeartbeat_Parms ServerHeartbeat_Parms;

	this->ProcessEvent ( pFnServerHeartbeat, &ServerHeartbeat_Parms, NULL );
};

// Function NetherGame.NetherGame.SendServerMessage
// [0x00020002] 
// Parameters infos:

void ANetherGame::SendServerMessage ( )
{
	static UFunction* pFnSendServerMessage = NULL;

	if ( ! pFnSendServerMessage )
		pFnSendServerMessage = (UFunction*) UObject::GObjObjects()->Data[ 73790 ];

	ANetherGame_execSendServerMessage_Parms SendServerMessage_Parms;

	this->ProcessEvent ( pFnSendServerMessage, &SendServerMessage_Parms, NULL );
};

// Function NetherGame.NetherGame.ShutdownServer
// [0x00020002] 
// Parameters infos:

void ANetherGame::ShutdownServer ( )
{
	static UFunction* pFnShutdownServer = NULL;

	if ( ! pFnShutdownServer )
		pFnShutdownServer = (UFunction*) UObject::GObjObjects()->Data[ 73789 ];

	ANetherGame_execShutdownServer_Parms ShutdownServer_Parms;

	this->ProcessEvent ( pFnShutdownServer, &ShutdownServer_Parms, NULL );
};

// Function NetherGame.NetherGame.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ANetherGame::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 73787 ];

	ANetherGame_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherGame.ForceKickPlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

void ANetherGame::eventForceKickPlayer ( class APlayerController* PC, struct FString KickReason )
{
	static UFunction* pFnForceKickPlayer = NULL;

	if ( ! pFnForceKickPlayer )
		pFnForceKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 73784 ];

	ANetherGame_eventForceKickPlayer_Parms ForceKickPlayer_Parms;
	ForceKickPlayer_Parms.PC = PC;
	memcpy ( &ForceKickPlayer_Parms.KickReason, &KickReason, 0x10 );

	this->ProcessEvent ( pFnForceKickPlayer, &ForceKickPlayer_Parms, NULL );
};

// Function NetherGame.NetherGame.SpawnClassOverrideDocuments
// [0x00020000] 
// Parameters infos:

void ANetherGame::SpawnClassOverrideDocuments ( )
{
	static UFunction* pFnSpawnClassOverrideDocuments = NULL;

	if ( ! pFnSpawnClassOverrideDocuments )
		pFnSpawnClassOverrideDocuments = (UFunction*) UObject::GObjObjects()->Data[ 73783 ];

	ANetherGame_execSpawnClassOverrideDocuments_Parms SpawnClassOverrideDocuments_Parms;

	this->ProcessEvent ( pFnSpawnClassOverrideDocuments, &SpawnClassOverrideDocuments_Parms, NULL );
};

// Function NetherGame.NetherGame.ReplicateStreamingStatus
// [0x00020000] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ANetherGame::ReplicateStreamingStatus ( class APlayerController* PC )
{
	static UFunction* pFnReplicateStreamingStatus = NULL;

	if ( ! pFnReplicateStreamingStatus )
		pFnReplicateStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 73781 ];

	ANetherGame_execReplicateStreamingStatus_Parms ReplicateStreamingStatus_Parms;
	ReplicateStreamingStatus_Parms.PC = PC;

	this->ProcessEvent ( pFnReplicateStreamingStatus, &ReplicateStreamingStatus_Parms, NULL );
};

// Function NetherGame.NetherGame.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANetherGame::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 73779 ];

	ANetherGame_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherGame.PostBigMessageToAllPlayers
// [0x00020002] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void ANetherGame::PostBigMessageToAllPlayers ( struct FString Message )
{
	static UFunction* pFnPostBigMessageToAllPlayers = NULL;

	if ( ! pFnPostBigMessageToAllPlayers )
		pFnPostBigMessageToAllPlayers = (UFunction*) UObject::GObjObjects()->Data[ 73776 ];

	ANetherGame_execPostBigMessageToAllPlayers_Parms PostBigMessageToAllPlayers_Parms;
	memcpy ( &PostBigMessageToAllPlayers_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnPostBigMessageToAllPlayers, &PostBigMessageToAllPlayers_Parms, NULL );
};

// Function NetherGame.NetherGame.CanSpectate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       Viewer                         ( CPF_Parm )
// class APlayerReplicationInfo*  ViewTarget                     ( CPF_Parm )

bool ANetherGame::CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = (UFunction*) UObject::GObjObjects()->Data[ 73772 ];

	ANetherGame_execCanSpectate_Parms CanSpectate_Parms;
	CanSpectate_Parms.Viewer = Viewer;
	CanSpectate_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );

	return CanSpectate_Parms.ReturnValue;
};

// Function NetherGame.NetherGame.EndGame
// [0x00020000] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void ANetherGame::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 73769 ];

	ANetherGame_execEndGame_Parms EndGame_Parms;
	EndGame_Parms.Winner = Winner;
	memcpy ( &EndGame_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function NetherGame.NetherGame.ScoreFlag
// [0x00020000] 
// Parameters infos:
// class AController*             Scorer                         ( CPF_Parm )
// class AUTCTFFlag*              theFlag                        ( CPF_Parm )

void ANetherGame::ScoreFlag ( class AController* Scorer, class AUTCTFFlag* theFlag )
{
	static UFunction* pFnScoreFlag = NULL;

	if ( ! pFnScoreFlag )
		pFnScoreFlag = (UFunction*) UObject::GObjObjects()->Data[ 73766 ];

	ANetherGame_execScoreFlag_Parms ScoreFlag_Parms;
	ScoreFlag_Parms.Scorer = Scorer;
	ScoreFlag_Parms.theFlag = theFlag;

	this->ProcessEvent ( pFnScoreFlag, &ScoreFlag_Parms, NULL );
};

// Function NetherGame.NetherGame.ScoreKill
// [0x00020000] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void ANetherGame::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 73763 ];

	ANetherGame_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function NetherGame.NetherGame.CheckScore
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool ANetherGame::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = (UFunction*) UObject::GObjObjects()->Data[ 73760 ];

	ANetherGame_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function NetherGame.NetherGame.CheckLives
// [0x00020000] 
// Parameters infos:

void ANetherGame::CheckLives ( )
{
	static UFunction* pFnCheckLives = NULL;

	if ( ! pFnCheckLives )
		pFnCheckLives = (UFunction*) UObject::GObjObjects()->Data[ 73759 ];

	ANetherGame_execCheckLives_Parms CheckLives_Parms;

	this->ProcessEvent ( pFnCheckLives, &CheckLives_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInv.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANDocument_CharacterInv::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 72863 ];

	ANDocument_CharacterInv_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInv.ResetToDefault
// [0x00020002] 
// Parameters infos:

void ANDocument_CharacterInv::ResetToDefault ( )
{
	static UFunction* pFnResetToDefault = NULL;

	if ( ! pFnResetToDefault )
		pFnResetToDefault = (UFunction*) UObject::GObjObjects()->Data[ 72861 ];

	ANDocument_CharacterInv_execResetToDefault_Parms ResetToDefault_Parms;

	this->ProcessEvent ( pFnResetToDefault, &ResetToDefault_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInv.SetCharacterTemplateID
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            TemplateID                     ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            Body                           ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )

void ANDocument_CharacterInv::SetCharacterTemplateID ( int TemplateID, int Head, int Body, int Legs )
{
	static UFunction* pFnSetCharacterTemplateID = NULL;

	if ( ! pFnSetCharacterTemplateID )
		pFnSetCharacterTemplateID = (UFunction*) UObject::GObjObjects()->Data[ 72856 ];

	ANDocument_CharacterInv_execSetCharacterTemplateID_Parms SetCharacterTemplateID_Parms;
	SetCharacterTemplateID_Parms.TemplateID = TemplateID;
	SetCharacterTemplateID_Parms.Head = Head;
	SetCharacterTemplateID_Parms.Body = Body;
	SetCharacterTemplateID_Parms.Legs = Legs;

	this->ProcessEvent ( pFnSetCharacterTemplateID, &SetCharacterTemplateID_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInv.GetItemCount
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotNum                        ( CPF_Parm )

int ANDocument_CharacterInv::GetItemCount ( int SlotNum )
{
	static UFunction* pFnGetItemCount = NULL;

	if ( ! pFnGetItemCount )
		pFnGetItemCount = (UFunction*) UObject::GObjObjects()->Data[ 72853 ];

	ANDocument_CharacterInv_execGetItemCount_Parms GetItemCount_Parms;
	GetItemCount_Parms.SlotNum = SlotNum;

	this->ProcessEvent ( pFnGetItemCount, &GetItemCount_Parms, NULL );

	return GetItemCount_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInv.GetItemID
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotNum                        ( CPF_Parm )

int ANDocument_CharacterInv::GetItemID ( int SlotNum )
{
	static UFunction* pFnGetItemID = NULL;

	if ( ! pFnGetItemID )
		pFnGetItemID = (UFunction*) UObject::GObjObjects()->Data[ 72850 ];

	ANDocument_CharacterInv_execGetItemID_Parms GetItemID_Parms;
	GetItemID_Parms.SlotNum = SlotNum;

	this->ProcessEvent ( pFnGetItemID, &GetItemID_Parms, NULL );

	return GetItemID_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInv.GetQuickslotNumber
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ItemId                         ( CPF_Parm )

int ANDocument_CharacterInv::GetQuickslotNumber ( int ItemId )
{
	static UFunction* pFnGetQuickslotNumber = NULL;

	if ( ! pFnGetQuickslotNumber )
		pFnGetQuickslotNumber = (UFunction*) UObject::GObjObjects()->Data[ 72846 ];

	ANDocument_CharacterInv_execGetQuickslotNumber_Parms GetQuickslotNumber_Parms;
	GetQuickslotNumber_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnGetQuickslotNumber, &GetQuickslotNumber_Parms, NULL );

	return GetQuickslotNumber_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInv.SetQuickslotItem
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Slot                           ( CPF_Parm )
// int                            ItemId                         ( CPF_Parm )

bool ANDocument_CharacterInv::SetQuickslotItem ( int Slot, int ItemId )
{
	static UFunction* pFnSetQuickslotItem = NULL;

	if ( ! pFnSetQuickslotItem )
		pFnSetQuickslotItem = (UFunction*) UObject::GObjObjects()->Data[ 72842 ];

	ANDocument_CharacterInv_execSetQuickslotItem_Parms SetQuickslotItem_Parms;
	SetQuickslotItem_Parms.Slot = Slot;
	SetQuickslotItem_Parms.ItemId = ItemId;

	this->ProcessEvent ( pFnSetQuickslotItem, &SetQuickslotItem_Parms, NULL );

	return SetQuickslotItem_Parms.ReturnValue;
};

// Function NetherGame.NDocument_CharacterInv.SetSlot
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            SlotNum                        ( CPF_Parm )
// int                            ItemId                         ( CPF_Parm )
// int                            ItemCount                      ( CPF_Parm )
// unsigned long                  bForceSave                     ( CPF_OptionalParm | CPF_Parm )

void ANDocument_CharacterInv::SetSlot ( int SlotNum, int ItemId, int ItemCount, unsigned long bForceSave )
{
	static UFunction* pFnSetSlot = NULL;

	if ( ! pFnSetSlot )
		pFnSetSlot = (UFunction*) UObject::GObjObjects()->Data[ 72837 ];

	ANDocument_CharacterInv_execSetSlot_Parms SetSlot_Parms;
	SetSlot_Parms.SlotNum = SlotNum;
	SetSlot_Parms.ItemId = ItemId;
	SetSlot_Parms.ItemCount = ItemCount;
	SetSlot_Parms.bForceSave = bForceSave;

	this->ProcessEvent ( pFnSetSlot, &SetSlot_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInv.ClearSlot
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            SlotNum                        ( CPF_Parm )
// unsigned long                  bForceSave                     ( CPF_OptionalParm | CPF_Parm )

void ANDocument_CharacterInv::ClearSlot ( int SlotNum, unsigned long bForceSave )
{
	static UFunction* pFnClearSlot = NULL;

	if ( ! pFnClearSlot )
		pFnClearSlot = (UFunction*) UObject::GObjObjects()->Data[ 72834 ];

	ANDocument_CharacterInv_execClearSlot_Parms ClearSlot_Parms;
	ClearSlot_Parms.SlotNum = SlotNum;
	ClearSlot_Parms.bForceSave = bForceSave;

	this->ProcessEvent ( pFnClearSlot, &ClearSlot_Parms, NULL );
};

// Function NetherGame.NDocument_CharacterInv.OnDocumentUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANDocument_CharacterInv::eventOnDocumentUpdate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 72827 ];

	ANDocument_CharacterInv_eventOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NDocument_PlayerInv.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANDocument_PlayerInv::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 73095 ];

	ANDocument_PlayerInv_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NDocument_PlayerInv.GetAvailableTemplateSlots
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANDocument_PlayerInv::GetAvailableTemplateSlots ( )
{
	static UFunction* pFnGetAvailableTemplateSlots = NULL;

	if ( ! pFnGetAvailableTemplateSlots )
		pFnGetAvailableTemplateSlots = (UFunction*) UObject::GObjObjects()->Data[ 73092 ];

	ANDocument_PlayerInv_execGetAvailableTemplateSlots_Parms GetAvailableTemplateSlots_Parms;

	this->ProcessEvent ( pFnGetAvailableTemplateSlots, &GetAvailableTemplateSlots_Parms, NULL );

	return GetAvailableTemplateSlots_Parms.ReturnValue;
};

// Function NetherGame.NDocument_PlayerInv.AddPurchasedCharacterTemplate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            TemplateID                     ( CPF_Parm )

void ANDocument_PlayerInv::AddPurchasedCharacterTemplate ( int TemplateID )
{
	static UFunction* pFnAddPurchasedCharacterTemplate = NULL;

	if ( ! pFnAddPurchasedCharacterTemplate )
		pFnAddPurchasedCharacterTemplate = (UFunction*) UObject::GObjObjects()->Data[ 73089 ];

	ANDocument_PlayerInv_execAddPurchasedCharacterTemplate_Parms AddPurchasedCharacterTemplate_Parms;
	AddPurchasedCharacterTemplate_Parms.TemplateID = TemplateID;

	this->ProcessEvent ( pFnAddPurchasedCharacterTemplate, &AddPurchasedCharacterTemplate_Parms, NULL );
};

// Function NetherGame.NDocument_PlayerInv.OwnsCharacterTemplate
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TemplateID                     ( CPF_Parm )

bool ANDocument_PlayerInv::OwnsCharacterTemplate ( int TemplateID )
{
	static UFunction* pFnOwnsCharacterTemplate = NULL;

	if ( ! pFnOwnsCharacterTemplate )
		pFnOwnsCharacterTemplate = (UFunction*) UObject::GObjObjects()->Data[ 73085 ];

	ANDocument_PlayerInv_execOwnsCharacterTemplate_Parms OwnsCharacterTemplate_Parms;
	OwnsCharacterTemplate_Parms.TemplateID = TemplateID;

	this->ProcessEvent ( pFnOwnsCharacterTemplate, &OwnsCharacterTemplate_Parms, NULL );

	return OwnsCharacterTemplate_Parms.ReturnValue;
};

// Function NetherGame.NDocument_PlayerInv.GetItemCount
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Slot                           ( CPF_Parm )

int ANDocument_PlayerInv::GetItemCount ( int Slot )
{
	static UFunction* pFnGetItemCount = NULL;

	if ( ! pFnGetItemCount )
		pFnGetItemCount = (UFunction*) UObject::GObjObjects()->Data[ 73081 ];

	ANDocument_PlayerInv_execGetItemCount_Parms GetItemCount_Parms;
	GetItemCount_Parms.Slot = Slot;

	this->ProcessEvent ( pFnGetItemCount, &GetItemCount_Parms, NULL );

	return GetItemCount_Parms.ReturnValue;
};

// Function NetherGame.NDocument_PlayerInv.GetItemID
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Slot                           ( CPF_Parm )

int ANDocument_PlayerInv::GetItemID ( int Slot )
{
	static UFunction* pFnGetItemID = NULL;

	if ( ! pFnGetItemID )
		pFnGetItemID = (UFunction*) UObject::GObjObjects()->Data[ 73077 ];

	ANDocument_PlayerInv_execGetItemID_Parms GetItemID_Parms;
	GetItemID_Parms.Slot = Slot;

	this->ProcessEvent ( pFnGetItemID, &GetItemID_Parms, NULL );

	return GetItemID_Parms.ReturnValue;
};

// Function NetherGame.NDocument_PlayerInv.SetSlot
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            Slot                           ( CPF_Parm )
// int                            ItemId                         ( CPF_Parm )
// int                            ItemCount                      ( CPF_Parm )
// unsigned long                  bForceSave                     ( CPF_OptionalParm | CPF_Parm )

void ANDocument_PlayerInv::SetSlot ( int Slot, int ItemId, int ItemCount, unsigned long bForceSave )
{
	static UFunction* pFnSetSlot = NULL;

	if ( ! pFnSetSlot )
		pFnSetSlot = (UFunction*) UObject::GObjObjects()->Data[ 73071 ];

	ANDocument_PlayerInv_execSetSlot_Parms SetSlot_Parms;
	SetSlot_Parms.Slot = Slot;
	SetSlot_Parms.ItemId = ItemId;
	SetSlot_Parms.ItemCount = ItemCount;
	SetSlot_Parms.bForceSave = bForceSave;

	this->ProcessEvent ( pFnSetSlot, &SetSlot_Parms, NULL );
};

// Function NetherGame.NDocument_PlayerInv.ClearSlot
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            SlotNum                        ( CPF_Parm )
// unsigned long                  bForceSave                     ( CPF_OptionalParm | CPF_Parm )

void ANDocument_PlayerInv::ClearSlot ( int SlotNum, unsigned long bForceSave )
{
	static UFunction* pFnClearSlot = NULL;

	if ( ! pFnClearSlot )
		pFnClearSlot = (UFunction*) UObject::GObjObjects()->Data[ 73068 ];

	ANDocument_PlayerInv_execClearSlot_Parms ClearSlot_Parms;
	ClearSlot_Parms.SlotNum = SlotNum;
	ClearSlot_Parms.bForceSave = bForceSave;

	this->ProcessEvent ( pFnClearSlot, &ClearSlot_Parms, NULL );
};

// Function NetherGame.NDocument_PlayerInv.InitForPlayer
// [0x00020002] 
// Parameters infos:
// class ANetherPlayerController* PC                             ( CPF_Parm )
// int                            CharacterIndex                 ( CPF_Parm )

void ANDocument_PlayerInv::InitForPlayer ( class ANetherPlayerController* PC, int CharacterIndex )
{
	static UFunction* pFnInitForPlayer = NULL;

	if ( ! pFnInitForPlayer )
		pFnInitForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 73064 ];

	ANDocument_PlayerInv_execInitForPlayer_Parms InitForPlayer_Parms;
	InitForPlayer_Parms.PC = PC;
	InitForPlayer_Parms.CharacterIndex = CharacterIndex;

	this->ProcessEvent ( pFnInitForPlayer, &InitForPlayer_Parms, NULL );
};

// Function NetherGame.NetherThirdPersonCameraMode.AdjustViewOffset
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Offset                         ( CPF_Parm )

struct FVector UNetherThirdPersonCameraMode::eventAdjustViewOffset ( class APawn* P, struct FVector Offset )
{
	static UFunction* pFnAdjustViewOffset = NULL;

	if ( ! pFnAdjustViewOffset )
		pFnAdjustViewOffset = (UFunction*) UObject::GObjObjects()->Data[ 79011 ];

	UNetherThirdPersonCameraMode_eventAdjustViewOffset_Parms AdjustViewOffset_Parms;
	AdjustViewOffset_Parms.P = P;
	memcpy ( &AdjustViewOffset_Parms.Offset, &Offset, 0xC );

	this->ProcessEvent ( pFnAdjustViewOffset, &AdjustViewOffset_Parms, NULL );

	return AdjustViewOffset_Parms.ReturnValue;
};

// Function NetherGame.NetherThirdPersonCameraMode.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// class AActor*                  ViewTarget                     ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void UNetherThirdPersonCameraMode::ProcessViewRotation ( float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 79006 ];

	UNetherThirdPersonCameraMode_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	ProcessViewRotation_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function NetherGame.NetherCameraMode_SocketIronsights.GetDesiredFOV
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ViewedPawn                     ( CPF_Parm )

float UNetherCameraMode_SocketIronsights::GetDesiredFOV ( class APawn* ViewedPawn )
{
	static UFunction* pFnGetDesiredFOV = NULL;

	if ( ! pFnGetDesiredFOV )
		pFnGetDesiredFOV = (UFunction*) UObject::GObjObjects()->Data[ 73203 ];

	UNetherCameraMode_SocketIronsights_execGetDesiredFOV_Parms GetDesiredFOV_Parms;
	GetDesiredFOV_Parms.ViewedPawn = ViewedPawn;

	this->ProcessEvent ( pFnGetDesiredFOV, &GetDesiredFOV_Parms, NULL );

	return GetDesiredFOV_Parms.ReturnValue;
};

// Function NetherGame.NetherFrontendGame.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void ANetherFrontendGame::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 73715 ];

	ANetherFrontendGame_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.HideCAPScreen
// [0x00020002] 
// Parameters infos:

void UNetherCAPUI::HideCAPScreen ( )
{
	static UFunction* pFnHideCAPScreen = NULL;

	if ( ! pFnHideCAPScreen )
		pFnHideCAPScreen = (UFunction*) UObject::GObjObjects()->Data[ 73350 ];

	UNetherCAPUI_execHideCAPScreen_Parms HideCAPScreen_Parms;

	this->ProcessEvent ( pFnHideCAPScreen, &HideCAPScreen_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.ShowCAPScreen
// [0x00020002] 
// Parameters infos:

void UNetherCAPUI::ShowCAPScreen ( )
{
	static UFunction* pFnShowCAPScreen = NULL;

	if ( ! pFnShowCAPScreen )
		pFnShowCAPScreen = (UFunction*) UObject::GObjObjects()->Data[ 73349 ];

	UNetherCAPUI_execShowCAPScreen_Parms ShowCAPScreen_Parms;

	this->ProcessEvent ( pFnShowCAPScreen, &ShowCAPScreen_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherCAPUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 73348 ];

	UNetherCAPUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.BuildOnComplete
// [0x00020000] 
// Parameters infos:

void UNetherCAPUI::BuildOnComplete ( )
{
	static UFunction* pFnBuildOnComplete = NULL;

	if ( ! pFnBuildOnComplete )
		pFnBuildOnComplete = (UFunction*) UObject::GObjObjects()->Data[ 73347 ];

	UNetherCAPUI_execBuildOnComplete_Parms BuildOnComplete_Parms;

	this->ProcessEvent ( pFnBuildOnComplete, &BuildOnComplete_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherCAPUI::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 73343 ];

	UNetherCAPUI_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.CloseCAPScreen
// [0x00020002] 
// Parameters infos:

void UNetherCAPUI::CloseCAPScreen ( )
{
	static UFunction* pFnCloseCAPScreen = NULL;

	if ( ! pFnCloseCAPScreen )
		pFnCloseCAPScreen = (UFunction*) UObject::GObjObjects()->Data[ 73342 ];

	UNetherCAPUI_execCloseCAPScreen_Parms CloseCAPScreen_Parms;

	this->ProcessEvent ( pFnCloseCAPScreen, &CloseCAPScreen_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherCAPUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 73341 ];

	UNetherCAPUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherCAPUI.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherCAPUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 73339 ];

	UNetherCAPUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.GetAbilityDescriptionString
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  Attrib                         ( CPF_Parm )
// int                            Level                          ( CPF_Parm )

struct FString UNetherCharacterUI::GetAbilityDescriptionString ( unsigned char Attrib, int Level )
{
	static UFunction* pFnGetAbilityDescriptionString = NULL;

	if ( ! pFnGetAbilityDescriptionString )
		pFnGetAbilityDescriptionString = (UFunction*) UObject::GObjObjects()->Data[ 73410 ];

	UNetherCharacterUI_execGetAbilityDescriptionString_Parms GetAbilityDescriptionString_Parms;
	GetAbilityDescriptionString_Parms.Attrib = Attrib;
	GetAbilityDescriptionString_Parms.Level = Level;

	this->ProcessEvent ( pFnGetAbilityDescriptionString, &GetAbilityDescriptionString_Parms, NULL );

	return GetAbilityDescriptionString_Parms.ReturnValue;
};

// Function NetherGame.NetherCharacterUI.HideCharacterScreen
// [0x00020002] 
// Parameters infos:

void UNetherCharacterUI::HideCharacterScreen ( )
{
	static UFunction* pFnHideCharacterScreen = NULL;

	if ( ! pFnHideCharacterScreen )
		pFnHideCharacterScreen = (UFunction*) UObject::GObjObjects()->Data[ 73439 ];

	UNetherCharacterUI_execHideCharacterScreen_Parms HideCharacterScreen_Parms;

	this->ProcessEvent ( pFnHideCharacterScreen, &HideCharacterScreen_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.ShowCharacterScreen
// [0x00020002] 
// Parameters infos:

void UNetherCharacterUI::ShowCharacterScreen ( )
{
	static UFunction* pFnShowCharacterScreen = NULL;

	if ( ! pFnShowCharacterScreen )
		pFnShowCharacterScreen = (UFunction*) UObject::GObjObjects()->Data[ 73438 ];

	UNetherCharacterUI_execShowCharacterScreen_Parms ShowCharacterScreen_Parms;

	this->ProcessEvent ( pFnShowCharacterScreen, &ShowCharacterScreen_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.AS_SetGlobalData
// [0x00020002] 
// Parameters infos:
// class UGFxObject*              Data                           ( CPF_Parm )

void UNetherCharacterUI::AS_SetGlobalData ( class UGFxObject* Data )
{
	static UFunction* pFnAS_SetGlobalData = NULL;

	if ( ! pFnAS_SetGlobalData )
		pFnAS_SetGlobalData = (UFunction*) UObject::GObjObjects()->Data[ 73436 ];

	UNetherCharacterUI_execAS_SetGlobalData_Parms AS_SetGlobalData_Parms;
	AS_SetGlobalData_Parms.Data = Data;

	this->ProcessEvent ( pFnAS_SetGlobalData, &AS_SetGlobalData_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherCharacterUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 73435 ];

	UNetherCharacterUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.RefreshUI
// [0x00020002] 
// Parameters infos:

void UNetherCharacterUI::RefreshUI ( )
{
	static UFunction* pFnRefreshUI = NULL;

	if ( ! pFnRefreshUI )
		pFnRefreshUI = (UFunction*) UObject::GObjObjects()->Data[ 73417 ];

	UNetherCharacterUI_execRefreshUI_Parms RefreshUI_Parms;

	this->ProcessEvent ( pFnRefreshUI, &RefreshUI_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.ShowToolTip
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// struct FString                 DescriptionText                ( CPF_Parm | CPF_NeedCtorLink )

void UNetherCharacterUI::ShowToolTip ( float X, float Y, struct FString DescriptionText )
{
	static UFunction* pFnShowToolTip = NULL;

	if ( ! pFnShowToolTip )
		pFnShowToolTip = (UFunction*) UObject::GObjObjects()->Data[ 73411 ];

	UNetherCharacterUI_execShowToolTip_Parms ShowToolTip_Parms;
	ShowToolTip_Parms.X = X;
	ShowToolTip_Parms.Y = Y;
	memcpy ( &ShowToolTip_Parms.DescriptionText, &DescriptionText, 0x10 );

	this->ProcessEvent ( pFnShowToolTip, &ShowToolTip_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.AbilityNodeClicked
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherCharacterUI::AbilityNodeClicked ( class UGFxButton* Button )
{
	static UFunction* pFnAbilityNodeClicked = NULL;

	if ( ! pFnAbilityNodeClicked )
		pFnAbilityNodeClicked = (UFunction*) UObject::GObjObjects()->Data[ 73406 ];

	UNetherCharacterUI_execAbilityNodeClicked_Parms AbilityNodeClicked_Parms;
	AbilityNodeClicked_Parms.Button = Button;

	this->ProcessEvent ( pFnAbilityNodeClicked, &AbilityNodeClicked_Parms, NULL );

	return AbilityNodeClicked_Parms.ReturnValue;
};

// Function NetherGame.NetherCharacterUI.MinusButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              MinusButton                    ( CPF_Parm )

int UNetherCharacterUI::MinusButtonPressed ( class UGFxButton* MinusButton )
{
	static UFunction* pFnMinusButtonPressed = NULL;

	if ( ! pFnMinusButtonPressed )
		pFnMinusButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 73402 ];

	UNetherCharacterUI_execMinusButtonPressed_Parms MinusButtonPressed_Parms;
	MinusButtonPressed_Parms.MinusButton = MinusButton;

	this->ProcessEvent ( pFnMinusButtonPressed, &MinusButtonPressed_Parms, NULL );

	return MinusButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherCharacterUI.PlusButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              PlusButton                     ( CPF_Parm )

int UNetherCharacterUI::PlusButtonPressed ( class UGFxButton* PlusButton )
{
	static UFunction* pFnPlusButtonPressed = NULL;

	if ( ! pFnPlusButtonPressed )
		pFnPlusButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 73398 ];

	UNetherCharacterUI_execPlusButtonPressed_Parms PlusButtonPressed_Parms;
	PlusButtonPressed_Parms.PlusButton = PlusButton;

	this->ProcessEvent ( pFnPlusButtonPressed, &PlusButtonPressed_Parms, NULL );

	return PlusButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherCharacterUI.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherCharacterUI::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 73395 ];

	UNetherCharacterUI_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherCharacterUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 73394 ];

	UNetherCharacterUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.CloseCharacter
// [0x00020002] 
// Parameters infos:

void UNetherCharacterUI::CloseCharacter ( )
{
	static UFunction* pFnCloseCharacter = NULL;

	if ( ! pFnCloseCharacter )
		pFnCloseCharacter = (UFunction*) UObject::GObjObjects()->Data[ 73393 ];

	UNetherCharacterUI_execCloseCharacter_Parms CloseCharacter_Parms;

	this->ProcessEvent ( pFnCloseCharacter, &CloseCharacter_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.InitStatWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 WidgetPath                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  AttributeType                  ( CPF_Parm )

void UNetherCharacterUI::InitStatWidget ( struct FString WidgetPath, unsigned char AttributeType )
{
	static UFunction* pFnInitStatWidget = NULL;

	if ( ! pFnInitStatWidget )
		pFnInitStatWidget = (UFunction*) UObject::GObjObjects()->Data[ 73387 ];

	UNetherCharacterUI_execInitStatWidget_Parms InitStatWidget_Parms;
	memcpy ( &InitStatWidget_Parms.WidgetPath, &WidgetPath, 0x10 );
	InitStatWidget_Parms.AttributeType = AttributeType;

	this->ProcessEvent ( pFnInitStatWidget, &InitStatWidget_Parms, NULL );
};

// Function NetherGame.NetherCharacterUI.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherCharacterUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 73385 ];

	UNetherCharacterUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.SpeedGod
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::SpeedGod ( )
{
	static UFunction* pFnSpeedGod = NULL;

	if ( ! pFnSpeedGod )
		pFnSpeedGod = (UFunction*) UObject::GObjObjects()->Data[ 73545 ];

	UNetherCheatManager_execSpeedGod_Parms SpeedGod_Parms;

	this->ProcessEvent ( pFnSpeedGod, &SpeedGod_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.ValidateTerritoryVolumes
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::ValidateTerritoryVolumes ( )
{
	static UFunction* pFnValidateTerritoryVolumes = NULL;

	if ( ! pFnValidateTerritoryVolumes )
		pFnValidateTerritoryVolumes = (UFunction*) UObject::GObjObjects()->Data[ 73543 ];

	UNetherCheatManager_execValidateTerritoryVolumes_Parms ValidateTerritoryVolumes_Parms;

	this->ProcessEvent ( pFnValidateTerritoryVolumes, &ValidateTerritoryVolumes_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.ToggleDebugPickupFinder
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::ToggleDebugPickupFinder ( )
{
	static UFunction* pFnToggleDebugPickupFinder = NULL;

	if ( ! pFnToggleDebugPickupFinder )
		pFnToggleDebugPickupFinder = (UFunction*) UObject::GObjObjects()->Data[ 73539 ];

	UNetherCheatManager_execToggleDebugPickupFinder_Parms ToggleDebugPickupFinder_Parms;

	this->ProcessEvent ( pFnToggleDebugPickupFinder, &ToggleDebugPickupFinder_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.KillNearbyEnemies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::KillNearbyEnemies ( )
{
	static UFunction* pFnKillNearbyEnemies = NULL;

	if ( ! pFnKillNearbyEnemies )
		pFnKillNearbyEnemies = (UFunction*) UObject::GObjObjects()->Data[ 73536 ];

	UNetherCheatManager_execKillNearbyEnemies_Parms KillNearbyEnemies_Parms;

	this->ProcessEvent ( pFnKillNearbyEnemies, &KillNearbyEnemies_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.TakeDamage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )

void UNetherCheatManager::TakeDamage ( int DamageAmount )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 73533 ];

	UNetherCheatManager_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveGold
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void UNetherCheatManager::GiveGold ( int Amount )
{
	static UFunction* pFnGiveGold = NULL;

	if ( ! pFnGiveGold )
		pFnGiveGold = (UFunction*) UObject::GObjObjects()->Data[ 73531 ];

	UNetherCheatManager_execGiveGold_Parms GiveGold_Parms;
	GiveGold_Parms.Amount = Amount;

	this->ProcessEvent ( pFnGiveGold, &GiveGold_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveCash
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            CashToGive                     ( CPF_Parm )

void UNetherCheatManager::GiveCash ( int CashToGive )
{
	static UFunction* pFnGiveCash = NULL;

	if ( ! pFnGiveCash )
		pFnGiveCash = (UFunction*) UObject::GObjObjects()->Data[ 73528 ];

	UNetherCheatManager_execGiveCash_Parms GiveCash_Parms;
	GiveCash_Parms.CashToGive = CashToGive;

	this->ProcessEvent ( pFnGiveCash, &GiveCash_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugResetServerDocs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugResetServerDocs ( )
{
	static UFunction* pFnDebugResetServerDocs = NULL;

	if ( ! pFnDebugResetServerDocs )
		pFnDebugResetServerDocs = (UFunction*) UObject::GObjObjects()->Data[ 73525 ];

	UNetherCheatManager_execDebugResetServerDocs_Parms DebugResetServerDocs_Parms;

	this->ProcessEvent ( pFnDebugResetServerDocs, &DebugResetServerDocs_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveAllWeapons_Ranged
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::GiveAllWeapons_Ranged ( )
{
	static UFunction* pFnGiveAllWeapons_Ranged = NULL;

	if ( ! pFnGiveAllWeapons_Ranged )
		pFnGiveAllWeapons_Ranged = (UFunction*) UObject::GObjObjects()->Data[ 73522 ];

	UNetherCheatManager_execGiveAllWeapons_Ranged_Parms GiveAllWeapons_Ranged_Parms;

	this->ProcessEvent ( pFnGiveAllWeapons_Ranged, &GiveAllWeapons_Ranged_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveAllWeapons_Melee
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::GiveAllWeapons_Melee ( )
{
	static UFunction* pFnGiveAllWeapons_Melee = NULL;

	if ( ! pFnGiveAllWeapons_Melee )
		pFnGiveAllWeapons_Melee = (UFunction*) UObject::GObjObjects()->Data[ 73519 ];

	UNetherCheatManager_execGiveAllWeapons_Melee_Parms GiveAllWeapons_Melee_Parms;

	this->ProcessEvent ( pFnGiveAllWeapons_Melee, &GiveAllWeapons_Melee_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveAllWeapons
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::GiveAllWeapons ( )
{
	static UFunction* pFnGiveAllWeapons = NULL;

	if ( ! pFnGiveAllWeapons )
		pFnGiveAllWeapons = (UFunction*) UObject::GObjObjects()->Data[ 73518 ];

	UNetherCheatManager_execGiveAllWeapons_Parms GiveAllWeapons_Parms;

	this->ProcessEvent ( pFnGiveAllWeapons, &GiveAllWeapons_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveBiggestBackpack
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherCheatManager::GiveBiggestBackpack ( )
{
	static UFunction* pFnGiveBiggestBackpack = NULL;

	if ( ! pFnGiveBiggestBackpack )
		pFnGiveBiggestBackpack = (UFunction*) UObject::GObjObjects()->Data[ 73512 ];

	UNetherCheatManager_execGiveBiggestBackpack_Parms GiveBiggestBackpack_Parms;

	this->ProcessEvent ( pFnGiveBiggestBackpack, &GiveBiggestBackpack_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveXP
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            XPToGive                       ( CPF_Parm )

void UNetherCheatManager::GiveXP ( int XPToGive )
{
	static UFunction* pFnGiveXP = NULL;

	if ( ! pFnGiveXP )
		pFnGiveXP = (UFunction*) UObject::GObjObjects()->Data[ 73509 ];

	UNetherCheatManager_execGiveXP_Parms GiveXP_Parms;
	GiveXP_Parms.XPToGive = XPToGive;

	this->ProcessEvent ( pFnGiveXP, &GiveXP_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.Invisible
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UNetherCheatManager::Invisible ( unsigned long B )
{
	static UFunction* pFnInvisible = NULL;

	if ( ! pFnInvisible )
		pFnInvisible = (UFunction*) UObject::GObjObjects()->Data[ 73507 ];

	UNetherCheatManager_execInvisible_Parms Invisible_Parms;
	Invisible_Parms.B = B;

	this->ProcessEvent ( pFnInvisible, &Invisible_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.ToggleAggroDisplay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bSight                         ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void UNetherCheatManager::ToggleAggroDisplay ( unsigned long bSight, unsigned long bSound )
{
	static UFunction* pFnToggleAggroDisplay = NULL;

	if ( ! pFnToggleAggroDisplay )
		pFnToggleAggroDisplay = (UFunction*) UObject::GObjObjects()->Data[ 73503 ];

	UNetherCheatManager_execToggleAggroDisplay_Parms ToggleAggroDisplay_Parms;
	ToggleAggroDisplay_Parms.bSight = bSight;
	ToggleAggroDisplay_Parms.bSound = bSound;

	this->ProcessEvent ( pFnToggleAggroDisplay, &ToggleAggroDisplay_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.ToggleGlobalInventory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::ToggleGlobalInventory ( )
{
	static UFunction* pFnToggleGlobalInventory = NULL;

	if ( ! pFnToggleGlobalInventory )
		pFnToggleGlobalInventory = (UFunction*) UObject::GObjObjects()->Data[ 73500 ];

	UNetherCheatManager_execToggleGlobalInventory_Parms ToggleGlobalInventory_Parms;

	this->ProcessEvent ( pFnToggleGlobalInventory, &ToggleGlobalInventory_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.ToggleDebugAim
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::ToggleDebugAim ( )
{
	static UFunction* pFnToggleDebugAim = NULL;

	if ( ! pFnToggleDebugAim )
		pFnToggleDebugAim = (UFunction*) UObject::GObjObjects()->Data[ 73498 ];

	UNetherCheatManager_execToggleDebugAim_Parms ToggleDebugAim_Parms;

	this->ProcessEvent ( pFnToggleDebugAim, &ToggleDebugAim_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.ToggleDebugSpawn
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bPrintToScreen                 ( CPF_OptionalParm | CPF_Parm )

void UNetherCheatManager::ToggleDebugSpawn ( unsigned long bPrintToScreen )
{
	static UFunction* pFnToggleDebugSpawn = NULL;

	if ( ! pFnToggleDebugSpawn )
		pFnToggleDebugSpawn = (UFunction*) UObject::GObjObjects()->Data[ 73493 ];

	UNetherCheatManager_execToggleDebugSpawn_Parms ToggleDebugSpawn_Parms;
	ToggleDebugSpawn_Parms.bPrintToScreen = bPrintToScreen;

	this->ProcessEvent ( pFnToggleDebugSpawn, &ToggleDebugSpawn_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.GiveAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void UNetherCheatManager::GiveAmmo ( int Amount )
{
	static UFunction* pFnGiveAmmo = NULL;

	if ( ! pFnGiveAmmo )
		pFnGiveAmmo = (UFunction*) UObject::GObjObjects()->Data[ 73484 ];

	UNetherCheatManager_execGiveAmmo_Parms GiveAmmo_Parms;
	GiveAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnGiveAmmo, &GiveAmmo_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.TossItemInFrontOfPlayer
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  InvClass                       ( CPF_Parm )

void UNetherCheatManager::TossItemInFrontOfPlayer ( class UClass* InvClass )
{
	static UFunction* pFnTossItemInFrontOfPlayer = NULL;

	if ( ! pFnTossItemInFrontOfPlayer )
		pFnTossItemInFrontOfPlayer = (UFunction*) UObject::GObjObjects()->Data[ 73470 ];

	UNetherCheatManager_execTossItemInFrontOfPlayer_Parms TossItemInFrontOfPlayer_Parms;
	TossItemInFrontOfPlayer_Parms.InvClass = InvClass;

	this->ProcessEvent ( pFnTossItemInFrontOfPlayer, &TossItemInFrontOfPlayer_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugSpawnPackages
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugSpawnPackages ( )
{
	static UFunction* pFnDebugSpawnPackages = NULL;

	if ( ! pFnDebugSpawnPackages )
		pFnDebugSpawnPackages = (UFunction*) UObject::GObjObjects()->Data[ 73479 ];

	UNetherCheatManager_execDebugSpawnPackages_Parms DebugSpawnPackages_Parms;

	this->ProcessEvent ( pFnDebugSpawnPackages, &DebugSpawnPackages_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugSpawnAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugSpawnAmmo ( )
{
	static UFunction* pFnDebugSpawnAmmo = NULL;

	if ( ! pFnDebugSpawnAmmo )
		pFnDebugSpawnAmmo = (UFunction*) UObject::GObjObjects()->Data[ 73477 ];

	UNetherCheatManager_execDebugSpawnAmmo_Parms DebugSpawnAmmo_Parms;

	this->ProcessEvent ( pFnDebugSpawnAmmo, &DebugSpawnAmmo_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugSpawnWings
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugSpawnWings ( )
{
	static UFunction* pFnDebugSpawnWings = NULL;

	if ( ! pFnDebugSpawnWings )
		pFnDebugSpawnWings = (UFunction*) UObject::GObjObjects()->Data[ 73475 ];

	UNetherCheatManager_execDebugSpawnWings_Parms DebugSpawnWings_Parms;

	this->ProcessEvent ( pFnDebugSpawnWings, &DebugSpawnWings_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugSpawnConsumables_Health
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugSpawnConsumables_Health ( )
{
	static UFunction* pFnDebugSpawnConsumables_Health = NULL;

	if ( ! pFnDebugSpawnConsumables_Health )
		pFnDebugSpawnConsumables_Health = (UFunction*) UObject::GObjObjects()->Data[ 73473 ];

	UNetherCheatManager_execDebugSpawnConsumables_Health_Parms DebugSpawnConsumables_Health_Parms;

	this->ProcessEvent ( pFnDebugSpawnConsumables_Health, &DebugSpawnConsumables_Health_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugSpawnConsumables_Energy
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugSpawnConsumables_Energy ( )
{
	static UFunction* pFnDebugSpawnConsumables_Energy = NULL;

	if ( ! pFnDebugSpawnConsumables_Energy )
		pFnDebugSpawnConsumables_Energy = (UFunction*) UObject::GObjObjects()->Data[ 73471 ];

	UNetherCheatManager_execDebugSpawnConsumables_Energy_Parms DebugSpawnConsumables_Energy_Parms;

	this->ProcessEvent ( pFnDebugSpawnConsumables_Energy, &DebugSpawnConsumables_Energy_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugSpawnBackpacks
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugSpawnBackpacks ( )
{
	static UFunction* pFnDebugSpawnBackpacks = NULL;

	if ( ! pFnDebugSpawnBackpacks )
		pFnDebugSpawnBackpacks = (UFunction*) UObject::GObjObjects()->Data[ 73468 ];

	UNetherCheatManager_execDebugSpawnBackpacks_Parms DebugSpawnBackpacks_Parms;

	this->ProcessEvent ( pFnDebugSpawnBackpacks, &DebugSpawnBackpacks_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugDropBackpack
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugDropBackpack ( )
{
	static UFunction* pFnDebugDropBackpack = NULL;

	if ( ! pFnDebugDropBackpack )
		pFnDebugDropBackpack = (UFunction*) UObject::GObjObjects()->Data[ 73465 ];

	UNetherCheatManager_execDebugDropBackpack_Parms DebugDropBackpack_Parms;

	this->ProcessEvent ( pFnDebugDropBackpack, &DebugDropBackpack_Parms, NULL );
};

// Function NetherGame.NetherCheatManager.DebugDropWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherCheatManager::DebugDropWeapon ( )
{
	static UFunction* pFnDebugDropWeapon = NULL;

	if ( ! pFnDebugDropWeapon )
		pFnDebugDropWeapon = (UFunction*) UObject::GObjObjects()->Data[ 73463 ];

	UNetherCheatManager_execDebugDropWeapon_Parms DebugDropWeapon_Parms;

	this->ProcessEvent ( pFnDebugDropWeapon, &DebugDropWeapon_Parms, NULL );
};

// Function NetherGame.NHealthConsumable.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANHealthConsumable::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 79123 ];

	ANHealthConsumable_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NHealthConsumable.IsQuickSlotable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANHealthConsumable::IsQuickSlotable ( )
{
	static UFunction* pFnIsQuickSlotable = NULL;

	if ( ! pFnIsQuickSlotable )
		pFnIsQuickSlotable = (UFunction*) UObject::GObjObjects()->Data[ 79121 ];

	ANHealthConsumable_execIsQuickSlotable_Parms IsQuickSlotable_Parms;

	this->ProcessEvent ( pFnIsQuickSlotable, &IsQuickSlotable_Parms, NULL );

	return IsQuickSlotable_Parms.ReturnValue;
};

// Function NetherGame.NHealthConsumable.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANHealthConsumable::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 79119 ];

	ANHealthConsumable_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NHealthConsumable.ConsumeItem
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Consumer                       ( CPF_Parm )

bool ANHealthConsumable::ConsumeItem ( class APawn* Consumer )
{
	static UFunction* pFnConsumeItem = NULL;

	if ( ! pFnConsumeItem )
		pFnConsumeItem = (UFunction*) UObject::GObjObjects()->Data[ 79115 ];

	ANHealthConsumable_execConsumeItem_Parms ConsumeItem_Parms;
	ConsumeItem_Parms.Consumer = Consumer;

	this->ProcessEvent ( pFnConsumeItem, &ConsumeItem_Parms, NULL );

	return ConsumeItem_Parms.ReturnValue;
};

// Function NetherGame.NFoodConsumable.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFoodConsumable::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 79135 ];

	ANFoodConsumable_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NFoodConsumable.ConsumeItem
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Consumer                       ( CPF_Parm )

bool ANFoodConsumable::ConsumeItem ( class APawn* Consumer )
{
	static UFunction* pFnConsumeItem = NULL;

	if ( ! pFnConsumeItem )
		pFnConsumeItem = (UFunction*) UObject::GObjObjects()->Data[ 79130 ];

	ANFoodConsumable_execConsumeItem_Parms ConsumeItem_Parms;
	ConsumeItem_Parms.Consumer = Consumer;

	this->ProcessEvent ( pFnConsumeItem, &ConsumeItem_Parms, NULL );

	return ConsumeItem_Parms.ReturnValue;
};

// Function NetherGame.NPackage.SaveBetweenSessions
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANPackage::SaveBetweenSessions ( )
{
	static UFunction* pFnSaveBetweenSessions = NULL;

	if ( ! pFnSaveBetweenSessions )
		pFnSaveBetweenSessions = (UFunction*) UObject::GObjObjects()->Data[ 79566 ];

	ANPackage_execSaveBetweenSessions_Parms SaveBetweenSessions_Parms;

	this->ProcessEvent ( pFnSaveBetweenSessions, &SaveBetweenSessions_Parms, NULL );

	return SaveBetweenSessions_Parms.ReturnValue;
};

// Function NetherGame.NPackage.CanBeStoredInGlobalInventory
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANPackage::CanBeStoredInGlobalInventory ( )
{
	static UFunction* pFnCanBeStoredInGlobalInventory = NULL;

	if ( ! pFnCanBeStoredInGlobalInventory )
		pFnCanBeStoredInGlobalInventory = (UFunction*) UObject::GObjObjects()->Data[ 79564 ];

	ANPackage_execCanBeStoredInGlobalInventory_Parms CanBeStoredInGlobalInventory_Parms;

	this->ProcessEvent ( pFnCanBeStoredInGlobalInventory, &CanBeStoredInGlobalInventory_Parms, NULL );

	return CanBeStoredInGlobalInventory_Parms.ReturnValue;
};

// Function NetherGame.NPackage.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ANPackage::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 79562 ];

	ANPackage_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function NetherGame.NPackage.GetInvClass
// [0x00022102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ANPackage::GetInvClass ( )
{
	static UFunction* pFnGetInvClass = NULL;

	if ( ! pFnGetInvClass )
		pFnGetInvClass = (UFunction*) UObject::GObjObjects()->Data[ 79560 ];

	ANPackage_execGetInvClass_Parms GetInvClass_Parms;

	this->ProcessEvent ( pFnGetInvClass, &GetInvClass_Parms, NULL );

	return GetInvClass_Parms.ReturnValue;
};

// Function NetherGame.NPackage.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 79558 ];

	ANPackage_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NPackage.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANPackage::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 79556 ];

	ANPackage_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NPackage.GetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage::GetSlotNumber ( )
{
	static UFunction* pFnGetSlotNumber = NULL;

	if ( ! pFnGetSlotNumber )
		pFnGetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 79554 ];

	ANPackage_execGetSlotNumber_Parms GetSlotNumber_Parms;

	this->ProcessEvent ( pFnGetSlotNumber, &GetSlotNumber_Parms, NULL );

	return GetSlotNumber_Parms.ReturnValue;
};

// Function NetherGame.NPackage.GetInventoryCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage::GetInventoryCount ( )
{
	static UFunction* pFnGetInventoryCount = NULL;

	if ( ! pFnGetInventoryCount )
		pFnGetInventoryCount = (UFunction*) UObject::GObjObjects()->Data[ 79552 ];

	ANPackage_execGetInventoryCount_Parms GetInventoryCount_Parms;

	this->ProcessEvent ( pFnGetInventoryCount, &GetInventoryCount_Parms, NULL );

	return GetInventoryCount_Parms.ReturnValue;
};

// Function NetherGame.NPackage.GetDefaultInventoryCount
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage::GetDefaultInventoryCount ( )
{
	static UFunction* pFnGetDefaultInventoryCount = NULL;

	if ( ! pFnGetDefaultInventoryCount )
		pFnGetDefaultInventoryCount = (UFunction*) UObject::GObjObjects()->Data[ 79550 ];

	ANPackage_execGetDefaultInventoryCount_Parms GetDefaultInventoryCount_Parms;

	this->ProcessEvent ( pFnGetDefaultInventoryCount, &GetDefaultInventoryCount_Parms, NULL );

	return GetDefaultInventoryCount_Parms.ReturnValue;
};

// Function NetherGame.NPackage.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79548 ];

	ANPackage_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage.GetWeight
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANPackage::GetWeight ( )
{
	static UFunction* pFnGetWeight = NULL;

	if ( ! pFnGetWeight )
		pFnGetWeight = (UFunction*) UObject::GObjObjects()->Data[ 79546 ];

	ANPackage_execGetWeight_Parms GetWeight_Parms;

	this->ProcessEvent ( pFnGetWeight, &GetWeight_Parms, NULL );

	return GetWeight_Parms.ReturnValue;
};

// Function NetherGame.NPackage.GetInventoryDesc
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANPackage::GetInventoryDesc ( )
{
	static UFunction* pFnGetInventoryDesc = NULL;

	if ( ! pFnGetInventoryDesc )
		pFnGetInventoryDesc = (UFunction*) UObject::GObjObjects()->Data[ 79544 ];

	ANPackage_execGetInventoryDesc_Parms GetInventoryDesc_Parms;

	this->ProcessEvent ( pFnGetInventoryDesc, &GetInventoryDesc_Parms, NULL );

	return GetInventoryDesc_Parms.ReturnValue;
};

// Function NetherGame.NPackage.GetInventoryName
// [0x00022102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANPackage::GetInventoryName ( )
{
	static UFunction* pFnGetInventoryName = NULL;

	if ( ! pFnGetInventoryName )
		pFnGetInventoryName = (UFunction*) UObject::GObjObjects()->Data[ 79542 ];

	ANPackage_execGetInventoryName_Parms GetInventoryName_Parms;

	this->ProcessEvent ( pFnGetInventoryName, &GetInventoryName_Parms, NULL );

	return GetInventoryName_Parms.ReturnValue;
};

// Function NetherGame.NPackage.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool ANPackage::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 79538 ];

	ANPackage_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function NetherGame.NWings.GetInventoryCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWings::GetInventoryCount ( )
{
	static UFunction* pFnGetInventoryCount = NULL;

	if ( ! pFnGetInventoryCount )
		pFnGetInventoryCount = (UFunction*) UObject::GObjObjects()->Data[ 82179 ];

	ANWings_execGetInventoryCount_Parms GetInventoryCount_Parms;

	this->ProcessEvent ( pFnGetInventoryCount, &GetInventoryCount_Parms, NULL );

	return GetInventoryCount_Parms.ReturnValue;
};

// Function NetherGame.NWings.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void ANWings::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 82178 ];

	ANWings_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function NetherGame.NWings.ConsumeItem
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Consumer                       ( CPF_Parm )

bool ANWings::ConsumeItem ( class APawn* Consumer )
{
	static UFunction* pFnConsumeItem = NULL;

	if ( ! pFnConsumeItem )
		pFnConsumeItem = (UFunction*) UObject::GObjObjects()->Data[ 82175 ];

	ANWings_execConsumeItem_Parms ConsumeItem_Parms;
	ConsumeItem_Parms.Consumer = Consumer;

	this->ProcessEvent ( pFnConsumeItem, &ConsumeItem_Parms, NULL );

	return ConsumeItem_Parms.ReturnValue;
};

// Function NetherGame.NWings.SetWingsActive
// [0x00020002] 
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void ANWings::SetWingsActive ( unsigned long bActive )
{
	static UFunction* pFnSetWingsActive = NULL;

	if ( ! pFnSetWingsActive )
		pFnSetWingsActive = (UFunction*) UObject::GObjObjects()->Data[ 82173 ];

	ANWings_execSetWingsActive_Parms SetWingsActive_Parms;
	SetWingsActive_Parms.bActive = bActive;

	this->ProcessEvent ( pFnSetWingsActive, &SetWingsActive_Parms, NULL );
};

// Function NetherGame.NWings.IsQuickSlotable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWings::IsQuickSlotable ( )
{
	static UFunction* pFnIsQuickSlotable = NULL;

	if ( ! pFnIsQuickSlotable )
		pFnIsQuickSlotable = (UFunction*) UObject::GObjObjects()->Data[ 82171 ];

	ANWings_execIsQuickSlotable_Parms IsQuickSlotable_Parms;

	this->ProcessEvent ( pFnIsQuickSlotable, &IsQuickSlotable_Parms, NULL );

	return IsQuickSlotable_Parms.ReturnValue;
};

// Function NetherGame.NWings.IsDroppable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANWings::IsDroppable ( )
{
	static UFunction* pFnIsDroppable = NULL;

	if ( ! pFnIsDroppable )
		pFnIsDroppable = (UFunction*) UObject::GObjObjects()->Data[ 82169 ];

	ANWings_execIsDroppable_Parms IsDroppable_Parms;

	this->ProcessEvent ( pFnIsDroppable, &IsDroppable_Parms, NULL );

	return IsDroppable_Parms.ReturnValue;
};

// Function NetherGame.NWings.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWings::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 82167 ];

	ANWings_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NWings.UpdateAttachment
// [0x00020102] 
// Parameters infos:

void ANWings::UpdateAttachment ( )
{
	static UFunction* pFnUpdateAttachment = NULL;

	if ( ! pFnUpdateAttachment )
		pFnUpdateAttachment = (UFunction*) UObject::GObjObjects()->Data[ 82165 ];

	ANWings_execUpdateAttachment_Parms UpdateAttachment_Parms;

	this->ProcessEvent ( pFnUpdateAttachment, &UpdateAttachment_Parms, NULL );
};

// Function NetherGame.NWings.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANWings::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 82163 ];

	ANWings_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NPickupFactory.EnablePickup
// [0x00020102] 
// Parameters infos:

void ANPickupFactory::EnablePickup ( )
{
	static UFunction* pFnEnablePickup = NULL;

	if ( ! pFnEnablePickup )
		pFnEnablePickup = (UFunction*) UObject::GObjObjects()->Data[ 79652 ];

	ANPickupFactory_execEnablePickup_Parms EnablePickup_Parms;

	this->ProcessEvent ( pFnEnablePickup, &EnablePickup_Parms, NULL );
};

// Function NetherGame.NPickupFactory.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ANPickupFactory::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 79650 ];

	ANPickupFactory_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function NetherGame.NPickupFactory.SetRecycleTimer
// [0x00020002] 
// Parameters infos:
// float                          InTimerDuration                ( CPF_Parm )

void ANPickupFactory::SetRecycleTimer ( float InTimerDuration )
{
	static UFunction* pFnSetRecycleTimer = NULL;

	if ( ! pFnSetRecycleTimer )
		pFnSetRecycleTimer = (UFunction*) UObject::GObjObjects()->Data[ 79648 ];

	ANPickupFactory_execSetRecycleTimer_Parms SetRecycleTimer_Parms;
	SetRecycleTimer_Parms.InTimerDuration = InTimerDuration;

	this->ProcessEvent ( pFnSetRecycleTimer, &SetRecycleTimer_Parms, NULL );
};

// Function NetherGame.NPickupFactory.InitializeRecycle
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasPickedUp                   ( CPF_OptionalParm | CPF_Parm )

void ANPickupFactory::InitializeRecycle ( unsigned long bWasPickedUp )
{
	static UFunction* pFnInitializeRecycle = NULL;

	if ( ! pFnInitializeRecycle )
		pFnInitializeRecycle = (UFunction*) UObject::GObjObjects()->Data[ 78896 ];

	ANPickupFactory_execInitializeRecycle_Parms InitializeRecycle_Parms;
	InitializeRecycle_Parms.bWasPickedUp = bWasPickedUp;

	this->ProcessEvent ( pFnInitializeRecycle, &InitializeRecycle_Parms, NULL );
};

// Function NetherGame.NPickupFactory.IsInUse
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANPickupFactory::IsInUse ( )
{
	static UFunction* pFnIsInUse = NULL;

	if ( ! pFnIsInUse )
		pFnIsInUse = (UFunction*) UObject::GObjObjects()->Data[ 75488 ];

	ANPickupFactory_execIsInUse_Parms IsInUse_Parms;

	this->ProcessEvent ( pFnIsInUse, &IsInUse_Parms, NULL );

	return IsInUse_Parms.ReturnValue;
};

// Function NetherGame.NPickupFactory.ReleaseFromUse
// [0x00020002] 
// Parameters infos:

void ANPickupFactory::ReleaseFromUse ( )
{
	static UFunction* pFnReleaseFromUse = NULL;

	if ( ! pFnReleaseFromUse )
		pFnReleaseFromUse = (UFunction*) UObject::GObjObjects()->Data[ 79643 ];

	ANPickupFactory_execReleaseFromUse_Parms ReleaseFromUse_Parms;

	this->ProcessEvent ( pFnReleaseFromUse, &ReleaseFromUse_Parms, NULL );
};

// Function NetherGame.NPickupFactory.MarkForUse
// [0x00020002] 
// Parameters infos:

void ANPickupFactory::MarkForUse ( )
{
	static UFunction* pFnMarkForUse = NULL;

	if ( ! pFnMarkForUse )
		pFnMarkForUse = (UFunction*) UObject::GObjObjects()->Data[ 79642 ];

	ANPickupFactory_execMarkForUse_Parms MarkForUse_Parms;

	this->ProcessEvent ( pFnMarkForUse, &MarkForUse_Parms, NULL );
};

// Function NetherGame.NPickupFactory.GetWeight
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPickupFactory::GetWeight ( )
{
	static UFunction* pFnGetWeight = NULL;

	if ( ! pFnGetWeight )
		pFnGetWeight = (UFunction*) UObject::GObjObjects()->Data[ 75684 ];

	ANPickupFactory_execGetWeight_Parms GetWeight_Parms;

	this->ProcessEvent ( pFnGetWeight, &GetWeight_Parms, NULL );

	return GetWeight_Parms.ReturnValue;
};

// Function NetherGame.NPickupFactory.SpawnCopyFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   Recipient                      ( CPF_Parm )

void ANPickupFactory::SpawnCopyFor ( class APawn* Recipient )
{
	static UFunction* pFnSpawnCopyFor = NULL;

	if ( ! pFnSpawnCopyFor )
		pFnSpawnCopyFor = (UFunction*) UObject::GObjObjects()->Data[ 79639 ];

	ANPickupFactory_execSpawnCopyFor_Parms SpawnCopyFor_Parms;
	SpawnCopyFor_Parms.Recipient = Recipient;

	this->ProcessEvent ( pFnSpawnCopyFor, &SpawnCopyFor_Parms, NULL );
};

// Function NetherGame.NPickupFactory.InitializeContents
// [0x010201C2] 
// Parameters infos:
// int                            ServerRandom                   ( CPF_Parm )
// float                          ServerWeight                   ( CPF_Parm )

void ANPickupFactory::InitializeContents ( int ServerRandom, float ServerWeight )
{
	static UFunction* pFnInitializeContents = NULL;

	if ( ! pFnInitializeContents )
		pFnInitializeContents = (UFunction*) UObject::GObjObjects()->Data[ 79636 ];

	ANPickupFactory_execInitializeContents_Parms InitializeContents_Parms;
	InitializeContents_Parms.ServerRandom = ServerRandom;
	InitializeContents_Parms.ServerWeight = ServerWeight;

	this->ProcessEvent ( pFnInitializeContents, &InitializeContents_Parms, NULL );
};

// Function NetherGame.NPickupFactory.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANPickupFactory::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79634 ];

	ANPickupFactory_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NPickupFactory.PawnHasSight
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANPickupFactory::PawnHasSight ( class APawn* Other )
{
	static UFunction* pFnPawnHasSight = NULL;

	if ( ! pFnPawnHasSight )
		pFnPawnHasSight = (UFunction*) UObject::GObjObjects()->Data[ 75490 ];

	ANPickupFactory_execPawnHasSight_Parms PawnHasSight_Parms;
	PawnHasSight_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnHasSight, &PawnHasSight_Parms, NULL );

	return PawnHasSight_Parms.ReturnValue;
};

// Function NetherGame.NPickupFactory.RefreshPickupFinderDebug
// [0x00020102] 
// Parameters infos:

void ANPickupFactory::RefreshPickupFinderDebug ( )
{
	static UFunction* pFnRefreshPickupFinderDebug = NULL;

	if ( ! pFnRefreshPickupFinderDebug )
		pFnRefreshPickupFinderDebug = (UFunction*) UObject::GObjObjects()->Data[ 79627 ];

	ANPickupFactory_execRefreshPickupFinderDebug_Parms RefreshPickupFinderDebug_Parms;

	this->ProcessEvent ( pFnRefreshPickupFinderDebug, &RefreshPickupFinderDebug_Parms, NULL );
};

// Function NetherGame.NPickupFactory.InitPickupMeshEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANPickupFactory::eventInitPickupMeshEffects ( )
{
	static UFunction* pFnInitPickupMeshEffects = NULL;

	if ( ! pFnInitPickupMeshEffects )
		pFnInitPickupMeshEffects = (UFunction*) UObject::GObjObjects()->Data[ 79626 ];

	ANPickupFactory_eventInitPickupMeshEffects_Parms InitPickupMeshEffects_Parms;

	this->ProcessEvent ( pFnInitPickupMeshEffects, &InitPickupMeshEffects_Parms, NULL );
};

// Function NetherGame.NPickupFactory.OnPickupRecycled
// [0x00120000] 
// Parameters infos:
// class ANPickupFactory*         NetherPickupFactory            ( CPF_Parm )
// unsigned long                  bWasPickedUp                   ( CPF_Parm )

void ANPickupFactory::OnPickupRecycled ( class ANPickupFactory* NetherPickupFactory, unsigned long bWasPickedUp )
{
	static UFunction* pFnOnPickupRecycled = NULL;

	if ( ! pFnOnPickupRecycled )
		pFnOnPickupRecycled = (UFunction*) UObject::GObjObjects()->Data[ 79620 ];

	ANPickupFactory_execOnPickupRecycled_Parms OnPickupRecycled_Parms;
	OnPickupRecycled_Parms.NetherPickupFactory = NetherPickupFactory;
	OnPickupRecycled_Parms.bWasPickedUp = bWasPickedUp;

	this->ProcessEvent ( pFnOnPickupRecycled, &OnPickupRecycled_Parms, NULL );
};

// Function NetherGame.NHealthConsumable_DoctorsBag.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANHealthConsumable_DoctorsBag::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79170 ];

	ANHealthConsumable_DoctorsBag_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NHealthConsumable_FirstAidKit.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANHealthConsumable_FirstAidKit::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79175 ];

	ANHealthConsumable_FirstAidKit_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NHealthConsumable_PainPills.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANHealthConsumable_PainPills::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79180 ];

	ANHealthConsumable_PainPills_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NHealthConsumable_Bandages.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANHealthConsumable_Bandages::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79165 ];

	ANHealthConsumable_Bandages_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NFoodConsumable_EnergyBar.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFoodConsumable_EnergyBar::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79144 ];

	ANFoodConsumable_EnergyBar_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NFoodConsumable_EnergyDrink.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFoodConsumable_EnergyDrink::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79148 ];

	ANFoodConsumable_EnergyDrink_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NFoodConsumable_Rations.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFoodConsumable_Rations::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79153 ];

	ANFoodConsumable_Rations_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_WTOToSZ.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_WTOToSZ::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79616 ];

	ANPackage_WTOToSZ_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_WTOToRTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_WTOToRTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79612 ];

	ANPackage_WTOToRTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_WTOToMTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_WTOToMTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79608 ];

	ANPackage_WTOToMTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_SZToWTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_SZToWTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79604 ];

	ANPackage_SZToWTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_SZToRTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_SZToRTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79600 ];

	ANPackage_SZToRTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_RTOToWTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_RTOToWTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79592 ];

	ANPackage_RTOToWTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_RTOToSZ.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_RTOToSZ::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79588 ];

	ANPackage_RTOToSZ_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_RTOToMTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_RTOToMTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79584 ];

	ANPackage_RTOToMTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_MTOToWTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_MTOToWTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79580 ];

	ANPackage_MTOToWTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_MTOToSZ.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_MTOToSZ::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79576 ];

	ANPackage_MTOToSZ_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_MTOToRTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_MTOToRTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79572 ];

	ANPackage_MTOToRTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NPackage_SZToMTO.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPackage_SZToMTO::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79596 ];

	ANPackage_SZToMTO_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NetherPopupUI.RefreshButtonLayout
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UNetherPopupUI::RefreshButtonLayout ( )
{
	static UFunction* pFnRefreshButtonLayout = NULL;

	if ( ! pFnRefreshButtonLayout )
		pFnRefreshButtonLayout = (UFunction*) UObject::GObjObjects()->Data[ 73617 ];

	UNetherPopupUI_execRefreshButtonLayout_Parms RefreshButtonLayout_Parms;

	this->ProcessEvent ( pFnRefreshButtonLayout, &RefreshButtonLayout_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.ResizeBorder
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UNetherPopupUI::ResizeBorder ( float NewWidth, float NewHeight )
{
	static UFunction* pFnResizeBorder = NULL;

	if ( ! pFnResizeBorder )
		pFnResizeBorder = (UFunction*) UObject::GObjObjects()->Data[ 73618 ];

	UNetherPopupUI_execResizeBorder_Parms ResizeBorder_Parms;
	ResizeBorder_Parms.NewWidth = NewWidth;
	ResizeBorder_Parms.NewHeight = NewHeight;

	this->ProcessEvent ( pFnResizeBorder, &ResizeBorder_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.SetPosition
// [0x00020002] 
// Parameters infos:
// float                          NewPosX                        ( CPF_Parm )
// float                          NewPosY                        ( CPF_Parm )

void UNetherPopupUI::SetPosition ( float NewPosX, float NewPosY )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 73628 ];

	UNetherPopupUI_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewPosX = NewPosX;
	SetPosition_Parms.NewPosY = NewPosY;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.AddButtonWithParams
// [0x00024002] 
// Parameters infos:
// struct FString                 ButtonLabel                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         BA                             ( CPF_Parm | CPF_NeedCtorLink )
// class UObject*                 Params                         ( CPF_OptionalParm | CPF_Parm )

void UNetherPopupUI::AddButtonWithParams ( struct FString ButtonLabel, struct FScriptDelegate BA, class UObject* Params )
{
	static UFunction* pFnAddButtonWithParams = NULL;

	if ( ! pFnAddButtonWithParams )
		pFnAddButtonWithParams = (UFunction*) UObject::GObjObjects()->Data[ 73623 ];

	UNetherPopupUI_execAddButtonWithParams_Parms AddButtonWithParams_Parms;
	memcpy ( &AddButtonWithParams_Parms.ButtonLabel, &ButtonLabel, 0x10 );
	memcpy ( &AddButtonWithParams_Parms.BA, &BA, 0x10 );
	AddButtonWithParams_Parms.Params = Params;

	this->ProcessEvent ( pFnAddButtonWithParams, &AddButtonWithParams_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.AddButton
// [0x00020002] 
// Parameters infos:
// struct FString                 ButtonLabel                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         BA                             ( CPF_Parm | CPF_NeedCtorLink )

void UNetherPopupUI::AddButton ( struct FString ButtonLabel, struct FScriptDelegate BA )
{
	static UFunction* pFnAddButton = NULL;

	if ( ! pFnAddButton )
		pFnAddButton = (UFunction*) UObject::GObjObjects()->Data[ 73619 ];

	UNetherPopupUI_execAddButton_Parms AddButton_Parms;
	memcpy ( &AddButton_Parms.ButtonLabel, &ButtonLabel, 0x10 );
	memcpy ( &AddButton_Parms.BA, &BA, 0x10 );

	this->ProcessEvent ( pFnAddButton, &AddButton_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.RefreshLayout
// [0x00820002] 
// Parameters infos:

void UNetherPopupUI::RefreshLayout ( )
{
	static UFunction* pFnRefreshLayout = NULL;

	if ( ! pFnRefreshLayout )
		pFnRefreshLayout = (UFunction*) UObject::GObjObjects()->Data[ 73613 ];

	UNetherPopupUI_execRefreshLayout_Parms RefreshLayout_Parms;

	this->ProcessEvent ( pFnRefreshLayout, &RefreshLayout_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.SetPopupID
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewId                          ( CPF_Parm )

void UNetherPopupUI::SetPopupID ( unsigned char NewId )
{
	static UFunction* pFnSetPopupID = NULL;

	if ( ! pFnSetPopupID )
		pFnSetPopupID = (UFunction*) UObject::GObjObjects()->Data[ 73611 ];

	UNetherPopupUI_execSetPopupID_Parms SetPopupID_Parms;
	SetPopupID_Parms.NewId = NewId;

	this->ProcessEvent ( pFnSetPopupID, &SetPopupID_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.GetID
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UNetherPopupUI::GetID ( )
{
	static UFunction* pFnGetID = NULL;

	if ( ! pFnGetID )
		pFnGetID = (UFunction*) UObject::GObjObjects()->Data[ 73609 ];

	UNetherPopupUI_execGetID_Parms GetID_Parms;

	this->ProcessEvent ( pFnGetID, &GetID_Parms, NULL );

	return GetID_Parms.ReturnValue;
};

// Function NetherGame.NetherPopupUI.SetWidth
// [0x00020002] 
// Parameters infos:
// float                          NewWidth                       ( CPF_Parm )

void UNetherPopupUI::SetWidth ( float NewWidth )
{
	static UFunction* pFnSetWidth = NULL;

	if ( ! pFnSetWidth )
		pFnSetWidth = (UFunction*) UObject::GObjObjects()->Data[ 73607 ];

	UNetherPopupUI_execSetWidth_Parms SetWidth_Parms;
	SetWidth_Parms.NewWidth = NewWidth;

	this->ProcessEvent ( pFnSetWidth, &SetWidth_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.SetBodyText
// [0x00020002] 
// Parameters infos:
// struct FString                 BodyText                       ( CPF_Parm | CPF_NeedCtorLink )

void UNetherPopupUI::SetBodyText ( struct FString BodyText )
{
	static UFunction* pFnSetBodyText = NULL;

	if ( ! pFnSetBodyText )
		pFnSetBodyText = (UFunction*) UObject::GObjObjects()->Data[ 73605 ];

	UNetherPopupUI_execSetBodyText_Parms SetBodyText_Parms;
	memcpy ( &SetBodyText_Parms.BodyText, &BodyText, 0x10 );

	this->ProcessEvent ( pFnSetBodyText, &SetBodyText_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.SetHeaderText
// [0x00020002] 
// Parameters infos:
// struct FString                 HeaderText                     ( CPF_Parm | CPF_NeedCtorLink )

void UNetherPopupUI::SetHeaderText ( struct FString HeaderText )
{
	static UFunction* pFnSetHeaderText = NULL;

	if ( ! pFnSetHeaderText )
		pFnSetHeaderText = (UFunction*) UObject::GObjObjects()->Data[ 73603 ];

	UNetherPopupUI_execSetHeaderText_Parms SetHeaderText_Parms;
	memcpy ( &SetHeaderText_Parms.HeaderText, &HeaderText, 0x10 );

	this->ProcessEvent ( pFnSetHeaderText, &SetHeaderText_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherPopupUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 73602 ];

	UNetherPopupUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.LeftMouseDownCallBack
// [0x00020002] 
// Parameters infos:
// class UIGFxClickable*          ClickableElement               ( CPF_Parm )

void UNetherPopupUI::LeftMouseDownCallBack ( class UIGFxClickable* ClickableElement )
{
	static UFunction* pFnLeftMouseDownCallBack = NULL;

	if ( ! pFnLeftMouseDownCallBack )
		pFnLeftMouseDownCallBack = (UFunction*) UObject::GObjObjects()->Data[ 73597 ];

	UNetherPopupUI_execLeftMouseDownCallBack_Parms LeftMouseDownCallBack_Parms;
	LeftMouseDownCallBack_Parms.ClickableElement = ClickableElement;

	this->ProcessEvent ( pFnLeftMouseDownCallBack, &LeftMouseDownCallBack_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UNetherPopupUI::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 73594 ];

	UNetherPopupUI_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherPopupUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 73593 ];

	UNetherPopupUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.ClosePopup
// [0x00020002] 
// Parameters infos:

void UNetherPopupUI::ClosePopup ( )
{
	static UFunction* pFnClosePopup = NULL;

	if ( ! pFnClosePopup )
		pFnClosePopup = (UFunction*) UObject::GObjObjects()->Data[ 73592 ];

	UNetherPopupUI_execClosePopup_Parms ClosePopup_Parms;

	this->ProcessEvent ( pFnClosePopup, &ClosePopup_Parms, NULL );
};

// Function NetherGame.NetherPopupUI.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherPopupUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 73590 ];

	UNetherPopupUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NSeqEvent_SyncDayNightCycle.Activated
// [0x00020002] 
// Parameters infos:

void UNSeqEvent_SyncDayNightCycle::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 80484 ];

	UNSeqEvent_SyncDayNightCycle_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function NetherGame.NetherFamilyInfo.GetFirstPersonArmsMaterial
// [0x00022002] 
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TeamNum                        ( CPF_Parm )

class UMaterialInterface* UNetherFamilyInfo::GetFirstPersonArmsMaterial ( int TeamNum )
{
	static UFunction* pFnGetFirstPersonArmsMaterial = NULL;

	if ( ! pFnGetFirstPersonArmsMaterial )
		pFnGetFirstPersonArmsMaterial = (UFunction*) UObject::GObjObjects()->Data[ 73701 ];

	UNetherFamilyInfo_execGetFirstPersonArmsMaterial_Parms GetFirstPersonArmsMaterial_Parms;
	GetFirstPersonArmsMaterial_Parms.TeamNum = TeamNum;

	this->ProcessEvent ( pFnGetFirstPersonArmsMaterial, &GetFirstPersonArmsMaterial_Parms, NULL );

	return GetFirstPersonArmsMaterial_Parms.ReturnValue;
};

// Function NetherGame.NetherFamilyInfo.GetFirstPersonArms
// [0x00022002] 
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USkeletalMesh* UNetherFamilyInfo::GetFirstPersonArms ( )
{
	static UFunction* pFnGetFirstPersonArms = NULL;

	if ( ! pFnGetFirstPersonArms )
		pFnGetFirstPersonArms = (UFunction*) UObject::GObjObjects()->Data[ 73699 ];

	UNetherFamilyInfo_execGetFirstPersonArms_Parms GetFirstPersonArms_Parms;

	this->ProcessEvent ( pFnGetFirstPersonArms, &GetFirstPersonArms_Parms, NULL );

	return GetFirstPersonArms_Parms.ReturnValue;
};

// Function NetherGame.NetherFrontendPlayerController.ClientLoggedIn
// [0x010201C2] 
// Parameters infos:

void ANetherFrontendPlayerController::ClientLoggedIn ( )
{
	static UFunction* pFnClientLoggedIn = NULL;

	if ( ! pFnClientLoggedIn )
		pFnClientLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 73735 ];

	ANetherFrontendPlayerController_execClientLoggedIn_Parms ClientLoggedIn_Parms;

	this->ProcessEvent ( pFnClientLoggedIn, &ClientLoggedIn_Parms, NULL );
};

// Function NetherGame.NetherPlayerReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANetherPlayerReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 78089 ];

	ANetherPlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NetherPlayerReplicationInfo.SeamlessTravelTo
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  NewPRI                         ( CPF_Parm )

void ANetherPlayerReplicationInfo::SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = (UFunction*) UObject::GObjObjects()->Data[ 78086 ];

	ANetherPlayerReplicationInfo_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPRI = NewPRI;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function NetherGame.NetherPlayerReplicationInfo.CopyProperties
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void ANetherPlayerReplicationInfo::CopyProperties ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 78083 ];

	ANetherPlayerReplicationInfo_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.PRI = PRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function NetherGame.NetherPlayerReplicationInfo.GetNFIClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ANetherPlayerReplicationInfo::GetNFIClass ( )
{
	static UFunction* pFnGetNFIClass = NULL;

	if ( ! pFnGetNFIClass )
		pFnGetNFIClass = (UFunction*) UObject::GObjObjects()->Data[ 77780 ];

	ANetherPlayerReplicationInfo_execGetNFIClass_Parms GetNFIClass_Parms;

	this->ProcessEvent ( pFnGetNFIClass, &GetNFIClass_Parms, NULL );

	return GetNFIClass_Parms.ReturnValue;
};

// Function NetherGame.NetherServerDocument_Server.UpdateDocument
// [0x00020002] 
// Parameters infos:

void ANetherServerDocument_Server::UpdateDocument ( )
{
	static UFunction* pFnUpdateDocument = NULL;

	if ( ! pFnUpdateDocument )
		pFnUpdateDocument = (UFunction*) UObject::GObjObjects()->Data[ 78178 ];

	ANetherServerDocument_Server_execUpdateDocument_Parms UpdateDocument_Parms;

	this->ProcessEvent ( pFnUpdateDocument, &UpdateDocument_Parms, NULL );
};

// Function NetherGame.NetherServerDocument_Server.OnDocumentUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerDocument_Server::eventOnDocumentUpdate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 78168 ];

	ANetherServerDocument_Server_eventOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NetherServerDocument_Server.OnDocumentCreate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerDocument_Server::eventOnDocumentCreate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentCreate = NULL;

	if ( ! pFnOnDocumentCreate )
		pFnOnDocumentCreate = (UFunction*) UObject::GObjObjects()->Data[ 78166 ];

	ANetherServerDocument_Server_eventOnDocumentCreate_Parms OnDocumentCreate_Parms;
	OnDocumentCreate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentCreate, &OnDocumentCreate_Parms, NULL );
};

// Function NetherGame.NetherServerDocument_Server.GetDocumentTags
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FString >       DocumentTags                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ANetherServerDocument_Server::eventGetDocumentTags ( TArray< struct FString >* DocumentTags )
{
	static UFunction* pFnGetDocumentTags = NULL;

	if ( ! pFnGetDocumentTags )
		pFnGetDocumentTags = (UFunction*) UObject::GObjObjects()->Data[ 78161 ];

	ANetherServerDocument_Server_eventGetDocumentTags_Parms GetDocumentTags_Parms;

	this->ProcessEvent ( pFnGetDocumentTags, &GetDocumentTags_Parms, NULL );

	if ( DocumentTags )
		memcpy ( DocumentTags, &GetDocumentTags_Parms.DocumentTags, 0x10 );
};

// Function NetherGame.NetherServerDocument_Server.GetDocumentName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherServerDocument_Server::eventGetDocumentName ( )
{
	static UFunction* pFnGetDocumentName = NULL;

	if ( ! pFnGetDocumentName )
		pFnGetDocumentName = (UFunction*) UObject::GObjObjects()->Data[ 78157 ];

	ANetherServerDocument_Server_eventGetDocumentName_Parms GetDocumentName_Parms;

	this->ProcessEvent ( pFnGetDocumentName, &GetDocumentName_Parms, NULL );

	return GetDocumentName_Parms.ReturnValue;
};

// Function NetherGame.NetherServerDocument_Store.SafeToSave
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherServerDocument_Store::SafeToSave ( )
{
	static UFunction* pFnSafeToSave = NULL;

	if ( ! pFnSafeToSave )
		pFnSafeToSave = (UFunction*) UObject::GObjObjects()->Data[ 78381 ];

	ANetherServerDocument_Store_execSafeToSave_Parms SafeToSave_Parms;

	this->ProcessEvent ( pFnSafeToSave, &SafeToSave_Parms, NULL );

	return SafeToSave_Parms.ReturnValue;
};

// Function NetherGame.NetherObjectiveManager.GetObjectives
// [0x00420002] 
// Parameters infos:
// TArray< class ANetherObjective* > OutObjectives                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ANetherObjectiveManager::GetObjectives ( TArray< class ANetherObjective* >* OutObjectives )
{
	static UFunction* pFnGetObjectives = NULL;

	if ( ! pFnGetObjectives )
		pFnGetObjectives = (UFunction*) UObject::GObjObjects()->Data[ 77292 ];

	ANetherObjectiveManager_execGetObjectives_Parms GetObjectives_Parms;

	this->ProcessEvent ( pFnGetObjectives, &GetObjectives_Parms, NULL );

	if ( OutObjectives )
		memcpy ( OutObjectives, &GetObjectives_Parms.OutObjectives, 0x10 );
};

// Function NetherGame.NetherObjectiveManager.AddObjective
// [0x00020002] 
// Parameters infos:
// class ANetherObjective*        NObjective                     ( CPF_Parm )

void ANetherObjectiveManager::AddObjective ( class ANetherObjective* NObjective )
{
	static UFunction* pFnAddObjective = NULL;

	if ( ! pFnAddObjective )
		pFnAddObjective = (UFunction*) UObject::GObjObjects()->Data[ 77290 ];

	ANetherObjectiveManager_execAddObjective_Parms AddObjective_Parms;
	AddObjective_Parms.NObjective = NObjective;

	this->ProcessEvent ( pFnAddObjective, &AddObjective_Parms, NULL );
};

// Function NetherGame.NetherObjectiveManager.AmIAllowedToSpawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANetherTerritoryVolume*  VolumeToCheck                  ( CPF_Parm )

bool ANetherObjectiveManager::AmIAllowedToSpawn ( class ANetherTerritoryVolume* VolumeToCheck )
{
	static UFunction* pFnAmIAllowedToSpawn = NULL;

	if ( ! pFnAmIAllowedToSpawn )
		pFnAmIAllowedToSpawn = (UFunction*) UObject::GObjObjects()->Data[ 77285 ];

	ANetherObjectiveManager_execAmIAllowedToSpawn_Parms AmIAllowedToSpawn_Parms;
	AmIAllowedToSpawn_Parms.VolumeToCheck = VolumeToCheck;

	this->ProcessEvent ( pFnAmIAllowedToSpawn, &AmIAllowedToSpawn_Parms, NULL );

	return AmIAllowedToSpawn_Parms.ReturnValue;
};

// Function NetherGame.NetherObjectiveManager.InitializeObjectives
// [0x00020002] 
// Parameters infos:

void ANetherObjectiveManager::InitializeObjectives ( )
{
	static UFunction* pFnInitializeObjectives = NULL;

	if ( ! pFnInitializeObjectives )
		pFnInitializeObjectives = (UFunction*) UObject::GObjObjects()->Data[ 77281 ];

	ANetherObjectiveManager_execInitializeObjectives_Parms InitializeObjectives_Parms;

	this->ProcessEvent ( pFnInitializeObjectives, &InitializeObjectives_Parms, NULL );
};

// Function NetherGame.NetherObjectiveManager.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANetherObjectiveManager::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 77280 ];

	ANetherObjectiveManager_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function NetherGame.NetherObjectiveManager.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ANetherObjectiveManager::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 77279 ];

	ANetherObjectiveManager_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NetherPlayerStart.GetNearbyPlayerCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerStart::GetNearbyPlayerCount ( )
{
	static UFunction* pFnGetNearbyPlayerCount = NULL;

	if ( ! pFnGetNearbyPlayerCount )
		pFnGetNearbyPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 73847 ];

	ANetherPlayerStart_execGetNearbyPlayerCount_Parms GetNearbyPlayerCount_Parms;

	this->ProcessEvent ( pFnGetNearbyPlayerCount, &GetNearbyPlayerCount_Parms, NULL );

	return GetNearbyPlayerCount_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerStart.GetNearbyEnemyCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANetherPlayerStart::GetNearbyEnemyCount ( )
{
	static UFunction* pFnGetNearbyEnemyCount = NULL;

	if ( ! pFnGetNearbyEnemyCount )
		pFnGetNearbyEnemyCount = (UFunction*) UObject::GObjObjects()->Data[ 73849 ];

	ANetherPlayerStart_execGetNearbyEnemyCount_Parms GetNearbyEnemyCount_Parms;

	this->ProcessEvent ( pFnGetNearbyEnemyCount, &GetNearbyEnemyCount_Parms, NULL );

	return GetNearbyEnemyCount_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.GetCurrentMovie
// [0x00020002] 
// Parameters infos:
// class UNetherMoviePlayer*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UNetherMoviePlayer* UNetherMenuOverlayUI::GetCurrentMovie ( )
{
	static UFunction* pFnGetCurrentMovie = NULL;

	if ( ! pFnGetCurrentMovie )
		pFnGetCurrentMovie = (UFunction*) UObject::GObjObjects()->Data[ 75421 ];

	UNetherMenuOverlayUI_execGetCurrentMovie_Parms GetCurrentMovie_Parms;

	this->ProcessEvent ( pFnGetCurrentMovie, &GetCurrentMovie_Parms, NULL );

	return GetCurrentMovie_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherMenuOverlayUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 76990 ];

	UNetherMenuOverlayUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.InitMenuButton
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxButton*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ButtonPath                     ( CPF_Parm | CPF_NeedCtorLink )

class UGFxButton* UNetherMenuOverlayUI::InitMenuButton ( struct FString ButtonPath )
{
	static UFunction* pFnInitMenuButton = NULL;

	if ( ! pFnInitMenuButton )
		pFnInitMenuButton = (UFunction*) UObject::GObjObjects()->Data[ 76848 ];

	UNetherMenuOverlayUI_execInitMenuButton_Parms InitMenuButton_Parms;
	memcpy ( &InitMenuButton_Parms.ButtonPath, &ButtonPath, 0x10 );

	this->ProcessEvent ( pFnInitMenuButton, &InitMenuButton_Parms, NULL );

	return InitMenuButton_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.MouseWheel
// [0x00020002] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void UNetherMenuOverlayUI::MouseWheel ( int Delta )
{
	static UFunction* pFnMouseWheel = NULL;

	if ( ! pFnMouseWheel )
		pFnMouseWheel = (UFunction*) UObject::GObjObjects()->Data[ 76985 ];

	UNetherMenuOverlayUI_execMouseWheel_Parms MouseWheel_Parms;
	MouseWheel_Parms.Delta = Delta;

	this->ProcessEvent ( pFnMouseWheel, &MouseWheel_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.RightMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMenuOverlayUI::RightMouseUp ( float X, float Y )
{
	static UFunction* pFnRightMouseUp = NULL;

	if ( ! pFnRightMouseUp )
		pFnRightMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 76982 ];

	UNetherMenuOverlayUI_execRightMouseUp_Parms RightMouseUp_Parms;
	RightMouseUp_Parms.X = X;
	RightMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseUp, &RightMouseUp_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.RightMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMenuOverlayUI::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 76979 ];

	UNetherMenuOverlayUI_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.LeftMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMenuOverlayUI::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 76976 ];

	UNetherMenuOverlayUI_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.MouseMoved
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMenuOverlayUI::MouseMoved ( float X, float Y )
{
	static UFunction* pFnMouseMoved = NULL;

	if ( ! pFnMouseMoved )
		pFnMouseMoved = (UFunction*) UObject::GObjObjects()->Data[ 76973 ];

	UNetherMenuOverlayUI_execMouseMoved_Parms MouseMoved_Parms;
	MouseMoved_Parms.X = X;
	MouseMoved_Parms.Y = Y;

	this->ProcessEvent ( pFnMouseMoved, &MouseMoved_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMenuOverlayUI::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 76969 ];

	UNetherMenuOverlayUI_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.DeleteButtonConfirmed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::DeleteButtonConfirmed ( class UGFxButton* Button )
{
	static UFunction* pFnDeleteButtonConfirmed = NULL;

	if ( ! pFnDeleteButtonConfirmed )
		pFnDeleteButtonConfirmed = (UFunction*) UObject::GObjObjects()->Data[ 76966 ];

	UNetherMenuOverlayUI_execDeleteButtonConfirmed_Parms DeleteButtonConfirmed_Parms;
	DeleteButtonConfirmed_Parms.Button = Button;

	this->ProcessEvent ( pFnDeleteButtonConfirmed, &DeleteButtonConfirmed_Parms, NULL );

	return DeleteButtonConfirmed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnDeleteCharacter
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnDeleteCharacter ( class UGFxButton* Button )
{
	static UFunction* pFnOnDeleteCharacter = NULL;

	if ( ! pFnOnDeleteCharacter )
		pFnOnDeleteCharacter = (UFunction*) UObject::GObjObjects()->Data[ 76963 ];

	UNetherMenuOverlayUI_execOnDeleteCharacter_Parms OnDeleteCharacter_Parms;
	OnDeleteCharacter_Parms.Button = Button;

	this->ProcessEvent ( pFnOnDeleteCharacter, &OnDeleteCharacter_Parms, NULL );

	return OnDeleteCharacter_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.DisablePlayButton
// [0x00020002] 
// Parameters infos:

void UNetherMenuOverlayUI::DisablePlayButton ( )
{
	static UFunction* pFnDisablePlayButton = NULL;

	if ( ! pFnDisablePlayButton )
		pFnDisablePlayButton = (UFunction*) UObject::GObjObjects()->Data[ 76962 ];

	UNetherMenuOverlayUI_execDisablePlayButton_Parms DisablePlayButton_Parms;

	this->ProcessEvent ( pFnDisablePlayButton, &DisablePlayButton_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.EnablePlayButton
// [0x00020002] 
// Parameters infos:

void UNetherMenuOverlayUI::EnablePlayButton ( )
{
	static UFunction* pFnEnablePlayButton = NULL;

	if ( ! pFnEnablePlayButton )
		pFnEnablePlayButton = (UFunction*) UObject::GObjObjects()->Data[ 76961 ];

	UNetherMenuOverlayUI_execEnablePlayButton_Parms EnablePlayButton_Parms;

	this->ProcessEvent ( pFnEnablePlayButton, &EnablePlayButton_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.PlayButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::PlayButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnPlayButtonPressed = NULL;

	if ( ! pFnPlayButtonPressed )
		pFnPlayButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76958 ];

	UNetherMenuOverlayUI_execPlayButtonPressed_Parms PlayButtonPressed_Parms;
	PlayButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnPlayButtonPressed, &PlayButtonPressed_Parms, NULL );

	return PlayButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.ExitButtonConfirmed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::ExitButtonConfirmed ( class UGFxButton* Button )
{
	static UFunction* pFnExitButtonConfirmed = NULL;

	if ( ! pFnExitButtonConfirmed )
		pFnExitButtonConfirmed = (UFunction*) UObject::GObjObjects()->Data[ 76955 ];

	UNetherMenuOverlayUI_execExitButtonConfirmed_Parms ExitButtonConfirmed_Parms;
	ExitButtonConfirmed_Parms.Button = Button;

	this->ProcessEvent ( pFnExitButtonConfirmed, &ExitButtonConfirmed_Parms, NULL );

	return ExitButtonConfirmed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.ExitButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::ExitButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnExitButtonPressed = NULL;

	if ( ! pFnExitButtonPressed )
		pFnExitButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76950 ];

	UNetherMenuOverlayUI_execExitButtonPressed_Parms ExitButtonPressed_Parms;
	ExitButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnExitButtonPressed, &ExitButtonPressed_Parms, NULL );

	return ExitButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.ServerButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::ServerButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnServerButtonPressed = NULL;

	if ( ! pFnServerButtonPressed )
		pFnServerButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76947 ];

	UNetherMenuOverlayUI_execServerButtonPressed_Parms ServerButtonPressed_Parms;
	ServerButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnServerButtonPressed, &ServerButtonPressed_Parms, NULL );

	return ServerButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.MapButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::MapButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnMapButtonPressed = NULL;

	if ( ! pFnMapButtonPressed )
		pFnMapButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76944 ];

	UNetherMenuOverlayUI_execMapButtonPressed_Parms MapButtonPressed_Parms;
	MapButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnMapButtonPressed, &MapButtonPressed_Parms, NULL );

	return MapButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.SettingsButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::SettingsButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnSettingsButtonPressed = NULL;

	if ( ! pFnSettingsButtonPressed )
		pFnSettingsButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76941 ];

	UNetherMenuOverlayUI_execSettingsButtonPressed_Parms SettingsButtonPressed_Parms;
	SettingsButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnSettingsButtonPressed, &SettingsButtonPressed_Parms, NULL );

	return SettingsButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.ItemsButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::ItemsButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnItemsButtonPressed = NULL;

	if ( ! pFnItemsButtonPressed )
		pFnItemsButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76938 ];

	UNetherMenuOverlayUI_execItemsButtonPressed_Parms ItemsButtonPressed_Parms;
	ItemsButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnItemsButtonPressed, &ItemsButtonPressed_Parms, NULL );

	return ItemsButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.CustomizeButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::CustomizeButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnCustomizeButtonPressed = NULL;

	if ( ! pFnCustomizeButtonPressed )
		pFnCustomizeButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76935 ];

	UNetherMenuOverlayUI_execCustomizeButtonPressed_Parms CustomizeButtonPressed_Parms;
	CustomizeButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnCustomizeButtonPressed, &CustomizeButtonPressed_Parms, NULL );

	return CustomizeButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.CharacterButtonPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::CharacterButtonPressed ( class UGFxButton* Button )
{
	static UFunction* pFnCharacterButtonPressed = NULL;

	if ( ! pFnCharacterButtonPressed )
		pFnCharacterButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 76932 ];

	UNetherMenuOverlayUI_execCharacterButtonPressed_Parms CharacterButtonPressed_Parms;
	CharacterButtonPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnCharacterButtonPressed, &CharacterButtonPressed_Parms, NULL );

	return CharacterButtonPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.CharacterSlotPressed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::CharacterSlotPressed ( class UGFxButton* Button )
{
	static UFunction* pFnCharacterSlotPressed = NULL;

	if ( ! pFnCharacterSlotPressed )
		pFnCharacterSlotPressed = (UFunction*) UObject::GObjObjects()->Data[ 76928 ];

	UNetherMenuOverlayUI_execCharacterSlotPressed_Parms CharacterSlotPressed_Parms;
	CharacterSlotPressed_Parms.Button = Button;

	this->ProcessEvent ( pFnCharacterSlotPressed, &CharacterSlotPressed_Parms, NULL );

	return CharacterSlotPressed_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.DeselectAllSlotWidgets
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMenuOverlayUI::DeselectAllSlotWidgets ( )
{
	static UFunction* pFnDeselectAllSlotWidgets = NULL;

	if ( ! pFnDeselectAllSlotWidgets )
		pFnDeselectAllSlotWidgets = (UFunction*) UObject::GObjObjects()->Data[ 76926 ];

	UNetherMenuOverlayUI_execDeselectAllSlotWidgets_Parms DeselectAllSlotWidgets_Parms;

	this->ProcessEvent ( pFnDeselectAllSlotWidgets, &DeselectAllSlotWidgets_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.SelectSlotWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UGFxCharacterSlot*       ToSelect                       ( CPF_Parm )

void UNetherMenuOverlayUI::SelectSlotWidget ( class UGFxCharacterSlot* ToSelect )
{
	static UFunction* pFnSelectSlotWidget = NULL;

	if ( ! pFnSelectSlotWidget )
		pFnSelectSlotWidget = (UFunction*) UObject::GObjObjects()->Data[ 76857 ];

	UNetherMenuOverlayUI_execSelectSlotWidget_Parms SelectSlotWidget_Parms;
	SelectSlotWidget_Parms.ToSelect = ToSelect;

	this->ProcessEvent ( pFnSelectSlotWidget, &SelectSlotWidget_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.SelectButton
// [0x00020002] 
// Parameters infos:
// class UGFxButton*              ToSelect                       ( CPF_Parm )

void UNetherMenuOverlayUI::SelectButton ( class UGFxButton* ToSelect )
{
	static UFunction* pFnSelectButton = NULL;

	if ( ! pFnSelectButton )
		pFnSelectButton = (UFunction*) UObject::GObjObjects()->Data[ 76920 ];

	UNetherMenuOverlayUI_execSelectButton_Parms SelectButton_Parms;
	SelectButton_Parms.ToSelect = ToSelect;

	this->ProcessEvent ( pFnSelectButton, &SelectButton_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.IsSlaveMovieEnabled
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MovieType                      ( CPF_Parm )

bool UNetherMenuOverlayUI::IsSlaveMovieEnabled ( unsigned char MovieType )
{
	static UFunction* pFnIsSlaveMovieEnabled = NULL;

	if ( ! pFnIsSlaveMovieEnabled )
		pFnIsSlaveMovieEnabled = (UFunction*) UObject::GObjObjects()->Data[ 76917 ];

	UNetherMenuOverlayUI_execIsSlaveMovieEnabled_Parms IsSlaveMovieEnabled_Parms;
	IsSlaveMovieEnabled_Parms.MovieType = MovieType;

	this->ProcessEvent ( pFnIsSlaveMovieEnabled, &IsSlaveMovieEnabled_Parms, NULL );

	return IsSlaveMovieEnabled_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.IsSlaveMovieOpen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MovieType                      ( CPF_Parm )

bool UNetherMenuOverlayUI::IsSlaveMovieOpen ( unsigned char MovieType )
{
	static UFunction* pFnIsSlaveMovieOpen = NULL;

	if ( ! pFnIsSlaveMovieOpen )
		pFnIsSlaveMovieOpen = (UFunction*) UObject::GObjObjects()->Data[ 74157 ];

	UNetherMenuOverlayUI_execIsSlaveMovieOpen_Parms IsSlaveMovieOpen_Parms;
	IsSlaveMovieOpen_Parms.MovieType = MovieType;

	this->ProcessEvent ( pFnIsSlaveMovieOpen, &IsSlaveMovieOpen_Parms, NULL );

	return IsSlaveMovieOpen_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.UpdatePurchaseInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMenuOverlayUI::UpdatePurchaseInfo ( )
{
	static UFunction* pFnUpdatePurchaseInfo = NULL;

	if ( ! pFnUpdatePurchaseInfo )
		pFnUpdatePurchaseInfo = (UFunction*) UObject::GObjObjects()->Data[ 76871 ];

	UNetherMenuOverlayUI_execUpdatePurchaseInfo_Parms UpdatePurchaseInfo_Parms;

	this->ProcessEvent ( pFnUpdatePurchaseInfo, &UpdatePurchaseInfo_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.RefreshUI
// [0x00020002] 
// Parameters infos:

void UNetherMenuOverlayUI::RefreshUI ( )
{
	static UFunction* pFnRefreshUI = NULL;

	if ( ! pFnRefreshUI )
		pFnRefreshUI = (UFunction*) UObject::GObjObjects()->Data[ 76910 ];

	UNetherMenuOverlayUI_execRefreshUI_Parms RefreshUI_Parms;

	this->ProcessEvent ( pFnRefreshUI, &RefreshUI_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.IsClosing
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherMenuOverlayUI::IsClosing ( )
{
	static UFunction* pFnIsClosing = NULL;

	if ( ! pFnIsClosing )
		pFnIsClosing = (UFunction*) UObject::GObjObjects()->Data[ 74155 ];

	UNetherMenuOverlayUI_execIsClosing_Parms IsClosing_Parms;

	this->ProcessEvent ( pFnIsClosing, &IsClosing_Parms, NULL );

	return IsClosing_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.SetSlaveMovie
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewSlave                       ( CPF_Parm )

void UNetherMenuOverlayUI::SetSlaveMovie ( unsigned char NewSlave )
{
	static UFunction* pFnSetSlaveMovie = NULL;

	if ( ! pFnSetSlaveMovie )
		pFnSetSlaveMovie = (UFunction*) UObject::GObjObjects()->Data[ 76908 ];

	UNetherMenuOverlayUI_execSetSlaveMovie_Parms SetSlaveMovie_Parms;
	SetSlaveMovie_Parms.NewSlave = NewSlave;

	this->ProcessEvent ( pFnSetSlaveMovie, &SetSlaveMovie_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.OpenSlaveMovie
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewSlave                       ( CPF_Parm )

void UNetherMenuOverlayUI::OpenSlaveMovie ( unsigned char NewSlave )
{
	static UFunction* pFnOpenSlaveMovie = NULL;

	if ( ! pFnOpenSlaveMovie )
		pFnOpenSlaveMovie = (UFunction*) UObject::GObjObjects()->Data[ 74159 ];

	UNetherMenuOverlayUI_execOpenSlaveMovie_Parms OpenSlaveMovie_Parms;
	OpenSlaveMovie_Parms.NewSlave = NewSlave;

	this->ProcessEvent ( pFnOpenSlaveMovie, &OpenSlaveMovie_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.OnPrevLegs
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnPrevLegs ( class UGFxButton* Button )
{
	static UFunction* pFnOnPrevLegs = NULL;

	if ( ! pFnOnPrevLegs )
		pFnOnPrevLegs = (UFunction*) UObject::GObjObjects()->Data[ 76903 ];

	UNetherMenuOverlayUI_execOnPrevLegs_Parms OnPrevLegs_Parms;
	OnPrevLegs_Parms.Button = Button;

	this->ProcessEvent ( pFnOnPrevLegs, &OnPrevLegs_Parms, NULL );

	return OnPrevLegs_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnNextLegs
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnNextLegs ( class UGFxButton* Button )
{
	static UFunction* pFnOnNextLegs = NULL;

	if ( ! pFnOnNextLegs )
		pFnOnNextLegs = (UFunction*) UObject::GObjObjects()->Data[ 76900 ];

	UNetherMenuOverlayUI_execOnNextLegs_Parms OnNextLegs_Parms;
	OnNextLegs_Parms.Button = Button;

	this->ProcessEvent ( pFnOnNextLegs, &OnNextLegs_Parms, NULL );

	return OnNextLegs_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnPrevBody
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnPrevBody ( class UGFxButton* Button )
{
	static UFunction* pFnOnPrevBody = NULL;

	if ( ! pFnOnPrevBody )
		pFnOnPrevBody = (UFunction*) UObject::GObjObjects()->Data[ 76897 ];

	UNetherMenuOverlayUI_execOnPrevBody_Parms OnPrevBody_Parms;
	OnPrevBody_Parms.Button = Button;

	this->ProcessEvent ( pFnOnPrevBody, &OnPrevBody_Parms, NULL );

	return OnPrevBody_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnNextBody
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnNextBody ( class UGFxButton* Button )
{
	static UFunction* pFnOnNextBody = NULL;

	if ( ! pFnOnNextBody )
		pFnOnNextBody = (UFunction*) UObject::GObjObjects()->Data[ 76894 ];

	UNetherMenuOverlayUI_execOnNextBody_Parms OnNextBody_Parms;
	OnNextBody_Parms.Button = Button;

	this->ProcessEvent ( pFnOnNextBody, &OnNextBody_Parms, NULL );

	return OnNextBody_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnPrevHead
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnPrevHead ( class UGFxButton* Button )
{
	static UFunction* pFnOnPrevHead = NULL;

	if ( ! pFnOnPrevHead )
		pFnOnPrevHead = (UFunction*) UObject::GObjObjects()->Data[ 76891 ];

	UNetherMenuOverlayUI_execOnPrevHead_Parms OnPrevHead_Parms;
	OnPrevHead_Parms.Button = Button;

	this->ProcessEvent ( pFnOnPrevHead, &OnPrevHead_Parms, NULL );

	return OnPrevHead_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnNextHead
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnNextHead ( class UGFxButton* Button )
{
	static UFunction* pFnOnNextHead = NULL;

	if ( ! pFnOnNextHead )
		pFnOnNextHead = (UFunction*) UObject::GObjObjects()->Data[ 76888 ];

	UNetherMenuOverlayUI_execOnNextHead_Parms OnNextHead_Parms;
	OnNextHead_Parms.Button = Button;

	this->ProcessEvent ( pFnOnNextHead, &OnNextHead_Parms, NULL );

	return OnNextHead_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.GetFamilyInfo
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TemplateID                     ( CPF_Parm )

class UClass* UNetherMenuOverlayUI::GetFamilyInfo ( int TemplateID )
{
	static UFunction* pFnGetFamilyInfo = NULL;

	if ( ! pFnGetFamilyInfo )
		pFnGetFamilyInfo = (UFunction*) UObject::GObjObjects()->Data[ 75763 ];

	UNetherMenuOverlayUI_execGetFamilyInfo_Parms GetFamilyInfo_Parms;
	GetFamilyInfo_Parms.TemplateID = TemplateID;

	this->ProcessEvent ( pFnGetFamilyInfo, &GetFamilyInfo_Parms, NULL );

	return GetFamilyInfo_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnConfirmTemplatePurchase
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnConfirmTemplatePurchase ( class UGFxButton* Button )
{
	static UFunction* pFnOnConfirmTemplatePurchase = NULL;

	if ( ! pFnOnConfirmTemplatePurchase )
		pFnOnConfirmTemplatePurchase = (UFunction*) UObject::GObjObjects()->Data[ 76884 ];

	UNetherMenuOverlayUI_execOnConfirmTemplatePurchase_Parms OnConfirmTemplatePurchase_Parms;
	OnConfirmTemplatePurchase_Parms.Button = Button;

	this->ProcessEvent ( pFnOnConfirmTemplatePurchase, &OnConfirmTemplatePurchase_Parms, NULL );

	return OnConfirmTemplatePurchase_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnPurchaseTemplate
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnPurchaseTemplate ( class UGFxButton* Button )
{
	static UFunction* pFnOnPurchaseTemplate = NULL;

	if ( ! pFnOnPurchaseTemplate )
		pFnOnPurchaseTemplate = (UFunction*) UObject::GObjObjects()->Data[ 76878 ];

	UNetherMenuOverlayUI_execOnPurchaseTemplate_Parms OnPurchaseTemplate_Parms;
	OnPurchaseTemplate_Parms.Button = Button;

	this->ProcessEvent ( pFnOnPurchaseTemplate, &OnPurchaseTemplate_Parms, NULL );

	return OnPurchaseTemplate_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnPrevTemplate
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnPrevTemplate ( class UGFxButton* Button )
{
	static UFunction* pFnOnPrevTemplate = NULL;

	if ( ! pFnOnPrevTemplate )
		pFnOnPrevTemplate = (UFunction*) UObject::GObjObjects()->Data[ 76875 ];

	UNetherMenuOverlayUI_execOnPrevTemplate_Parms OnPrevTemplate_Parms;
	OnPrevTemplate_Parms.Button = Button;

	this->ProcessEvent ( pFnOnPrevTemplate, &OnPrevTemplate_Parms, NULL );

	return OnPrevTemplate_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.OnNextTemplate
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMenuOverlayUI::OnNextTemplate ( class UGFxButton* Button )
{
	static UFunction* pFnOnNextTemplate = NULL;

	if ( ! pFnOnNextTemplate )
		pFnOnNextTemplate = (UFunction*) UObject::GObjObjects()->Data[ 76872 ];

	UNetherMenuOverlayUI_execOnNextTemplate_Parms OnNextTemplate_Parms;
	OnNextTemplate_Parms.Button = Button;

	this->ProcessEvent ( pFnOnNextTemplate, &OnNextTemplate_Parms, NULL );

	return OnNextTemplate_Parms.ReturnValue;
};

// Function NetherGame.NetherMenuOverlayUI.SetCharacterTemplate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            TemplateID                     ( CPF_Parm )

void UNetherMenuOverlayUI::SetCharacterTemplate ( int TemplateID )
{
	static UFunction* pFnSetCharacterTemplate = NULL;

	if ( ! pFnSetCharacterTemplate )
		pFnSetCharacterTemplate = (UFunction*) UObject::GObjObjects()->Data[ 76865 ];

	UNetherMenuOverlayUI_execSetCharacterTemplate_Parms SetCharacterTemplate_Parms;
	SetCharacterTemplate_Parms.TemplateID = TemplateID;

	this->ProcessEvent ( pFnSetCharacterTemplate, &SetCharacterTemplate_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.CloseMenuOverlay
// [0x00020002] 
// Parameters infos:

void UNetherMenuOverlayUI::CloseMenuOverlay ( )
{
	static UFunction* pFnCloseMenuOverlay = NULL;

	if ( ! pFnCloseMenuOverlay )
		pFnCloseMenuOverlay = (UFunction*) UObject::GObjObjects()->Data[ 76863 ];

	UNetherMenuOverlayUI_execCloseMenuOverlay_Parms CloseMenuOverlay_Parms;

	this->ProcessEvent ( pFnCloseMenuOverlay, &CloseMenuOverlay_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherMenuOverlayUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 76862 ];

	UNetherMenuOverlayUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.BuildOnComplete
// [0x00020002] 
// Parameters infos:

void UNetherMenuOverlayUI::BuildOnComplete ( )
{
	static UFunction* pFnBuildOnComplete = NULL;

	if ( ! pFnBuildOnComplete )
		pFnBuildOnComplete = (UFunction*) UObject::GObjObjects()->Data[ 76860 ];

	UNetherMenuOverlayUI_execBuildOnComplete_Parms BuildOnComplete_Parms;

	this->ProcessEvent ( pFnBuildOnComplete, &BuildOnComplete_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UNetherMenuOverlayUI::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 76858 ];

	UNetherMenuOverlayUI_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.InitSlotWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 WidgetPath                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            SlotIndex                      ( CPF_Parm )

void UNetherMenuOverlayUI::InitSlotWidget ( struct FString WidgetPath, int SlotIndex )
{
	static UFunction* pFnInitSlotWidget = NULL;

	if ( ! pFnInitSlotWidget )
		pFnInitSlotWidget = (UFunction*) UObject::GObjObjects()->Data[ 76852 ];

	UNetherMenuOverlayUI_execInitSlotWidget_Parms InitSlotWidget_Parms;
	memcpy ( &InitSlotWidget_Parms.WidgetPath, &WidgetPath, 0x10 );
	InitSlotWidget_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnInitSlotWidget, &InitSlotWidget_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.InitGameMenus
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMenuOverlayUI::InitGameMenus ( )
{
	static UFunction* pFnInitGameMenus = NULL;

	if ( ! pFnInitGameMenus )
		pFnInitGameMenus = (UFunction*) UObject::GObjObjects()->Data[ 76851 ];

	UNetherMenuOverlayUI_execInitGameMenus_Parms InitGameMenus_Parms;

	this->ProcessEvent ( pFnInitGameMenus, &InitGameMenus_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.InitStartScreenMenus
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMenuOverlayUI::InitStartScreenMenus ( )
{
	static UFunction* pFnInitStartScreenMenus = NULL;

	if ( ! pFnInitStartScreenMenus )
		pFnInitStartScreenMenus = (UFunction*) UObject::GObjObjects()->Data[ 76850 ];

	UNetherMenuOverlayUI_execInitStartScreenMenus_Parms InitStartScreenMenus_Parms;

	this->ProcessEvent ( pFnInitStartScreenMenus, &InitStartScreenMenus_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.InitFrontendMenus
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherMenuOverlayUI::InitFrontendMenus ( )
{
	static UFunction* pFnInitFrontendMenus = NULL;

	if ( ! pFnInitFrontendMenus )
		pFnInitFrontendMenus = (UFunction*) UObject::GObjObjects()->Data[ 76849 ];

	UNetherMenuOverlayUI_execInitFrontendMenus_Parms InitFrontendMenus_Parms;

	this->ProcessEvent ( pFnInitFrontendMenus, &InitFrontendMenus_Parms, NULL );
};

// Function NetherGame.NetherMenuOverlayUI.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherMenuOverlayUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 76845 ];

	UNetherMenuOverlayUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.IsValidUse
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANInteractiveObject_Barter::IsValidUse ( )
{
	static UFunction* pFnIsValidUse = NULL;

	if ( ! pFnIsValidUse )
		pFnIsValidUse = (UFunction*) UObject::GObjObjects()->Data[ 79243 ];

	ANInteractiveObject_Barter_execIsValidUse_Parms IsValidUse_Parms;

	this->ProcessEvent ( pFnIsValidUse, &IsValidUse_Parms, NULL );

	return IsValidUse_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject_Barter.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANInteractiveObject_Barter::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 79241 ];

	ANInteractiveObject_Barter_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANInteractiveObject_Barter::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 79236 ];

	ANInteractiveObject_Barter_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.CompleteTrade
// [0x00A200C2] 
// Parameters infos:
// class ANetherPlayerController* User                           ( CPF_Parm )

void ANInteractiveObject_Barter::CompleteTrade ( class ANetherPlayerController* User )
{
	static UFunction* pFnCompleteTrade = NULL;

	if ( ! pFnCompleteTrade )
		pFnCompleteTrade = (UFunction*) UObject::GObjObjects()->Data[ 79233 ];

	ANInteractiveObject_Barter_execCompleteTrade_Parms CompleteTrade_Parms;
	CompleteTrade_Parms.User = User;

	this->ProcessEvent ( pFnCompleteTrade, &CompleteTrade_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.OnUse
// [0x00020002] 
// Parameters infos:
// class ANetherPlayerController* User                           ( CPF_Parm )

void ANInteractiveObject_Barter::OnUse ( class ANetherPlayerController* User )
{
	static UFunction* pFnOnUse = NULL;

	if ( ! pFnOnUse )
		pFnOnUse = (UFunction*) UObject::GObjObjects()->Data[ 79231 ];

	ANInteractiveObject_Barter_execOnUse_Parms OnUse_Parms;
	OnUse_Parms.User = User;

	this->ProcessEvent ( pFnOnUse, &OnUse_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.PlayerHasNecessaryItems
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANetherPlayerController* User                           ( CPF_Parm )

bool ANInteractiveObject_Barter::PlayerHasNecessaryItems ( class ANetherPlayerController* User )
{
	static UFunction* pFnPlayerHasNecessaryItems = NULL;

	if ( ! pFnPlayerHasNecessaryItems )
		pFnPlayerHasNecessaryItems = (UFunction*) UObject::GObjObjects()->Data[ 79227 ];

	ANInteractiveObject_Barter_execPlayerHasNecessaryItems_Parms PlayerHasNecessaryItems_Parms;
	PlayerHasNecessaryItems_Parms.User = User;

	this->ProcessEvent ( pFnPlayerHasNecessaryItems, &PlayerHasNecessaryItems_Parms, NULL );

	return PlayerHasNecessaryItems_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject_Barter.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANInteractiveObject_Barter::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 79225 ];

	ANInteractiveObject_Barter_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.MakeTradeHeader
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANInteractiveObject_Barter::MakeTradeHeader ( )
{
	static UFunction* pFnMakeTradeHeader = NULL;

	if ( ! pFnMakeTradeHeader )
		pFnMakeTradeHeader = (UFunction*) UObject::GObjObjects()->Data[ 79221 ];

	ANInteractiveObject_Barter_execMakeTradeHeader_Parms MakeTradeHeader_Parms;

	this->ProcessEvent ( pFnMakeTradeHeader, &MakeTradeHeader_Parms, NULL );

	return MakeTradeHeader_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject_Barter.CancelOverlappingNPawnPopup
// [0x00020002] 
// Parameters infos:

void ANInteractiveObject_Barter::CancelOverlappingNPawnPopup ( )
{
	static UFunction* pFnCancelOverlappingNPawnPopup = NULL;

	if ( ! pFnCancelOverlappingNPawnPopup )
		pFnCancelOverlappingNPawnPopup = (UFunction*) UObject::GObjObjects()->Data[ 79219 ];

	ANInteractiveObject_Barter_execCancelOverlappingNPawnPopup_Parms CancelOverlappingNPawnPopup_Parms;

	this->ProcessEvent ( pFnCancelOverlappingNPawnPopup, &CancelOverlappingNPawnPopup_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.UpdateOverlappingNPawnText
// [0x00024002] 
// Parameters infos:
// struct FString                 HeaderText                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 PromptText                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ANInteractiveObject_Barter::UpdateOverlappingNPawnText ( struct FString HeaderText, struct FString PromptText )
{
	static UFunction* pFnUpdateOverlappingNPawnText = NULL;

	if ( ! pFnUpdateOverlappingNPawnText )
		pFnUpdateOverlappingNPawnText = (UFunction*) UObject::GObjObjects()->Data[ 79215 ];

	ANInteractiveObject_Barter_execUpdateOverlappingNPawnText_Parms UpdateOverlappingNPawnText_Parms;
	memcpy ( &UpdateOverlappingNPawnText_Parms.HeaderText, &HeaderText, 0x10 );
	memcpy ( &UpdateOverlappingNPawnText_Parms.PromptText, &PromptText, 0x10 );

	this->ProcessEvent ( pFnUpdateOverlappingNPawnText, &UpdateOverlappingNPawnText_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.PickANewTrade
// [0x00020002] 
// Parameters infos:

void ANInteractiveObject_Barter::PickANewTrade ( )
{
	static UFunction* pFnPickANewTrade = NULL;

	if ( ! pFnPickANewTrade )
		pFnPickANewTrade = (UFunction*) UObject::GObjObjects()->Data[ 79213 ];

	ANInteractiveObject_Barter_execPickANewTrade_Parms PickANewTrade_Parms;

	this->ProcessEvent ( pFnPickANewTrade, &PickANewTrade_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.ClientClearMesh
// [0x010201C2] 
// Parameters infos:

void ANInteractiveObject_Barter::ClientClearMesh ( )
{
	static UFunction* pFnClientClearMesh = NULL;

	if ( ! pFnClientClearMesh )
		pFnClientClearMesh = (UFunction*) UObject::GObjObjects()->Data[ 79212 ];

	ANInteractiveObject_Barter_execClientClearMesh_Parms ClientClearMesh_Parms;

	this->ProcessEvent ( pFnClientClearMesh, &ClientClearMesh_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Barter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANInteractiveObject_Barter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79211 ];

	ANInteractiveObject_Barter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NInteractiveObject.TimeLeftToUse
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANInteractiveObject::TimeLeftToUse ( )
{
	static UFunction* pFnTimeLeftToUse = NULL;

	if ( ! pFnTimeLeftToUse )
		pFnTimeLeftToUse = (UFunction*) UObject::GObjObjects()->Data[ 75680 ];

	ANInteractiveObject_execTimeLeftToUse_Parms TimeLeftToUse_Parms;

	this->ProcessEvent ( pFnTimeLeftToUse, &TimeLeftToUse_Parms, NULL );

	return TimeLeftToUse_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject.ReleaseFromUse
// [0x00020002] 
// Parameters infos:

void ANInteractiveObject::ReleaseFromUse ( )
{
	static UFunction* pFnReleaseFromUse = NULL;

	if ( ! pFnReleaseFromUse )
		pFnReleaseFromUse = (UFunction*) UObject::GObjObjects()->Data[ 79199 ];

	ANInteractiveObject_execReleaseFromUse_Parms ReleaseFromUse_Parms;

	this->ProcessEvent ( pFnReleaseFromUse, &ReleaseFromUse_Parms, NULL );
};

// Function NetherGame.NInteractiveObject.IsValidUse
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANInteractiveObject::IsValidUse ( )
{
	static UFunction* pFnIsValidUse = NULL;

	if ( ! pFnIsValidUse )
		pFnIsValidUse = (UFunction*) UObject::GObjObjects()->Data[ 75478 ];

	ANInteractiveObject_execIsValidUse_Parms IsValidUse_Parms;

	this->ProcessEvent ( pFnIsValidUse, &IsValidUse_Parms, NULL );

	return IsValidUse_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject.MarkForUse
// [0x00020002] 
// Parameters infos:
// class ANetherPlayerController* User                           ( CPF_Parm )

void ANInteractiveObject::MarkForUse ( class ANetherPlayerController* User )
{
	static UFunction* pFnMarkForUse = NULL;

	if ( ! pFnMarkForUse )
		pFnMarkForUse = (UFunction*) UObject::GObjObjects()->Data[ 79197 ];

	ANInteractiveObject_execMarkForUse_Parms MarkForUse_Parms;
	MarkForUse_Parms.User = User;

	this->ProcessEvent ( pFnMarkForUse, &MarkForUse_Parms, NULL );
};

// Function NetherGame.NInteractiveObject.IsInUse
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANInteractiveObject::IsInUse ( )
{
	static UFunction* pFnIsInUse = NULL;

	if ( ! pFnIsInUse )
		pFnIsInUse = (UFunction*) UObject::GObjObjects()->Data[ 79195 ];

	ANInteractiveObject_execIsInUse_Parms IsInUse_Parms;

	this->ProcessEvent ( pFnIsInUse, &IsInUse_Parms, NULL );

	return IsInUse_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANInteractiveObject::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 79193 ];

	ANInteractiveObject_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NInteractiveObject.IsVolume
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANInteractiveObject::IsVolume ( )
{
	static UFunction* pFnIsVolume = NULL;

	if ( ! pFnIsVolume )
		pFnIsVolume = (UFunction*) UObject::GObjObjects()->Data[ 75471 ];

	ANInteractiveObject_execIsVolume_Parms IsVolume_Parms;

	this->ProcessEvent ( pFnIsVolume, &IsVolume_Parms, NULL );

	return IsVolume_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject.OnUse
// [0x00020000] 
// Parameters infos:
// class ANetherPlayerController* User                           ( CPF_Parm )

void ANInteractiveObject::OnUse ( class ANetherPlayerController* User )
{
	static UFunction* pFnOnUse = NULL;

	if ( ! pFnOnUse )
		pFnOnUse = (UFunction*) UObject::GObjObjects()->Data[ 79191 ];

	ANInteractiveObject_execOnUse_Parms OnUse_Parms;
	OnUse_Parms.User = User;

	this->ProcessEvent ( pFnOnUse, &OnUse_Parms, NULL );
};

// Function NetherGame.NInteractiveObject.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANInteractiveObject::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79190 ];

	ANInteractiveObject_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NFoodConsumable_SnackPackage.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFoodConsumable_SnackPackage::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79157 ];

	ANFoodConsumable_SnackPackage_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NFoodConsumable_Canned.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFoodConsumable_Canned::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79140 ];

	ANFoodConsumable_Canned_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NFoodConsumable_Water.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFoodConsumable_Water::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79161 ];

	ANFoodConsumable_Water_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe_Head.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANWardrobe_Head::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 80928 ];

	ANWardrobe_Head_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NWardrobe_Head.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANWardrobe_Head::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 80926 ];

	ANWardrobe_Head_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NWardrobe_Head.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWardrobe_Head::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 80924 ];

	ANWardrobe_Head_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe_Arm.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANWardrobe_Arm::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 80915 ];

	ANWardrobe_Arm_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NWardrobe_Arm.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANWardrobe_Arm::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 80913 ];

	ANWardrobe_Arm_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NWardrobe_Arm.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWardrobe_Arm::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 80911 ];

	ANWardrobe_Arm_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NMisc_ChewingGum.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_ChewingGum::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79313 ];

	ANMisc_ChewingGum_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_Cigarettes.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_Cigarettes::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79317 ];

	ANMisc_Cigarettes_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_BagOfSalt.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_BagOfSalt::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79301 ];

	ANMisc_BagOfSalt_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_PlayingCards.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_PlayingCards::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79329 ];

	ANMisc_PlayingCards_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_Bleach.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_Bleach::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79305 ];

	ANMisc_Bleach_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_Cookware.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_Cookware::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79321 ];

	ANMisc_Cookware_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_BoxedSoap.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_BoxedSoap::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79309 ];

	ANMisc_BoxedSoap_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_Toiletries.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_Toiletries::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79337 ];

	ANMisc_Toiletries_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_InsectRepellent.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_InsectRepellent::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79325 ];

	ANMisc_InsectRepellent_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NMisc_SewingKit.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANMisc_SewingKit::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 79333 ];

	ANMisc_SewingKit_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NWardrobe_NetherSkin_Backpack.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANWardrobe_NetherSkin_Backpack::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 80985 ];

	ANWardrobe_NetherSkin_Backpack_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable_SmokeGrenade.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANThrowableConsumable_SmokeGrenade::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 80756 ];

	ANThrowableConsumable_SmokeGrenade_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANThrowableConsumable::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 80727 ];

	ANThrowableConsumable_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable.IsQuickSlotable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANThrowableConsumable::IsQuickSlotable ( )
{
	static UFunction* pFnIsQuickSlotable = NULL;

	if ( ! pFnIsQuickSlotable )
		pFnIsQuickSlotable = (UFunction*) UObject::GObjObjects()->Data[ 80725 ];

	ANThrowableConsumable_execIsQuickSlotable_Parms IsQuickSlotable_Parms;

	this->ProcessEvent ( pFnIsQuickSlotable, &IsQuickSlotable_Parms, NULL );

	return IsQuickSlotable_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANThrowableConsumable::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 80723 ];

	ANThrowableConsumable_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NThrowableConsumable.ConsumeItem
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Consumer                       ( CPF_Parm )

bool ANThrowableConsumable::ConsumeItem ( class APawn* Consumer )
{
	static UFunction* pFnConsumeItem = NULL;

	if ( ! pFnConsumeItem )
		pFnConsumeItem = (UFunction*) UObject::GObjObjects()->Data[ 80716 ];

	ANThrowableConsumable_execConsumeItem_Parms ConsumeItem_Parms;
	ConsumeItem_Parms.Consumer = Consumer;

	this->ProcessEvent ( pFnConsumeItem, &ConsumeItem_Parms, NULL );

	return ConsumeItem_Parms.ReturnValue;
};

// Function NetherGame.NFlashlight.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANFlashlight::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 79076 ];

	ANFlashlight_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NFlashlight.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void ANFlashlight::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 79073 ];

	ANFlashlight_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function NetherGame.NFlashlight.CreateFlashLightLightComponent
// [0x00020102] 
// Parameters infos:

void ANFlashlight::CreateFlashLightLightComponent ( )
{
	static UFunction* pFnCreateFlashLightLightComponent = NULL;

	if ( ! pFnCreateFlashLightLightComponent )
		pFnCreateFlashLightLightComponent = (UFunction*) UObject::GObjObjects()->Data[ 79072 ];

	ANFlashlight_execCreateFlashLightLightComponent_Parms CreateFlashLightLightComponent_Parms;

	this->ProcessEvent ( pFnCreateFlashLightLightComponent, &CreateFlashLightLightComponent_Parms, NULL );
};

// Function NetherGame.NFlashlight.AttachTo
// [0x00820102] 
// Parameters infos:
// class ANetherPawn*             OwnerPawn                      ( CPF_Parm )
// struct FName                   AttachmentSocket               ( CPF_Parm )

void ANFlashlight::AttachTo ( class ANetherPawn* OwnerPawn, struct FName AttachmentSocket )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = (UFunction*) UObject::GObjObjects()->Data[ 79067 ];

	ANFlashlight_execAttachTo_Parms AttachTo_Parms;
	AttachTo_Parms.OwnerPawn = OwnerPawn;
	memcpy ( &AttachTo_Parms.AttachmentSocket, &AttachmentSocket, 0x8 );

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function NetherGame.NFlashlight.DetachFrom
// [0x00020102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )

void ANFlashlight::DetachFrom ( class USkeletalMeshComponent* MeshCpnt )
{
	static UFunction* pFnDetachFrom = NULL;

	if ( ! pFnDetachFrom )
		pFnDetachFrom = (UFunction*) UObject::GObjObjects()->Data[ 79065 ];

	ANFlashlight_execDetachFrom_Parms DetachFrom_Parms;
	DetachFrom_Parms.MeshCpnt = MeshCpnt;

	this->ProcessEvent ( pFnDetachFrom, &DetachFrom_Parms, NULL );
};

// Function NetherGame.NFlashlight.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void ANFlashlight::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 79064 ];

	ANFlashlight_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function NetherGame.NFlashlight.SetSlotNumber
// [0x00020102] 
// Parameters infos:
// int                            NewSlotNumber                  ( CPF_Parm )

void ANFlashlight::SetSlotNumber ( int NewSlotNumber )
{
	static UFunction* pFnSetSlotNumber = NULL;

	if ( ! pFnSetSlotNumber )
		pFnSetSlotNumber = (UFunction*) UObject::GObjObjects()->Data[ 79062 ];

	ANFlashlight_execSetSlotNumber_Parms SetSlotNumber_Parms;
	SetSlotNumber_Parms.NewSlotNumber = NewSlotNumber;

	this->ProcessEvent ( pFnSetSlotNumber, &SetSlotNumber_Parms, NULL );
};

// Function NetherGame.NFlashlight.IsDroppable
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANFlashlight::IsDroppable ( )
{
	static UFunction* pFnIsDroppable = NULL;

	if ( ! pFnIsDroppable )
		pFnIsDroppable = (UFunction*) UObject::GObjObjects()->Data[ 79060 ];

	ANFlashlight_execIsDroppable_Parms IsDroppable_Parms;

	this->ProcessEvent ( pFnIsDroppable, &IsDroppable_Parms, NULL );

	return IsDroppable_Parms.ReturnValue;
};

// Function NetherGame.NFlashlight.GetItemType
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANFlashlight::GetItemType ( )
{
	static UFunction* pFnGetItemType = NULL;

	if ( ! pFnGetItemType )
		pFnGetItemType = (UFunction*) UObject::GObjObjects()->Data[ 79058 ];

	ANFlashlight_execGetItemType_Parms GetItemType_Parms;

	this->ProcessEvent ( pFnGetItemType, &GetItemType_Parms, NULL );

	return GetItemType_Parms.ReturnValue;
};

// Function NetherGame.NFlashlight.ToggleFlashlight
// [0x00020000] 
// Parameters infos:

void ANFlashlight::ToggleFlashlight ( )
{
	static UFunction* pFnToggleFlashlight = NULL;

	if ( ! pFnToggleFlashlight )
		pFnToggleFlashlight = (UFunction*) UObject::GObjObjects()->Data[ 79057 ];

	ANFlashlight_execToggleFlashlight_Parms ToggleFlashlight_Parms;

	this->ProcessEvent ( pFnToggleFlashlight, &ToggleFlashlight_Parms, NULL );
};

// Function NetherGame.NThrowableConsumable_Flare.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANThrowableConsumable_Flare::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 80736 ];

	ANThrowableConsumable_Flare_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable_AggroBomb.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANThrowableConsumable_AggroBomb::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 80731 ];

	ANThrowableConsumable_AggroBomb_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable_Flashbang.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANThrowableConsumable_Flashbang::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 80741 ];

	ANThrowableConsumable_Flashbang_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable_FragGrenade.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANThrowableConsumable_FragGrenade::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 80746 ];

	ANThrowableConsumable_FragGrenade_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NThrowableConsumable_PortableAntiNetherDevice.GetInventoryID
// [0x00022102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANThrowableConsumable_PortableAntiNetherDevice::GetInventoryID ( )
{
	static UFunction* pFnGetInventoryID = NULL;

	if ( ! pFnGetInventoryID )
		pFnGetInventoryID = (UFunction*) UObject::GObjObjects()->Data[ 80751 ];

	ANThrowableConsumable_PortableAntiNetherDevice_execGetInventoryID_Parms GetInventoryID_Parms;

	this->ProcessEvent ( pFnGetInventoryID, &GetInventoryID_Parms, NULL );

	return GetInventoryID_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 75378 ];

	UNetherInventoryUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 75377 ];

	UNetherInventoryUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.CloseInventory
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::CloseInventory ( )
{
	static UFunction* pFnCloseInventory = NULL;

	if ( ! pFnCloseInventory )
		pFnCloseInventory = (UFunction*) UObject::GObjObjects()->Data[ 75376 ];

	UNetherInventoryUI_execCloseInventory_Parms CloseInventory_Parms;

	this->ProcessEvent ( pFnCloseInventory, &CloseInventory_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.ShowBuyGoldButton
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::ShowBuyGoldButton ( )
{
	static UFunction* pFnShowBuyGoldButton = NULL;

	if ( ! pFnShowBuyGoldButton )
		pFnShowBuyGoldButton = (UFunction*) UObject::GObjObjects()->Data[ 75375 ];

	UNetherInventoryUI_execShowBuyGoldButton_Parms ShowBuyGoldButton_Parms;

	this->ProcessEvent ( pFnShowBuyGoldButton, &ShowBuyGoldButton_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.HideBuyGoldButton
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::HideBuyGoldButton ( )
{
	static UFunction* pFnHideBuyGoldButton = NULL;

	if ( ! pFnHideBuyGoldButton )
		pFnHideBuyGoldButton = (UFunction*) UObject::GObjObjects()->Data[ 75374 ];

	UNetherInventoryUI_execHideBuyGoldButton_Parms HideBuyGoldButton_Parms;

	this->ProcessEvent ( pFnHideBuyGoldButton, &HideBuyGoldButton_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.ShowBuyButton
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::ShowBuyButton ( )
{
	static UFunction* pFnShowBuyButton = NULL;

	if ( ! pFnShowBuyButton )
		pFnShowBuyButton = (UFunction*) UObject::GObjObjects()->Data[ 75373 ];

	UNetherInventoryUI_execShowBuyButton_Parms ShowBuyButton_Parms;

	this->ProcessEvent ( pFnShowBuyButton, &ShowBuyButton_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.HideBuyButton
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::HideBuyButton ( )
{
	static UFunction* pFnHideBuyButton = NULL;

	if ( ! pFnHideBuyButton )
		pFnHideBuyButton = (UFunction*) UObject::GObjObjects()->Data[ 75372 ];

	UNetherInventoryUI_execHideBuyButton_Parms HideBuyButton_Parms;

	this->ProcessEvent ( pFnHideBuyButton, &HideBuyButton_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.GlobalSlotsVisible
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherInventoryUI::GlobalSlotsVisible ( )
{
	static UFunction* pFnGlobalSlotsVisible = NULL;

	if ( ! pFnGlobalSlotsVisible )
		pFnGlobalSlotsVisible = (UFunction*) UObject::GObjObjects()->Data[ 75370 ];

	UNetherInventoryUI_execGlobalSlotsVisible_Parms GlobalSlotsVisible_Parms;

	this->ProcessEvent ( pFnGlobalSlotsVisible, &GlobalSlotsVisible_Parms, NULL );

	return GlobalSlotsVisible_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.StoreSlotsVisible
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherInventoryUI::StoreSlotsVisible ( )
{
	static UFunction* pFnStoreSlotsVisible = NULL;

	if ( ! pFnStoreSlotsVisible )
		pFnStoreSlotsVisible = (UFunction*) UObject::GObjObjects()->Data[ 75368 ];

	UNetherInventoryUI_execStoreSlotsVisible_Parms StoreSlotsVisible_Parms;

	this->ProcessEvent ( pFnStoreSlotsVisible, &StoreSlotsVisible_Parms, NULL );

	return StoreSlotsVisible_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.NothingSelected
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::NothingSelected ( )
{
	static UFunction* pFnNothingSelected = NULL;

	if ( ! pFnNothingSelected )
		pFnNothingSelected = (UFunction*) UObject::GObjObjects()->Data[ 75367 ];

	UNetherInventoryUI_execNothingSelected_Parms NothingSelected_Parms;

	this->ProcessEvent ( pFnNothingSelected, &NothingSelected_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.StoreSlotSelected
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxItemSlot*            Slot                           ( CPF_Parm )

bool UNetherInventoryUI::StoreSlotSelected ( class UGFxItemSlot* Slot )
{
	static UFunction* pFnStoreSlotSelected = NULL;

	if ( ! pFnStoreSlotSelected )
		pFnStoreSlotSelected = (UFunction*) UObject::GObjObjects()->Data[ 75364 ];

	UNetherInventoryUI_execStoreSlotSelected_Parms StoreSlotSelected_Parms;
	StoreSlotSelected_Parms.Slot = Slot;

	this->ProcessEvent ( pFnStoreSlotSelected, &StoreSlotSelected_Parms, NULL );

	return StoreSlotSelected_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.BackPackTooHeavy
// [0x00020102] 
// Parameters infos:

void UNetherInventoryUI::BackPackTooHeavy ( )
{
	static UFunction* pFnBackPackTooHeavy = NULL;

	if ( ! pFnBackPackTooHeavy )
		pFnBackPackTooHeavy = (UFunction*) UObject::GObjObjects()->Data[ 75363 ];

	UNetherInventoryUI_execBackPackTooHeavy_Parms BackPackTooHeavy_Parms;

	this->ProcessEvent ( pFnBackPackTooHeavy, &BackPackTooHeavy_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.NotEnoughRoomInBackPack
// [0x00020102] 
// Parameters infos:

void UNetherInventoryUI::NotEnoughRoomInBackPack ( )
{
	static UFunction* pFnNotEnoughRoomInBackPack = NULL;

	if ( ! pFnNotEnoughRoomInBackPack )
		pFnNotEnoughRoomInBackPack = (UFunction*) UObject::GObjObjects()->Data[ 75362 ];

	UNetherInventoryUI_execNotEnoughRoomInBackPack_Parms NotEnoughRoomInBackPack_Parms;

	this->ProcessEvent ( pFnNotEnoughRoomInBackPack, &NotEnoughRoomInBackPack_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.ResetInventoryUI
// [0x00020102] 
// Parameters infos:

void UNetherInventoryUI::ResetInventoryUI ( )
{
	static UFunction* pFnResetInventoryUI = NULL;

	if ( ! pFnResetInventoryUI )
		pFnResetInventoryUI = (UFunction*) UObject::GObjObjects()->Data[ 75361 ];

	UNetherInventoryUI_execResetInventoryUI_Parms ResetInventoryUI_Parms;

	this->ProcessEvent ( pFnResetInventoryUI, &ResetInventoryUI_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.PurchaseItem
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::PurchaseItem ( class UGFxButton* Button )
{
	static UFunction* pFnPurchaseItem = NULL;

	if ( ! pFnPurchaseItem )
		pFnPurchaseItem = (UFunction*) UObject::GObjObjects()->Data[ 75358 ];

	UNetherInventoryUI_execPurchaseItem_Parms PurchaseItem_Parms;
	PurchaseItem_Parms.Button = Button;

	this->ProcessEvent ( pFnPurchaseItem, &PurchaseItem_Parms, NULL );

	return PurchaseItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.AskToBuyGold
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::AskToBuyGold ( class UGFxButton* Button )
{
	static UFunction* pFnAskToBuyGold = NULL;

	if ( ! pFnAskToBuyGold )
		pFnAskToBuyGold = (UFunction*) UObject::GObjObjects()->Data[ 75355 ];

	UNetherInventoryUI_execAskToBuyGold_Parms AskToBuyGold_Parms;
	AskToBuyGold_Parms.Button = Button;

	this->ProcessEvent ( pFnAskToBuyGold, &AskToBuyGold_Parms, NULL );

	return AskToBuyGold_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.AskToPurchaseItem
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::AskToPurchaseItem ( class UGFxButton* Button )
{
	static UFunction* pFnAskToPurchaseItem = NULL;

	if ( ! pFnAskToPurchaseItem )
		pFnAskToPurchaseItem = (UFunction*) UObject::GObjObjects()->Data[ 75352 ];

	UNetherInventoryUI_execAskToPurchaseItem_Parms AskToPurchaseItem_Parms;
	AskToPurchaseItem_Parms.Button = Button;

	this->ProcessEvent ( pFnAskToPurchaseItem, &AskToPurchaseItem_Parms, NULL );

	return AskToPurchaseItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.SellItem
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::SellItem ( class UGFxButton* Button )
{
	static UFunction* pFnSellItem = NULL;

	if ( ! pFnSellItem )
		pFnSellItem = (UFunction*) UObject::GObjObjects()->Data[ 75349 ];

	UNetherInventoryUI_execSellItem_Parms SellItem_Parms;
	SellItem_Parms.Button = Button;

	this->ProcessEvent ( pFnSellItem, &SellItem_Parms, NULL );

	return SellItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.AskToSellItem
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::AskToSellItem ( class UGFxButton* Button )
{
	static UFunction* pFnAskToSellItem = NULL;

	if ( ! pFnAskToSellItem )
		pFnAskToSellItem = (UFunction*) UObject::GObjObjects()->Data[ 75346 ];

	UNetherInventoryUI_execAskToSellItem_Parms AskToSellItem_Parms;
	AskToSellItem_Parms.Button = Button;

	this->ProcessEvent ( pFnAskToSellItem, &AskToSellItem_Parms, NULL );

	return AskToSellItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.GlobalInventoryButtonClicked
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::GlobalInventoryButtonClicked ( class UGFxButton* Button )
{
	static UFunction* pFnGlobalInventoryButtonClicked = NULL;

	if ( ! pFnGlobalInventoryButtonClicked )
		pFnGlobalInventoryButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 75341 ];

	UNetherInventoryUI_execGlobalInventoryButtonClicked_Parms GlobalInventoryButtonClicked_Parms;
	GlobalInventoryButtonClicked_Parms.Button = Button;

	this->ProcessEvent ( pFnGlobalInventoryButtonClicked, &GlobalInventoryButtonClicked_Parms, NULL );

	return GlobalInventoryButtonClicked_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.MarketplaceButtonClicked
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::MarketplaceButtonClicked ( class UGFxButton* Button )
{
	static UFunction* pFnMarketplaceButtonClicked = NULL;

	if ( ! pFnMarketplaceButtonClicked )
		pFnMarketplaceButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 75336 ];

	UNetherInventoryUI_execMarketplaceButtonClicked_Parms MarketplaceButtonClicked_Parms;
	MarketplaceButtonClicked_Parms.Button = Button;

	this->ProcessEvent ( pFnMarketplaceButtonClicked, &MarketplaceButtonClicked_Parms, NULL );

	return MarketplaceButtonClicked_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.SetCurrentItemToQuickSlot3
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::SetCurrentItemToQuickSlot3 ( class UGFxButton* Button )
{
	static UFunction* pFnSetCurrentItemToQuickSlot3 = NULL;

	if ( ! pFnSetCurrentItemToQuickSlot3 )
		pFnSetCurrentItemToQuickSlot3 = (UFunction*) UObject::GObjObjects()->Data[ 75333 ];

	UNetherInventoryUI_execSetCurrentItemToQuickSlot3_Parms SetCurrentItemToQuickSlot3_Parms;
	SetCurrentItemToQuickSlot3_Parms.Button = Button;

	this->ProcessEvent ( pFnSetCurrentItemToQuickSlot3, &SetCurrentItemToQuickSlot3_Parms, NULL );

	return SetCurrentItemToQuickSlot3_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.SetCurrentItemToQuickSlot2
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::SetCurrentItemToQuickSlot2 ( class UGFxButton* Button )
{
	static UFunction* pFnSetCurrentItemToQuickSlot2 = NULL;

	if ( ! pFnSetCurrentItemToQuickSlot2 )
		pFnSetCurrentItemToQuickSlot2 = (UFunction*) UObject::GObjObjects()->Data[ 75330 ];

	UNetherInventoryUI_execSetCurrentItemToQuickSlot2_Parms SetCurrentItemToQuickSlot2_Parms;
	SetCurrentItemToQuickSlot2_Parms.Button = Button;

	this->ProcessEvent ( pFnSetCurrentItemToQuickSlot2, &SetCurrentItemToQuickSlot2_Parms, NULL );

	return SetCurrentItemToQuickSlot2_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.SetCurrentItemToQuickSlot1
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::SetCurrentItemToQuickSlot1 ( class UGFxButton* Button )
{
	static UFunction* pFnSetCurrentItemToQuickSlot1 = NULL;

	if ( ! pFnSetCurrentItemToQuickSlot1 )
		pFnSetCurrentItemToQuickSlot1 = (UFunction*) UObject::GObjObjects()->Data[ 75327 ];

	UNetherInventoryUI_execSetCurrentItemToQuickSlot1_Parms SetCurrentItemToQuickSlot1_Parms;
	SetCurrentItemToQuickSlot1_Parms.Button = Button;

	this->ProcessEvent ( pFnSetCurrentItemToQuickSlot1, &SetCurrentItemToQuickSlot1_Parms, NULL );

	return SetCurrentItemToQuickSlot1_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.SetCurrentItemToQuickSlot0
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::SetCurrentItemToQuickSlot0 ( class UGFxButton* Button )
{
	static UFunction* pFnSetCurrentItemToQuickSlot0 = NULL;

	if ( ! pFnSetCurrentItemToQuickSlot0 )
		pFnSetCurrentItemToQuickSlot0 = (UFunction*) UObject::GObjObjects()->Data[ 75324 ];

	UNetherInventoryUI_execSetCurrentItemToQuickSlot0_Parms SetCurrentItemToQuickSlot0_Parms;
	SetCurrentItemToQuickSlot0_Parms.Button = Button;

	this->ProcessEvent ( pFnSetCurrentItemToQuickSlot0, &SetCurrentItemToQuickSlot0_Parms, NULL );

	return SetCurrentItemToQuickSlot0_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.RefreshFilters
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::RefreshFilters ( )
{
	static UFunction* pFnRefreshFilters = NULL;

	if ( ! pFnRefreshFilters )
		pFnRefreshFilters = (UFunction*) UObject::GObjObjects()->Data[ 75304 ];

	UNetherInventoryUI_execRefreshFilters_Parms RefreshFilters_Parms;

	this->ProcessEvent ( pFnRefreshFilters, &RefreshFilters_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.TurnOnAllFilters
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::TurnOnAllFilters ( )
{
	static UFunction* pFnTurnOnAllFilters = NULL;

	if ( ! pFnTurnOnAllFilters )
		pFnTurnOnAllFilters = (UFunction*) UObject::GObjObjects()->Data[ 75303 ];

	UNetherInventoryUI_execTurnOnAllFilters_Parms TurnOnAllFilters_Parms;

	this->ProcessEvent ( pFnTurnOnAllFilters, &TurnOnAllFilters_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.TurnOffAllFilters
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::TurnOffAllFilters ( )
{
	static UFunction* pFnTurnOffAllFilters = NULL;

	if ( ! pFnTurnOffAllFilters )
		pFnTurnOffAllFilters = (UFunction*) UObject::GObjObjects()->Data[ 75308 ];

	UNetherInventoryUI_execTurnOffAllFilters_Parms TurnOffAllFilters_Parms;

	this->ProcessEvent ( pFnTurnOffAllFilters, &TurnOffAllFilters_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.ToggleAccessoriesFilter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ToggleAccessoriesFilter ( class UGFxButton* Button )
{
	static UFunction* pFnToggleAccessoriesFilter = NULL;

	if ( ! pFnToggleAccessoriesFilter )
		pFnToggleAccessoriesFilter = (UFunction*) UObject::GObjObjects()->Data[ 75321 ];

	UNetherInventoryUI_execToggleAccessoriesFilter_Parms ToggleAccessoriesFilter_Parms;
	ToggleAccessoriesFilter_Parms.Button = Button;

	this->ProcessEvent ( pFnToggleAccessoriesFilter, &ToggleAccessoriesFilter_Parms, NULL );

	return ToggleAccessoriesFilter_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ToggleFoodFilter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ToggleFoodFilter ( class UGFxButton* Button )
{
	static UFunction* pFnToggleFoodFilter = NULL;

	if ( ! pFnToggleFoodFilter )
		pFnToggleFoodFilter = (UFunction*) UObject::GObjObjects()->Data[ 75318 ];

	UNetherInventoryUI_execToggleFoodFilter_Parms ToggleFoodFilter_Parms;
	ToggleFoodFilter_Parms.Button = Button;

	this->ProcessEvent ( pFnToggleFoodFilter, &ToggleFoodFilter_Parms, NULL );

	return ToggleFoodFilter_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ToggleHealthFilter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ToggleHealthFilter ( class UGFxButton* Button )
{
	static UFunction* pFnToggleHealthFilter = NULL;

	if ( ! pFnToggleHealthFilter )
		pFnToggleHealthFilter = (UFunction*) UObject::GObjObjects()->Data[ 75315 ];

	UNetherInventoryUI_execToggleHealthFilter_Parms ToggleHealthFilter_Parms;
	ToggleHealthFilter_Parms.Button = Button;

	this->ProcessEvent ( pFnToggleHealthFilter, &ToggleHealthFilter_Parms, NULL );

	return ToggleHealthFilter_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ToggleMeleeFilter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ToggleMeleeFilter ( class UGFxButton* Button )
{
	static UFunction* pFnToggleMeleeFilter = NULL;

	if ( ! pFnToggleMeleeFilter )
		pFnToggleMeleeFilter = (UFunction*) UObject::GObjObjects()->Data[ 75312 ];

	UNetherInventoryUI_execToggleMeleeFilter_Parms ToggleMeleeFilter_Parms;
	ToggleMeleeFilter_Parms.Button = Button;

	this->ProcessEvent ( pFnToggleMeleeFilter, &ToggleMeleeFilter_Parms, NULL );

	return ToggleMeleeFilter_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ToggleAmmoFilter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ToggleAmmoFilter ( class UGFxButton* Button )
{
	static UFunction* pFnToggleAmmoFilter = NULL;

	if ( ! pFnToggleAmmoFilter )
		pFnToggleAmmoFilter = (UFunction*) UObject::GObjObjects()->Data[ 75309 ];

	UNetherInventoryUI_execToggleAmmoFilter_Parms ToggleAmmoFilter_Parms;
	ToggleAmmoFilter_Parms.Button = Button;

	this->ProcessEvent ( pFnToggleAmmoFilter, &ToggleAmmoFilter_Parms, NULL );

	return ToggleAmmoFilter_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ToggleRangedFilter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ToggleRangedFilter ( class UGFxButton* Button )
{
	static UFunction* pFnToggleRangedFilter = NULL;

	if ( ! pFnToggleRangedFilter )
		pFnToggleRangedFilter = (UFunction*) UObject::GObjObjects()->Data[ 75305 ];

	UNetherInventoryUI_execToggleRangedFilter_Parms ToggleRangedFilter_Parms;
	ToggleRangedFilter_Parms.Button = Button;

	this->ProcessEvent ( pFnToggleRangedFilter, &ToggleRangedFilter_Parms, NULL );

	return ToggleRangedFilter_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ToggleAllFilter
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ToggleAllFilter ( class UGFxButton* Button )
{
	static UFunction* pFnToggleAllFilter = NULL;

	if ( ! pFnToggleAllFilter )
		pFnToggleAllFilter = (UFunction*) UObject::GObjObjects()->Data[ 75300 ];

	UNetherInventoryUI_execToggleAllFilter_Parms ToggleAllFilter_Parms;
	ToggleAllFilter_Parms.Button = Button;

	this->ProcessEvent ( pFnToggleAllFilter, &ToggleAllFilter_Parms, NULL );

	return ToggleAllFilter_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ConsumeCurrentlySelectedSlotItem
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::ConsumeCurrentlySelectedSlotItem ( class UGFxButton* Button )
{
	static UFunction* pFnConsumeCurrentlySelectedSlotItem = NULL;

	if ( ! pFnConsumeCurrentlySelectedSlotItem )
		pFnConsumeCurrentlySelectedSlotItem = (UFunction*) UObject::GObjObjects()->Data[ 75296 ];

	UNetherInventoryUI_execConsumeCurrentlySelectedSlotItem_Parms ConsumeCurrentlySelectedSlotItem_Parms;
	ConsumeCurrentlySelectedSlotItem_Parms.Button = Button;

	this->ProcessEvent ( pFnConsumeCurrentlySelectedSlotItem, &ConsumeCurrentlySelectedSlotItem_Parms, NULL );

	return ConsumeCurrentlySelectedSlotItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ItemDroppedSuccessfully
// [0x00020002] 
// Parameters infos:

void UNetherInventoryUI::ItemDroppedSuccessfully ( )
{
	static UFunction* pFnItemDroppedSuccessfully = NULL;

	if ( ! pFnItemDroppedSuccessfully )
		pFnItemDroppedSuccessfully = (UFunction*) UObject::GObjObjects()->Data[ 75295 ];

	UNetherInventoryUI_execItemDroppedSuccessfully_Parms ItemDroppedSuccessfully_Parms;

	this->ProcessEvent ( pFnItemDroppedSuccessfully, &ItemDroppedSuccessfully_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.UnloadCurrentlySelectedGun
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::UnloadCurrentlySelectedGun ( class UGFxButton* Button )
{
	static UFunction* pFnUnloadCurrentlySelectedGun = NULL;

	if ( ! pFnUnloadCurrentlySelectedGun )
		pFnUnloadCurrentlySelectedGun = (UFunction*) UObject::GObjObjects()->Data[ 75291 ];

	UNetherInventoryUI_execUnloadCurrentlySelectedGun_Parms UnloadCurrentlySelectedGun_Parms;
	UnloadCurrentlySelectedGun_Parms.Button = Button;

	this->ProcessEvent ( pFnUnloadCurrentlySelectedGun, &UnloadCurrentlySelectedGun_Parms, NULL );

	return UnloadCurrentlySelectedGun_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.DropCurrentlySelectedSlotItem
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::DropCurrentlySelectedSlotItem ( class UGFxButton* Button )
{
	static UFunction* pFnDropCurrentlySelectedSlotItem = NULL;

	if ( ! pFnDropCurrentlySelectedSlotItem )
		pFnDropCurrentlySelectedSlotItem = (UFunction*) UObject::GObjObjects()->Data[ 75287 ];

	UNetherInventoryUI_execDropCurrentlySelectedSlotItem_Parms DropCurrentlySelectedSlotItem_Parms;
	DropCurrentlySelectedSlotItem_Parms.Button = Button;

	this->ProcessEvent ( pFnDropCurrentlySelectedSlotItem, &DropCurrentlySelectedSlotItem_Parms, NULL );

	return DropCurrentlySelectedSlotItem_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.SetCurrentlySelectedSlot
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxItemSlot*            Slot                           ( CPF_Parm )

void UNetherInventoryUI::SetCurrentlySelectedSlot ( class UGFxItemSlot* Slot )
{
	static UFunction* pFnSetCurrentlySelectedSlot = NULL;

	if ( ! pFnSetCurrentlySelectedSlot )
		pFnSetCurrentlySelectedSlot = (UFunction*) UObject::GObjObjects()->Data[ 75231 ];

	UNetherInventoryUI_execSetCurrentlySelectedSlot_Parms SetCurrentlySelectedSlot_Parms;
	SetCurrentlySelectedSlot_Parms.Slot = Slot;

	this->ProcessEvent ( pFnSetCurrentlySelectedSlot, &SetCurrentlySelectedSlot_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.RightMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherInventoryUI::RightMouseDown ( float X, float Y )
{
	static UFunction* pFnRightMouseDown = NULL;

	if ( ! pFnRightMouseDown )
		pFnRightMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 75283 ];

	UNetherInventoryUI_execRightMouseDown_Parms RightMouseDown_Parms;
	RightMouseDown_Parms.X = X;
	RightMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnRightMouseDown, &RightMouseDown_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.PositionButtonList
// [0x00442003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          XBounds                        ( CPF_Parm )
// float                          YBounds                        ( CPF_Parm )
// TArray< class UGFxButton* >    ButtonList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNetherInventoryUI::PositionButtonList ( float X, float Y, float XBounds, float YBounds, TArray< class UGFxButton* >* ButtonList )
{
	static UFunction* pFnPositionButtonList = NULL;

	if ( ! pFnPositionButtonList )
		pFnPositionButtonList = (UFunction*) UObject::GObjObjects()->Data[ 75271 ];

	UNetherInventoryUI_execPositionButtonList_Parms PositionButtonList_Parms;
	PositionButtonList_Parms.X = X;
	PositionButtonList_Parms.Y = Y;
	PositionButtonList_Parms.XBounds = XBounds;
	PositionButtonList_Parms.YBounds = YBounds;

	this->ProcessEvent ( pFnPositionButtonList, &PositionButtonList_Parms, NULL );

	if ( ButtonList )
		memcpy ( ButtonList, &PositionButtonList_Parms.ButtonList, 0x10 );
};

// Function NetherGame.NetherInventoryUI.FilterSlots
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// TArray< class UGFxItemSlot* >  Slots                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNetherInventoryUI::FilterSlots ( TArray< class UGFxItemSlot* >* Slots )
{
	static UFunction* pFnFilterSlots = NULL;

	if ( ! pFnFilterSlots )
		pFnFilterSlots = (UFunction*) UObject::GObjObjects()->Data[ 75265 ];

	UNetherInventoryUI_execFilterSlots_Parms FilterSlots_Parms;

	this->ProcessEvent ( pFnFilterSlots, &FilterSlots_Parms, NULL );

	if ( Slots )
		memcpy ( Slots, &FilterSlots_Parms.Slots, 0x10 );
};

// Function NetherGame.NetherInventoryUI.TryToSwapItems
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxItemSlot*            SlotA                          ( CPF_Parm )
// class UGFxItemSlot*            SlotB                          ( CPF_Parm )

bool UNetherInventoryUI::TryToSwapItems ( class UGFxItemSlot* SlotA, class UGFxItemSlot* SlotB )
{
	static UFunction* pFnTryToSwapItems = NULL;

	if ( ! pFnTryToSwapItems )
		pFnTryToSwapItems = (UFunction*) UObject::GObjObjects()->Data[ 75238 ];

	UNetherInventoryUI_execTryToSwapItems_Parms TryToSwapItems_Parms;
	TryToSwapItems_Parms.SlotA = SlotA;
	TryToSwapItems_Parms.SlotB = SlotB;

	this->ProcessEvent ( pFnTryToSwapItems, &TryToSwapItems_Parms, NULL );

	return TryToSwapItems_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.KeyDown
// [0x00020002] 
// Parameters infos:
// int                            KeyCode                        ( CPF_Parm )

void UNetherInventoryUI::KeyDown ( int KeyCode )
{
	static UFunction* pFnKeyDown = NULL;

	if ( ! pFnKeyDown )
		pFnKeyDown = (UFunction*) UObject::GObjObjects()->Data[ 75258 ];

	UNetherInventoryUI_execKeyDown_Parms KeyDown_Parms;
	KeyDown_Parms.KeyCode = KeyCode;

	this->ProcessEvent ( pFnKeyDown, &KeyDown_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.LeftMouseUp
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherInventoryUI::LeftMouseUp ( float X, float Y )
{
	static UFunction* pFnLeftMouseUp = NULL;

	if ( ! pFnLeftMouseUp )
		pFnLeftMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 75254 ];

	UNetherInventoryUI_execLeftMouseUp_Parms LeftMouseUp_Parms;
	LeftMouseUp_Parms.X = X;
	LeftMouseUp_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseUp, &LeftMouseUp_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.EquipRightArmAccessory
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::EquipRightArmAccessory ( class UGFxButton* Button )
{
	static UFunction* pFnEquipRightArmAccessory = NULL;

	if ( ! pFnEquipRightArmAccessory )
		pFnEquipRightArmAccessory = (UFunction*) UObject::GObjObjects()->Data[ 75251 ];

	UNetherInventoryUI_execEquipRightArmAccessory_Parms EquipRightArmAccessory_Parms;
	EquipRightArmAccessory_Parms.Button = Button;

	this->ProcessEvent ( pFnEquipRightArmAccessory, &EquipRightArmAccessory_Parms, NULL );

	return EquipRightArmAccessory_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.EquipLeftArmAccessory
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::EquipLeftArmAccessory ( class UGFxButton* Button )
{
	static UFunction* pFnEquipLeftArmAccessory = NULL;

	if ( ! pFnEquipLeftArmAccessory )
		pFnEquipLeftArmAccessory = (UFunction*) UObject::GObjObjects()->Data[ 75248 ];

	UNetherInventoryUI_execEquipLeftArmAccessory_Parms EquipLeftArmAccessory_Parms;
	EquipLeftArmAccessory_Parms.Button = Button;

	this->ProcessEvent ( pFnEquipLeftArmAccessory, &EquipLeftArmAccessory_Parms, NULL );

	return EquipLeftArmAccessory_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.EquipHeadAccessory
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::EquipHeadAccessory ( class UGFxButton* Button )
{
	static UFunction* pFnEquipHeadAccessory = NULL;

	if ( ! pFnEquipHeadAccessory )
		pFnEquipHeadAccessory = (UFunction*) UObject::GObjObjects()->Data[ 75245 ];

	UNetherInventoryUI_execEquipHeadAccessory_Parms EquipHeadAccessory_Parms;
	EquipHeadAccessory_Parms.Button = Button;

	this->ProcessEvent ( pFnEquipHeadAccessory, &EquipHeadAccessory_Parms, NULL );

	return EquipHeadAccessory_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.EquipMeleeWeapon
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::EquipMeleeWeapon ( class UGFxButton* Button )
{
	static UFunction* pFnEquipMeleeWeapon = NULL;

	if ( ! pFnEquipMeleeWeapon )
		pFnEquipMeleeWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75242 ];

	UNetherInventoryUI_execEquipMeleeWeapon_Parms EquipMeleeWeapon_Parms;
	EquipMeleeWeapon_Parms.Button = Button;

	this->ProcessEvent ( pFnEquipMeleeWeapon, &EquipMeleeWeapon_Parms, NULL );

	return EquipMeleeWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.EquipSidearmWeapon
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::EquipSidearmWeapon ( class UGFxButton* Button )
{
	static UFunction* pFnEquipSidearmWeapon = NULL;

	if ( ! pFnEquipSidearmWeapon )
		pFnEquipSidearmWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75239 ];

	UNetherInventoryUI_execEquipSidearmWeapon_Parms EquipSidearmWeapon_Parms;
	EquipSidearmWeapon_Parms.Button = Button;

	this->ProcessEvent ( pFnEquipSidearmWeapon, &EquipSidearmWeapon_Parms, NULL );

	return EquipSidearmWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.EquipRangedWeapon
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherInventoryUI::EquipRangedWeapon ( class UGFxButton* Button )
{
	static UFunction* pFnEquipRangedWeapon = NULL;

	if ( ! pFnEquipRangedWeapon )
		pFnEquipRangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 75235 ];

	UNetherInventoryUI_execEquipRangedWeapon_Parms EquipRangedWeapon_Parms;
	EquipRangedWeapon_Parms.Button = Button;

	this->ProcessEvent ( pFnEquipRangedWeapon, &EquipRangedWeapon_Parms, NULL );

	return EquipRangedWeapon_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.CheckIfMouseOverButtons
// [0x00080002] 
// Parameters infos:
// class UGFxButton*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxButton* UNetherInventoryUI::CheckIfMouseOverButtons ( )
{
	static UFunction* pFnCheckIfMouseOverButtons = NULL;

	if ( ! pFnCheckIfMouseOverButtons )
		pFnCheckIfMouseOverButtons = (UFunction*) UObject::GObjObjects()->Data[ 75232 ];

	UNetherInventoryUI_execCheckIfMouseOverButtons_Parms CheckIfMouseOverButtons_Parms;

	this->ProcessEvent ( pFnCheckIfMouseOverButtons, &CheckIfMouseOverButtons_Parms, NULL );

	return CheckIfMouseOverButtons_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.LeftMouseDown
// [0x00820002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherInventoryUI::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 75225 ];

	UNetherInventoryUI_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.CheckIfMouseOverItemSlot
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxItemSlot*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGFxItemSlot* UNetherInventoryUI::CheckIfMouseOverItemSlot ( )
{
	static UFunction* pFnCheckIfMouseOverItemSlot = NULL;

	if ( ! pFnCheckIfMouseOverItemSlot )
		pFnCheckIfMouseOverItemSlot = (UFunction*) UObject::GObjObjects()->Data[ 75222 ];

	UNetherInventoryUI_execCheckIfMouseOverItemSlot_Parms CheckIfMouseOverItemSlot_Parms;

	this->ProcessEvent ( pFnCheckIfMouseOverItemSlot, &CheckIfMouseOverItemSlot_Parms, NULL );

	return CheckIfMouseOverItemSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.UpdateItemInfo
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UGFxItemSlot*            Slot                           ( CPF_Parm )

void UNetherInventoryUI::UpdateItemInfo ( class UGFxItemSlot* Slot )
{
	static UFunction* pFnUpdateItemInfo = NULL;

	if ( ! pFnUpdateItemInfo )
		pFnUpdateItemInfo = (UFunction*) UObject::GObjObjects()->Data[ 75216 ];

	UNetherInventoryUI_execUpdateItemInfo_Parms UpdateItemInfo_Parms;
	UpdateItemInfo_Parms.Slot = Slot;

	this->ProcessEvent ( pFnUpdateItemInfo, &UpdateItemInfo_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.FillGlobalSlotsWithItems
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::FillGlobalSlotsWithItems ( )
{
	static UFunction* pFnFillGlobalSlotsWithItems = NULL;

	if ( ! pFnFillGlobalSlotsWithItems )
		pFnFillGlobalSlotsWithItems = (UFunction*) UObject::GObjObjects()->Data[ 75116 ];

	UNetherInventoryUI_execFillGlobalSlotsWithItems_Parms FillGlobalSlotsWithItems_Parms;

	this->ProcessEvent ( pFnFillGlobalSlotsWithItems, &FillGlobalSlotsWithItems_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.FillStoreSlotsWithItems
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::FillStoreSlotsWithItems ( )
{
	static UFunction* pFnFillStoreSlotsWithItems = NULL;

	if ( ! pFnFillStoreSlotsWithItems )
		pFnFillStoreSlotsWithItems = (UFunction*) UObject::GObjObjects()->Data[ 75200 ];

	UNetherInventoryUI_execFillStoreSlotsWithItems_Parms FillStoreSlotsWithItems_Parms;

	this->ProcessEvent ( pFnFillStoreSlotsWithItems, &FillStoreSlotsWithItems_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.FillBackPackSlotsWithItems
// [0x00044003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  Silently                       ( CPF_OptionalParm | CPF_Parm )

void UNetherInventoryUI::FillBackPackSlotsWithItems ( unsigned long Silently )
{
	static UFunction* pFnFillBackPackSlotsWithItems = NULL;

	if ( ! pFnFillBackPackSlotsWithItems )
		pFnFillBackPackSlotsWithItems = (UFunction*) UObject::GObjObjects()->Data[ 75118 ];

	UNetherInventoryUI_execFillBackPackSlotsWithItems_Parms FillBackPackSlotsWithItems_Parms;
	FillBackPackSlotsWithItems_Parms.Silently = Silently;

	this->ProcessEvent ( pFnFillBackPackSlotsWithItems, &FillBackPackSlotsWithItems_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.AddItemToBackPack
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InvID                          ( CPF_Parm )
// int                            InvCount                       ( CPF_Parm )
// int                            SlotNumber                     ( CPF_Parm )
// unsigned long                  Silently                       ( CPF_OptionalParm | CPF_Parm )

bool UNetherInventoryUI::AddItemToBackPack ( int InvID, int InvCount, int SlotNumber, unsigned long Silently )
{
	static UFunction* pFnAddItemToBackPack = NULL;

	if ( ! pFnAddItemToBackPack )
		pFnAddItemToBackPack = (UFunction*) UObject::GObjObjects()->Data[ 75188 ];

	UNetherInventoryUI_execAddItemToBackPack_Parms AddItemToBackPack_Parms;
	AddItemToBackPack_Parms.InvID = InvID;
	AddItemToBackPack_Parms.InvCount = InvCount;
	AddItemToBackPack_Parms.SlotNumber = SlotNumber;
	AddItemToBackPack_Parms.Silently = Silently;

	this->ProcessEvent ( pFnAddItemToBackPack, &AddItemToBackPack_Parms, NULL );

	return AddItemToBackPack_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.MouseMoved
// [0x00820002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherInventoryUI::MouseMoved ( float X, float Y )
{
	static UFunction* pFnMouseMoved = NULL;

	if ( ! pFnMouseMoved )
		pFnMouseMoved = (UFunction*) UObject::GObjObjects()->Data[ 75184 ];

	UNetherInventoryUI_execMouseMoved_Parms MouseMoved_Parms;
	MouseMoved_Parms.X = X;
	MouseMoved_Parms.Y = Y;

	this->ProcessEvent ( pFnMouseMoved, &MouseMoved_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UNetherInventoryUI::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 75175 ];

	UNetherInventoryUI_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.ClearTempButtons
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::ClearTempButtons ( )
{
	static UFunction* pFnClearTempButtons = NULL;

	if ( ! pFnClearTempButtons )
		pFnClearTempButtons = (UFunction*) UObject::GObjObjects()->Data[ 75173 ];

	UNetherInventoryUI_execClearTempButtons_Parms ClearTempButtons_Parms;

	this->ProcessEvent ( pFnClearTempButtons, &ClearTempButtons_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.BuildButtonList
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxItemSlot*            ItemSlot                       ( CPF_Parm )
// class UGFxNetherObject*        Parent                         ( CPF_Parm )
// TArray< class UGFxButton* >    ButtonList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UNetherInventoryUI::BuildButtonList ( class UGFxItemSlot* ItemSlot, class UGFxNetherObject* Parent, TArray< class UGFxButton* >* ButtonList )
{
	static UFunction* pFnBuildButtonList = NULL;

	if ( ! pFnBuildButtonList )
		pFnBuildButtonList = (UFunction*) UObject::GObjObjects()->Data[ 75162 ];

	UNetherInventoryUI_execBuildButtonList_Parms BuildButtonList_Parms;
	BuildButtonList_Parms.ItemSlot = ItemSlot;
	BuildButtonList_Parms.Parent = Parent;

	this->ProcessEvent ( pFnBuildButtonList, &BuildButtonList_Parms, NULL );

	if ( ButtonList )
		memcpy ( ButtonList, &BuildButtonList_Parms.ButtonList, 0x10 );

	return BuildButtonList_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.ResizeSlots
// [0x00846003] ( FUNC_Final )
// Parameters infos:
// TArray< class UGFxItemSlot* >  Slots                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            Count                          ( CPF_Parm )
// class UGFxScrollWindow*        Window                         ( CPF_Parm )
// int                            RowLen                         ( CPF_OptionalParm | CPF_Parm )
// int                            SlotPadding                    ( CPF_OptionalParm | CPF_Parm )

void UNetherInventoryUI::ResizeSlots ( TArray< class UGFxItemSlot* > Slots, int Count, class UGFxScrollWindow* Window, int RowLen, int SlotPadding )
{
	static UFunction* pFnResizeSlots = NULL;

	if ( ! pFnResizeSlots )
		pFnResizeSlots = (UFunction*) UObject::GObjObjects()->Data[ 75129 ];

	UNetherInventoryUI_execResizeSlots_Parms ResizeSlots_Parms;
	memcpy ( &ResizeSlots_Parms.Slots, &Slots, 0x10 );
	ResizeSlots_Parms.Count = Count;
	ResizeSlots_Parms.Window = Window;
	ResizeSlots_Parms.RowLen = RowLen;
	ResizeSlots_Parms.SlotPadding = SlotPadding;

	this->ProcessEvent ( pFnResizeSlots, &ResizeSlots_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.CreateBackpackSlots
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            NumSlotsIn                     ( CPF_Parm )

void UNetherInventoryUI::CreateBackpackSlots ( int NumSlotsIn )
{
	static UFunction* pFnCreateBackpackSlots = NULL;

	if ( ! pFnCreateBackpackSlots )
		pFnCreateBackpackSlots = (UFunction*) UObject::GObjObjects()->Data[ 75144 ];

	UNetherInventoryUI_execCreateBackpackSlots_Parms CreateBackpackSlots_Parms;
	CreateBackpackSlots_Parms.NumSlotsIn = NumSlotsIn;

	this->ProcessEvent ( pFnCreateBackpackSlots, &CreateBackpackSlots_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.ClearSlots
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// class UGFxScrollWindow*        Window                         ( CPF_Parm )
// TArray< class UGFxItemSlot* >  Slots                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNetherInventoryUI::ClearSlots ( class UGFxScrollWindow* Window, TArray< class UGFxItemSlot* >* Slots )
{
	static UFunction* pFnClearSlots = NULL;

	if ( ! pFnClearSlots )
		pFnClearSlots = (UFunction*) UObject::GObjObjects()->Data[ 75139 ];

	UNetherInventoryUI_execClearSlots_Parms ClearSlots_Parms;
	ClearSlots_Parms.Window = Window;

	this->ProcessEvent ( pFnClearSlots, &ClearSlots_Parms, NULL );

	if ( Slots )
		memcpy ( Slots, &ClearSlots_Parms.Slots, 0x10 );
};

// Function NetherGame.NetherInventoryUI.RefreshGlobalSlots
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::RefreshGlobalSlots ( )
{
	static UFunction* pFnRefreshGlobalSlots = NULL;

	if ( ! pFnRefreshGlobalSlots )
		pFnRefreshGlobalSlots = (UFunction*) UObject::GObjObjects()->Data[ 75137 ];

	UNetherInventoryUI_execRefreshGlobalSlots_Parms RefreshGlobalSlots_Parms;

	this->ProcessEvent ( pFnRefreshGlobalSlots, &RefreshGlobalSlots_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.RefreshBackpackSlots
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::RefreshBackpackSlots ( )
{
	static UFunction* pFnRefreshBackpackSlots = NULL;

	if ( ! pFnRefreshBackpackSlots )
		pFnRefreshBackpackSlots = (UFunction*) UObject::GObjObjects()->Data[ 75135 ];

	UNetherInventoryUI_execRefreshBackpackSlots_Parms RefreshBackpackSlots_Parms;

	this->ProcessEvent ( pFnRefreshBackpackSlots, &RefreshBackpackSlots_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.CreateStoreSlots
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            NumSlotsIn                     ( CPF_Parm )

void UNetherInventoryUI::CreateStoreSlots ( int NumSlotsIn )
{
	static UFunction* pFnCreateStoreSlots = NULL;

	if ( ! pFnCreateStoreSlots )
		pFnCreateStoreSlots = (UFunction*) UObject::GObjObjects()->Data[ 75130 ];

	UNetherInventoryUI_execCreateStoreSlots_Parms CreateStoreSlots_Parms;
	CreateStoreSlots_Parms.NumSlotsIn = NumSlotsIn;

	this->ProcessEvent ( pFnCreateStoreSlots, &CreateStoreSlots_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.CreateGlobalSlots
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            NumSlotsIn                     ( CPF_Parm )

void UNetherInventoryUI::CreateGlobalSlots ( int NumSlotsIn )
{
	static UFunction* pFnCreateGlobalSlots = NULL;

	if ( ! pFnCreateGlobalSlots )
		pFnCreateGlobalSlots = (UFunction*) UObject::GObjObjects()->Data[ 75115 ];

	UNetherInventoryUI_execCreateGlobalSlots_Parms CreateGlobalSlots_Parms;
	CreateGlobalSlots_Parms.NumSlotsIn = NumSlotsIn;

	this->ProcessEvent ( pFnCreateGlobalSlots, &CreateGlobalSlots_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.HideGlobalInventoryUI
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::HideGlobalInventoryUI ( )
{
	static UFunction* pFnHideGlobalInventoryUI = NULL;

	if ( ! pFnHideGlobalInventoryUI )
		pFnHideGlobalInventoryUI = (UFunction*) UObject::GObjObjects()->Data[ 75117 ];

	UNetherInventoryUI_execHideGlobalInventoryUI_Parms HideGlobalInventoryUI_Parms;

	this->ProcessEvent ( pFnHideGlobalInventoryUI, &HideGlobalInventoryUI_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.SetCurrentItemToQuickSlot
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIndex                      ( CPF_Parm )

bool UNetherInventoryUI::SetCurrentItemToQuickSlot ( int SlotIndex )
{
	static UFunction* pFnSetCurrentItemToQuickSlot = NULL;

	if ( ! pFnSetCurrentItemToQuickSlot )
		pFnSetCurrentItemToQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 75122 ];

	UNetherInventoryUI_execSetCurrentItemToQuickSlot_Parms SetCurrentItemToQuickSlot_Parms;
	SetCurrentItemToQuickSlot_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnSetCurrentItemToQuickSlot, &SetCurrentItemToQuickSlot_Parms, NULL );

	return SetCurrentItemToQuickSlot_Parms.ReturnValue;
};

// Function NetherGame.NetherInventoryUI.RefreshStatusBox
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherInventoryUI::RefreshStatusBox ( )
{
	static UFunction* pFnRefreshStatusBox = NULL;

	if ( ! pFnRefreshStatusBox )
		pFnRefreshStatusBox = (UFunction*) UObject::GObjObjects()->Data[ 75119 ];

	UNetherInventoryUI_execRefreshStatusBox_Parms RefreshStatusBox_Parms;

	this->ProcessEvent ( pFnRefreshStatusBox, &RefreshStatusBox_Parms, NULL );
};

// Function NetherGame.NetherInventoryUI.Init
// [0x00824002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherInventoryUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 75108 ];

	UNetherInventoryUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NStore.GetTemplateSalePrice
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TemplateClass                  ( CPF_Parm )

float ANStore::GetTemplateSalePrice ( class UClass* TemplateClass )
{
	static UFunction* pFnGetTemplateSalePrice = NULL;

	if ( ! pFnGetTemplateSalePrice )
		pFnGetTemplateSalePrice = (UFunction*) UObject::GObjObjects()->Data[ 80710 ];

	ANStore_execGetTemplateSalePrice_Parms GetTemplateSalePrice_Parms;
	GetTemplateSalePrice_Parms.TemplateClass = TemplateClass;

	this->ProcessEvent ( pFnGetTemplateSalePrice, &GetTemplateSalePrice_Parms, NULL );

	return GetTemplateSalePrice_Parms.ReturnValue;
};

// Function NetherGame.NStore.GetTemplatePremiumPrice
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TemplateClass                  ( CPF_Parm )

float ANStore::GetTemplatePremiumPrice ( class UClass* TemplateClass )
{
	static UFunction* pFnGetTemplatePremiumPrice = NULL;

	if ( ! pFnGetTemplatePremiumPrice )
		pFnGetTemplatePremiumPrice = (UFunction*) UObject::GObjObjects()->Data[ 75401 ];

	ANStore_execGetTemplatePremiumPrice_Parms GetTemplatePremiumPrice_Parms;
	GetTemplatePremiumPrice_Parms.TemplateClass = TemplateClass;

	this->ProcessEvent ( pFnGetTemplatePremiumPrice, &GetTemplatePremiumPrice_Parms, NULL );

	return GetTemplatePremiumPrice_Parms.ReturnValue;
};

// Function NetherGame.NStore.GetTemplatePrice
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TemplateClass                  ( CPF_Parm )

float ANStore::GetTemplatePrice ( class UClass* TemplateClass )
{
	static UFunction* pFnGetTemplatePrice = NULL;

	if ( ! pFnGetTemplatePrice )
		pFnGetTemplatePrice = (UFunction*) UObject::GObjObjects()->Data[ 80704 ];

	ANStore_execGetTemplatePrice_Parms GetTemplatePrice_Parms;
	GetTemplatePrice_Parms.TemplateClass = TemplateClass;

	this->ProcessEvent ( pFnGetTemplatePrice, &GetTemplatePrice_Parms, NULL );

	return GetTemplatePrice_Parms.ReturnValue;
};

// Function NetherGame.NStore.GetInventorySalePrice
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InvClass                       ( CPF_Parm )

float ANStore::GetInventorySalePrice ( class UClass* InvClass )
{
	static UFunction* pFnGetInventorySalePrice = NULL;

	if ( ! pFnGetInventorySalePrice )
		pFnGetInventorySalePrice = (UFunction*) UObject::GObjObjects()->Data[ 75429 ];

	ANStore_execGetInventorySalePrice_Parms GetInventorySalePrice_Parms;
	GetInventorySalePrice_Parms.InvClass = InvClass;

	this->ProcessEvent ( pFnGetInventorySalePrice, &GetInventorySalePrice_Parms, NULL );

	return GetInventorySalePrice_Parms.ReturnValue;
};

// Function NetherGame.NStore.GetInventoryPremiumPrice
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InvClass                       ( CPF_Parm )

float ANStore::GetInventoryPremiumPrice ( class UClass* InvClass )
{
	static UFunction* pFnGetInventoryPremiumPrice = NULL;

	if ( ! pFnGetInventoryPremiumPrice )
		pFnGetInventoryPremiumPrice = (UFunction*) UObject::GObjObjects()->Data[ 75210 ];

	ANStore_execGetInventoryPremiumPrice_Parms GetInventoryPremiumPrice_Parms;
	GetInventoryPremiumPrice_Parms.InvClass = InvClass;

	this->ProcessEvent ( pFnGetInventoryPremiumPrice, &GetInventoryPremiumPrice_Parms, NULL );

	return GetInventoryPremiumPrice_Parms.ReturnValue;
};

// Function NetherGame.NStore.GetInventoryPrice
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InvClass                       ( CPF_Parm )

float ANStore::GetInventoryPrice ( class UClass* InvClass )
{
	static UFunction* pFnGetInventoryPrice = NULL;

	if ( ! pFnGetInventoryPrice )
		pFnGetInventoryPrice = (UFunction*) UObject::GObjObjects()->Data[ 75208 ];

	ANStore_execGetInventoryPrice_Parms GetInventoryPrice_Parms;
	GetInventoryPrice_Parms.InvClass = InvClass;

	this->ProcessEvent ( pFnGetInventoryPrice, &GetInventoryPrice_Parms, NULL );

	return GetInventoryPrice_Parms.ReturnValue;
};

// Function NetherGame.NStore.GetStoreItems
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// TArray< class UClass* >        Items                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ANStore::GetStoreItems ( TArray< class UClass* >* Items )
{
	static UFunction* pFnGetStoreItems = NULL;

	if ( ! pFnGetStoreItems )
		pFnGetStoreItems = (UFunction*) UObject::GObjObjects()->Data[ 75207 ];

	ANStore_execGetStoreItems_Parms GetStoreItems_Parms;

	this->ProcessEvent ( pFnGetStoreItems, &GetStoreItems_Parms, NULL );

	if ( Items )
		memcpy ( Items, &GetStoreItems_Parms.Items, 0x10 );
};

// Function NetherGame.NStore.SetControllerOwner
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class ANetherPlayerController* PC                             ( CPF_Parm )

void ANStore::SetControllerOwner ( class ANetherPlayerController* PC )
{
	static UFunction* pFnSetControllerOwner = NULL;

	if ( ! pFnSetControllerOwner )
		pFnSetControllerOwner = (UFunction*) UObject::GObjObjects()->Data[ 75793 ];

	ANStore_execSetControllerOwner_Parms SetControllerOwner_Parms;
	SetControllerOwner_Parms.PC = PC;

	this->ProcessEvent ( pFnSetControllerOwner, &SetControllerOwner_Parms, NULL );
};

// Function NetherGame.NStore.SetupItemsFromStoreDoc
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ANStore::SetupItemsFromStoreDoc ( )
{
	static UFunction* pFnSetupItemsFromStoreDoc = NULL;

	if ( ! pFnSetupItemsFromStoreDoc )
		pFnSetupItemsFromStoreDoc = (UFunction*) UObject::GObjObjects()->Data[ 75795 ];

	ANStore_execSetupItemsFromStoreDoc_Parms SetupItemsFromStoreDoc_Parms;

	this->ProcessEvent ( pFnSetupItemsFromStoreDoc, &SetupItemsFromStoreDoc_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_SoundBox.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANInteractiveObject_SoundBox::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 79280 ];

	ANInteractiveObject_SoundBox_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_SoundBox.MarkAsRepaired
// [0x00020002] 
// Parameters infos:

void ANInteractiveObject_SoundBox::MarkAsRepaired ( )
{
	static UFunction* pFnMarkAsRepaired = NULL;

	if ( ! pFnMarkAsRepaired )
		pFnMarkAsRepaired = (UFunction*) UObject::GObjObjects()->Data[ 79279 ];

	ANInteractiveObject_SoundBox_execMarkAsRepaired_Parms MarkAsRepaired_Parms;

	this->ProcessEvent ( pFnMarkAsRepaired, &MarkAsRepaired_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_SoundBox.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANInteractiveObject_SoundBox::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 79277 ];

	ANInteractiveObject_SoundBox_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_SoundBox.ReleaseFromUse
// [0x00020002] 
// Parameters infos:

void ANInteractiveObject_SoundBox::ReleaseFromUse ( )
{
	static UFunction* pFnReleaseFromUse = NULL;

	if ( ! pFnReleaseFromUse )
		pFnReleaseFromUse = (UFunction*) UObject::GObjObjects()->Data[ 79276 ];

	ANInteractiveObject_SoundBox_execReleaseFromUse_Parms ReleaseFromUse_Parms;

	this->ProcessEvent ( pFnReleaseFromUse, &ReleaseFromUse_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_SoundBox.IsValidUse
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANInteractiveObject_SoundBox::IsValidUse ( )
{
	static UFunction* pFnIsValidUse = NULL;

	if ( ! pFnIsValidUse )
		pFnIsValidUse = (UFunction*) UObject::GObjObjects()->Data[ 79274 ];

	ANInteractiveObject_SoundBox_execIsValidUse_Parms IsValidUse_Parms;

	this->ProcessEvent ( pFnIsValidUse, &IsValidUse_Parms, NULL );

	return IsValidUse_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject_SoundBox.ResetObj
// [0x00020002] 
// Parameters infos:

void ANInteractiveObject_SoundBox::ResetObj ( )
{
	static UFunction* pFnResetObj = NULL;

	if ( ! pFnResetObj )
		pFnResetObj = (UFunction*) UObject::GObjObjects()->Data[ 79273 ];

	ANInteractiveObject_SoundBox_execResetObj_Parms ResetObj_Parms;

	this->ProcessEvent ( pFnResetObj, &ResetObj_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_SoundBox.TimeLeftToUse
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ANInteractiveObject_SoundBox::TimeLeftToUse ( )
{
	static UFunction* pFnTimeLeftToUse = NULL;

	if ( ! pFnTimeLeftToUse )
		pFnTimeLeftToUse = (UFunction*) UObject::GObjObjects()->Data[ 79271 ];

	ANInteractiveObject_SoundBox_execTimeLeftToUse_Parms TimeLeftToUse_Parms;

	this->ProcessEvent ( pFnTimeLeftToUse, &TimeLeftToUse_Parms, NULL );

	return TimeLeftToUse_Parms.ReturnValue;
};

// Function NetherGame.NPlayerPreviewMesh.AttachCAPItem
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ADynamicSMActor*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotID                         ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_Parm )

class ADynamicSMActor* ANPlayerPreviewMesh::AttachCAPItem ( int SlotID, struct FName SocketName )
{
	static UFunction* pFnAttachCAPItem = NULL;

	if ( ! pFnAttachCAPItem )
		pFnAttachCAPItem = (UFunction*) UObject::GObjObjects()->Data[ 80452 ];

	ANPlayerPreviewMesh_execAttachCAPItem_Parms AttachCAPItem_Parms;
	AttachCAPItem_Parms.SlotID = SlotID;
	memcpy ( &AttachCAPItem_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachCAPItem, &AttachCAPItem_Parms, NULL );

	return AttachCAPItem_Parms.ReturnValue;
};

// Function NetherGame.NPlayerPreviewMesh.SetTemplateMesh
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  NFI                            ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            Body                           ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )

void ANPlayerPreviewMesh::SetTemplateMesh ( class UClass* NFI, int Head, int Body, int Legs )
{
	static UFunction* pFnSetTemplateMesh = NULL;

	if ( ! pFnSetTemplateMesh )
		pFnSetTemplateMesh = (UFunction*) UObject::GObjObjects()->Data[ 76870 ];

	ANPlayerPreviewMesh_execSetTemplateMesh_Parms SetTemplateMesh_Parms;
	SetTemplateMesh_Parms.NFI = NFI;
	SetTemplateMesh_Parms.Head = Head;
	SetTemplateMesh_Parms.Body = Body;
	SetTemplateMesh_Parms.Legs = Legs;

	this->ProcessEvent ( pFnSetTemplateMesh, &SetTemplateMesh_Parms, NULL );
};

// Function NetherGame.NPlayerPreviewMesh.VerifyBodyMaterialInstance
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANPlayerPreviewMesh::VerifyBodyMaterialInstance ( )
{
	static UFunction* pFnVerifyBodyMaterialInstance = NULL;

	if ( ! pFnVerifyBodyMaterialInstance )
		pFnVerifyBodyMaterialInstance = (UFunction*) UObject::GObjObjects()->Data[ 80443 ];

	ANPlayerPreviewMesh_execVerifyBodyMaterialInstance_Parms VerifyBodyMaterialInstance_Parms;

	this->ProcessEvent ( pFnVerifyBodyMaterialInstance, &VerifyBodyMaterialInstance_Parms, NULL );

	return VerifyBodyMaterialInstance_Parms.ReturnValue;
};

// Function NetherGame.NPlayerPreviewMesh.Cleanup
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANPlayerPreviewMesh::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 75748 ];

	ANPlayerPreviewMesh_execCleanup_Parms Cleanup_Parms;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function NetherGame.NPlayerPreviewMesh.Setup
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ANPlayerPreviewMesh::Setup ( )
{
	static UFunction* pFnSetup = NULL;

	if ( ! pFnSetup )
		pFnSetup = (UFunction*) UObject::GObjObjects()->Data[ 75756 ];

	ANPlayerPreviewMesh_execSetup_Parms Setup_Parms;

	this->ProcessEvent ( pFnSetup, &Setup_Parms, NULL );
};

// Function NetherGame.NPlayerPreviewMesh.GetSceneOffset
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANPlayerPreviewMesh::GetSceneOffset ( )
{
	static UFunction* pFnGetSceneOffset = NULL;

	if ( ! pFnGetSceneOffset )
		pFnGetSceneOffset = (UFunction*) UObject::GObjObjects()->Data[ 76111 ];

	ANPlayerPreviewMesh_execGetSceneOffset_Parms GetSceneOffset_Parms;

	this->ProcessEvent ( pFnGetSceneOffset, &GetSceneOffset_Parms, NULL );

	return GetSceneOffset_Parms.ReturnValue;
};

// Function NetherGame.NetherSavedMove.SetMoveFor
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  InDoubleClick                  ( CPF_Parm )

void UNetherSavedMove::SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick )
{
	static UFunction* pFnSetMoveFor = NULL;

	if ( ! pFnSetMoveFor )
		pFnSetMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 78147 ];

	UNetherSavedMove_execSetMoveFor_Parms SetMoveFor_Parms;
	SetMoveFor_Parms.P = P;
	SetMoveFor_Parms.DeltaTime = DeltaTime;
	memcpy ( &SetMoveFor_Parms.newAccel, &newAccel, 0xC );
	SetMoveFor_Parms.InDoubleClick = InDoubleClick;

	this->ProcessEvent ( pFnSetMoveFor, &SetMoveFor_Parms, NULL );
};

// Function NetherGame.NetherSavedMove.CanCombineWith
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USavedMove*              NewMove                        ( CPF_Parm )
// class APawn*                   inPawn                         ( CPF_Parm )
// float                          MaxDelta                       ( CPF_Parm )

bool UNetherSavedMove::CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta )
{
	static UFunction* pFnCanCombineWith = NULL;

	if ( ! pFnCanCombineWith )
		pFnCanCombineWith = (UFunction*) UObject::GObjObjects()->Data[ 78142 ];

	UNetherSavedMove_execCanCombineWith_Parms CanCombineWith_Parms;
	CanCombineWith_Parms.NewMove = NewMove;
	CanCombineWith_Parms.inPawn = inPawn;
	CanCombineWith_Parms.MaxDelta = MaxDelta;

	this->ProcessEvent ( pFnCanCombineWith, &CanCombineWith_Parms, NULL );

	return CanCombineWith_Parms.ReturnValue;
};

// Function NetherGame.NetherSavedMove.Clear
// [0x00020002] 
// Parameters infos:

void UNetherSavedMove::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 78141 ];

	UNetherSavedMove_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function NetherGame.NetherSubwayVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherSubwayVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78905 ];

	ANetherSubwayVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function NetherGame.NetherSubwayVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANetherSubwayVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78900 ];

	ANetherSubwayVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function NetherGame.NetherSubwayVolume_Transition.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherSubwayVolume_Transition::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78914 ];

	ANetherSubwayVolume_Transition_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function NetherGame.NetherSubwayVolume_Transition.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANetherSubwayVolume_Transition::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78909 ];

	ANetherSubwayVolume_Transition_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function NetherGame.NetherPlayerCamera.FindBestCameraType
// [0x00080002] 
// Parameters infos:
// class UGameCameraBase*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  CameraTarget                   ( CPF_Parm )

class UGameCameraBase* ANetherPlayerCamera::FindBestCameraType ( class AActor* CameraTarget )
{
	static UFunction* pFnFindBestCameraType = NULL;

	if ( ! pFnFindBestCameraType )
		pFnFindBestCameraType = (UFunction*) UObject::GObjObjects()->Data[ 78061 ];

	ANetherPlayerCamera_execFindBestCameraType_Parms FindBestCameraType_Parms;
	FindBestCameraType_Parms.CameraTarget = CameraTarget;

	this->ProcessEvent ( pFnFindBestCameraType, &FindBestCameraType_Parms, NULL );

	return FindBestCameraType_Parms.ReturnValue;
};

// Function NetherGame.NetherPlayerInput.StartBreathing
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UNetherPlayerInput::StartBreathing ( )
{
	static UFunction* pFnStartBreathing = NULL;

	if ( ! pFnStartBreathing )
		pFnStartBreathing = (UFunction*) UObject::GObjObjects()->Data[ 78077 ];

	UNetherPlayerInput_execStartBreathing_Parms StartBreathing_Parms;

	this->ProcessEvent ( pFnStartBreathing, &StartBreathing_Parms, NULL );
};

// Function NetherGame.NetherPlayerInput.StopBreathing
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UNetherPlayerInput::StopBreathing ( )
{
	static UFunction* pFnStopBreathing = NULL;

	if ( ! pFnStopBreathing )
		pFnStopBreathing = (UFunction*) UObject::GObjObjects()->Data[ 78076 ];

	UNetherPlayerInput_execStopBreathing_Parms StopBreathing_Parms;

	this->ProcessEvent ( pFnStopBreathing, &StopBreathing_Parms, NULL );
};

// Function NetherGame.NetherPlayerInput.Jump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UNetherPlayerInput::Jump ( )
{
	static UFunction* pFnJump = NULL;

	if ( ! pFnJump )
		pFnJump = (UFunction*) UObject::GObjObjects()->Data[ 78075 ];

	UNetherPlayerInput_execJump_Parms Jump_Parms;

	this->ProcessEvent ( pFnJump, &Jump_Parms, NULL );
};

// Function NetherGame.NetherPlayerInput.OnToggleCrawl
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UNetherPlayerInput::OnToggleCrawl ( )
{
	static UFunction* pFnOnToggleCrawl = NULL;

	if ( ! pFnOnToggleCrawl )
		pFnOnToggleCrawl = (UFunction*) UObject::GObjObjects()->Data[ 78074 ];

	UNetherPlayerInput_execOnToggleCrawl_Parms OnToggleCrawl_Parms;

	this->ProcessEvent ( pFnOnToggleCrawl, &OnToggleCrawl_Parms, NULL );
};

// Function NetherGame.NetherPlayerInput.Duck
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UNetherPlayerInput::Duck ( )
{
	static UFunction* pFnDuck = NULL;

	if ( ! pFnDuck )
		pFnDuck = (UFunction*) UObject::GObjObjects()->Data[ 78073 ];

	UNetherPlayerInput_execDuck_Parms Duck_Parms;

	this->ProcessEvent ( pFnDuck, &Duck_Parms, NULL );
};

// Function NetherGame.NetherMapUI.WorldToMap
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 World                          ( CPF_Parm )

struct FVector UNetherMapUI::WorldToMap ( struct FVector World )
{
	static UFunction* pFnWorldToMap = NULL;

	if ( ! pFnWorldToMap )
		pFnWorldToMap = (UFunction*) UObject::GObjObjects()->Data[ 76542 ];

	UNetherMapUI_execWorldToMap_Parms WorldToMap_Parms;
	memcpy ( &WorldToMap_Parms.World, &World, 0xC );

	this->ProcessEvent ( pFnWorldToMap, &WorldToMap_Parms, NULL );

	return WorldToMap_Parms.ReturnValue;
};

// Function NetherGame.NetherMapUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherMapUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 76593 ];

	UNetherMapUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherMapUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherMapUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 76592 ];

	UNetherMapUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherMapUI.CloseMap
// [0x00020002] 
// Parameters infos:

void UNetherMapUI::CloseMap ( )
{
	static UFunction* pFnCloseMap = NULL;

	if ( ! pFnCloseMap )
		pFnCloseMap = (UFunction*) UObject::GObjObjects()->Data[ 76591 ];

	UNetherMapUI_execCloseMap_Parms CloseMap_Parms;

	this->ProcessEvent ( pFnCloseMap, &CloseMap_Parms, NULL );
};

// Function NetherGame.NetherMapUI.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UNetherMapUI::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 76584 ];

	UNetherMapUI_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NetherMapUI.DrawDebugPoints
// [0x00C20002] 
// Parameters infos:
// TArray< struct FDebugNetherMapData > DebugMapData                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNetherMapUI::DrawDebugPoints ( TArray< struct FDebugNetherMapData >* DebugMapData )
{
	static UFunction* pFnDrawDebugPoints = NULL;

	if ( ! pFnDrawDebugPoints )
		pFnDrawDebugPoints = (UFunction*) UObject::GObjObjects()->Data[ 76577 ];

	UNetherMapUI_execDrawDebugPoints_Parms DrawDebugPoints_Parms;

	this->ProcessEvent ( pFnDrawDebugPoints, &DrawDebugPoints_Parms, NULL );

	if ( DebugMapData )
		memcpy ( DebugMapData, &DrawDebugPoints_Parms.DebugMapData, 0x10 );
};

// Function NetherGame.NetherMapUI.AddSafeZonesTriggers
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              Parent                         ( CPF_Parm )

void UNetherMapUI::AddSafeZonesTriggers ( class UGFxObject* Parent )
{
	static UFunction* pFnAddSafeZonesTriggers = NULL;

	if ( ! pFnAddSafeZonesTriggers )
		pFnAddSafeZonesTriggers = (UFunction*) UObject::GObjObjects()->Data[ 76516 ];

	UNetherMapUI_execAddSafeZonesTriggers_Parms AddSafeZonesTriggers_Parms;
	AddSafeZonesTriggers_Parms.Parent = Parent;

	this->ProcessEvent ( pFnAddSafeZonesTriggers, &AddSafeZonesTriggers_Parms, NULL );
};

// Function NetherGame.NetherMapUI.AddSafeZones
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              Parent                         ( CPF_Parm )

void UNetherMapUI::AddSafeZones ( class UGFxObject* Parent )
{
	static UFunction* pFnAddSafeZones = NULL;

	if ( ! pFnAddSafeZones )
		pFnAddSafeZones = (UFunction*) UObject::GObjObjects()->Data[ 76515 ];

	UNetherMapUI_execAddSafeZones_Parms AddSafeZones_Parms;
	AddSafeZones_Parms.Parent = Parent;

	this->ProcessEvent ( pFnAddSafeZones, &AddSafeZones_Parms, NULL );
};

// Function NetherGame.NetherMapUI.AddPointsOfInterest
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              Parent                         ( CPF_Parm )

void UNetherMapUI::AddPointsOfInterest ( class UGFxObject* Parent )
{
	static UFunction* pFnAddPointsOfInterest = NULL;

	if ( ! pFnAddPointsOfInterest )
		pFnAddPointsOfInterest = (UFunction*) UObject::GObjObjects()->Data[ 76514 ];

	UNetherMapUI_execAddPointsOfInterest_Parms AddPointsOfInterest_Parms;
	AddPointsOfInterest_Parms.Parent = Parent;

	this->ProcessEvent ( pFnAddPointsOfInterest, &AddPointsOfInterest_Parms, NULL );
};

// Function NetherGame.NetherMapUI.SetupPlayerPointer
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UNetherMapUI::SetupPlayerPointer ( )
{
	static UFunction* pFnSetupPlayerPointer = NULL;

	if ( ! pFnSetupPlayerPointer )
		pFnSetupPlayerPointer = (UFunction*) UObject::GObjObjects()->Data[ 76512 ];

	UNetherMapUI_execSetupPlayerPointer_Parms SetupPlayerPointer_Parms;

	this->ProcessEvent ( pFnSetupPlayerPointer, &SetupPlayerPointer_Parms, NULL );
};

// Function NetherGame.NetherMapUI.AddObjectives
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class UGFxObject*              Parent                         ( CPF_Parm )

void UNetherMapUI::AddObjectives ( class UGFxObject* Parent )
{
	static UFunction* pFnAddObjectives = NULL;

	if ( ! pFnAddObjectives )
		pFnAddObjectives = (UFunction*) UObject::GObjObjects()->Data[ 76517 ];

	UNetherMapUI_execAddObjectives_Parms AddObjectives_Parms;
	AddObjectives_Parms.Parent = Parent;

	this->ProcessEvent ( pFnAddObjectives, &AddObjectives_Parms, NULL );
};

// Function NetherGame.NetherMapUI.MouseMoved
// [0x00820002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMapUI::MouseMoved ( float X, float Y )
{
	static UFunction* pFnMouseMoved = NULL;

	if ( ! pFnMouseMoved )
		pFnMouseMoved = (UFunction*) UObject::GObjObjects()->Data[ 76530 ];

	UNetherMapUI_execMouseMoved_Parms MouseMoved_Parms;
	MouseMoved_Parms.X = X;
	MouseMoved_Parms.Y = Y;

	this->ProcessEvent ( pFnMouseMoved, &MouseMoved_Parms, NULL );
};

// Function NetherGame.NetherMapUI.ConstrainMapOffset
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class UGFxNetherObject*        BoundingArea                   ( CPF_Parm )

void UNetherMapUI::ConstrainMapOffset ( class UGFxNetherObject* BoundingArea )
{
	static UFunction* pFnConstrainMapOffset = NULL;

	if ( ! pFnConstrainMapOffset )
		pFnConstrainMapOffset = (UFunction*) UObject::GObjObjects()->Data[ 76521 ];

	UNetherMapUI_execConstrainMapOffset_Parms ConstrainMapOffset_Parms;
	ConstrainMapOffset_Parms.BoundingArea = BoundingArea;

	this->ProcessEvent ( pFnConstrainMapOffset, &ConstrainMapOffset_Parms, NULL );
};

// Function NetherGame.NetherMapUI.SetMapOffset
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherMapUI::SetMapOffset ( float X, float Y )
{
	static UFunction* pFnSetMapOffset = NULL;

	if ( ! pFnSetMapOffset )
		pFnSetMapOffset = (UFunction*) UObject::GObjObjects()->Data[ 76513 ];

	UNetherMapUI_execSetMapOffset_Parms SetMapOffset_Parms;
	SetMapOffset_Parms.X = X;
	SetMapOffset_Parms.Y = Y;

	this->ProcessEvent ( pFnSetMapOffset, &SetMapOffset_Parms, NULL );
};

// Function NetherGame.NetherMapUI.Init
// [0x00824002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherMapUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 76504 ];

	UNetherMapUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NetherMapUI.MouseWheel
// [0x00020002] 
// Parameters infos:
// int                            Delta                          ( CPF_Parm )

void UNetherMapUI::MouseWheel ( int Delta )
{
	static UFunction* pFnMouseWheel = NULL;

	if ( ! pFnMouseWheel )
		pFnMouseWheel = (UFunction*) UObject::GObjObjects()->Data[ 76502 ];

	UNetherMapUI_execMouseWheel_Parms MouseWheel_Parms;
	MouseWheel_Parms.Delta = Delta;

	this->ProcessEvent ( pFnMouseWheel, &MouseWheel_Parms, NULL );
};

// Function NetherGame.NetherMapUI.ZoomOut
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMapUI::ZoomOut ( class UGFxButton* Button )
{
	static UFunction* pFnZoomOut = NULL;

	if ( ! pFnZoomOut )
		pFnZoomOut = (UFunction*) UObject::GObjObjects()->Data[ 76499 ];

	UNetherMapUI_execZoomOut_Parms ZoomOut_Parms;
	ZoomOut_Parms.Button = Button;

	this->ProcessEvent ( pFnZoomOut, &ZoomOut_Parms, NULL );

	return ZoomOut_Parms.ReturnValue;
};

// Function NetherGame.NetherMapUI.ZoomIn
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherMapUI::ZoomIn ( class UGFxButton* Button )
{
	static UFunction* pFnZoomIn = NULL;

	if ( ! pFnZoomIn )
		pFnZoomIn = (UFunction*) UObject::GObjObjects()->Data[ 76496 ];

	UNetherMapUI_execZoomIn_Parms ZoomIn_Parms;
	ZoomIn_Parms.Button = Button;

	this->ProcessEvent ( pFnZoomIn, &ZoomIn_Parms, NULL );

	return ZoomIn_Parms.ReturnValue;
};

// Function NetherGame.NPointOfInterest.GetInitialRotation
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPointOfInterest::GetInitialRotation ( )
{
	static UFunction* pFnGetInitialRotation = NULL;

	if ( ! pFnGetInitialRotation )
		pFnGetInitialRotation = (UFunction*) UObject::GObjObjects()->Data[ 76559 ];

	ANPointOfInterest_execGetInitialRotation_Parms GetInitialRotation_Parms;

	this->ProcessEvent ( pFnGetInitialRotation, &GetInitialRotation_Parms, NULL );

	return GetInitialRotation_Parms.ReturnValue;
};

// Function NetherGame.NPointOfInterest.GetFontSize
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ANPointOfInterest::GetFontSize ( )
{
	static UFunction* pFnGetFontSize = NULL;

	if ( ! pFnGetFontSize )
		pFnGetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 76557 ];

	ANPointOfInterest_execGetFontSize_Parms GetFontSize_Parms;

	this->ProcessEvent ( pFnGetFontSize, &GetFontSize_Parms, NULL );

	return GetFontSize_Parms.ReturnValue;
};

// Function NetherGame.NPointOfInterest.GetPOIName
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANPointOfInterest::GetPOIName ( )
{
	static UFunction* pFnGetPOIName = NULL;

	if ( ! pFnGetPOIName )
		pFnGetPOIName = (UFunction*) UObject::GObjObjects()->Data[ 76555 ];

	ANPointOfInterest_execGetPOIName_Parms GetPOIName_Parms;

	this->ProcessEvent ( pFnGetPOIName, &GetPOIName_Parms, NULL );

	return GetPOIName_Parms.ReturnValue;
};

// Function NetherGame.NetherSafeZone_Trigger.GetTriggerName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherSafeZone_Trigger::GetTriggerName ( )
{
	static UFunction* pFnGetTriggerName = NULL;

	if ( ! pFnGetTriggerName )
		pFnGetTriggerName = (UFunction*) UObject::GObjObjects()->Data[ 76575 ];

	ANetherSafeZone_Trigger_execGetTriggerName_Parms GetTriggerName_Parms;

	this->ProcessEvent ( pFnGetTriggerName, &GetTriggerName_Parms, NULL );

	return GetTriggerName_Parms.ReturnValue;
};

// Function NetherGame.NetherSafeZone_Trigger.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherSafeZone_Trigger::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78136 ];

	ANetherSafeZone_Trigger_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function NetherGame.NetherSafeZone_Trigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANetherSafeZone_Trigger::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 78131 ];

	ANetherSafeZone_Trigger_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function NetherGame.NetherSafeZone_Trigger.TriggerInit
// [0x00020002] 
// Parameters infos:
// class ANetherTerritoryVolume*  ParentVolume                   ( CPF_Parm )

void ANetherSafeZone_Trigger::TriggerInit ( class ANetherTerritoryVolume* ParentVolume )
{
	static UFunction* pFnTriggerInit = NULL;

	if ( ! pFnTriggerInit )
		pFnTriggerInit = (UFunction*) UObject::GObjObjects()->Data[ 78129 ];

	ANetherSafeZone_Trigger_execTriggerInit_Parms TriggerInit_Parms;
	TriggerInit_Parms.ParentVolume = ParentVolume;

	this->ProcessEvent ( pFnTriggerInit, &TriggerInit_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherSettingsUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 78748 ];

	UNetherSettingsUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherSettingsUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 78747 ];

	UNetherSettingsUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.CloseSettings
// [0x00020002] 
// Parameters infos:

void UNetherSettingsUI::CloseSettings ( )
{
	static UFunction* pFnCloseSettings = NULL;

	if ( ! pFnCloseSettings )
		pFnCloseSettings = (UFunction*) UObject::GObjObjects()->Data[ 78746 ];

	UNetherSettingsUI_execCloseSettings_Parms CloseSettings_Parms;

	this->ProcessEvent ( pFnCloseSettings, &CloseSettings_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.ApplyButtonClicked
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherSettingsUI::ApplyButtonClicked ( class UGFxButton* Button )
{
	static UFunction* pFnApplyButtonClicked = NULL;

	if ( ! pFnApplyButtonClicked )
		pFnApplyButtonClicked = (UFunction*) UObject::GObjObjects()->Data[ 78742 ];

	UNetherSettingsUI_execApplyButtonClicked_Parms ApplyButtonClicked_Parms;
	ApplyButtonClicked_Parms.Button = Button;

	this->ProcessEvent ( pFnApplyButtonClicked, &ApplyButtonClicked_Parms, NULL );

	return ApplyButtonClicked_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.CheckIfRespawnCheckboxEnabled
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::CheckIfRespawnCheckboxEnabled ( )
{
	static UFunction* pFnCheckIfRespawnCheckboxEnabled = NULL;

	if ( ! pFnCheckIfRespawnCheckboxEnabled )
		pFnCheckIfRespawnCheckboxEnabled = (UFunction*) UObject::GObjObjects()->Data[ 78740 ];

	UNetherSettingsUI_execCheckIfRespawnCheckboxEnabled_Parms CheckIfRespawnCheckboxEnabled_Parms;

	this->ProcessEvent ( pFnCheckIfRespawnCheckboxEnabled, &CheckIfRespawnCheckboxEnabled_Parms, NULL );

	return CheckIfRespawnCheckboxEnabled_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.RespawnCheckBoxClicked
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::RespawnCheckBoxClicked ( int OptionIndex )
{
	static UFunction* pFnRespawnCheckBoxClicked = NULL;

	if ( ! pFnRespawnCheckBoxClicked )
		pFnRespawnCheckBoxClicked = (UFunction*) UObject::GObjObjects()->Data[ 78737 ];

	UNetherSettingsUI_execRespawnCheckBoxClicked_Parms RespawnCheckBoxClicked_Parms;
	RespawnCheckBoxClicked_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnRespawnCheckBoxClicked, &RespawnCheckBoxClicked_Parms, NULL );

	return RespawnCheckBoxClicked_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionHideChatMessages
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionHideChatMessages ( int OptionIndex )
{
	static UFunction* pFnSetOptionHideChatMessages = NULL;

	if ( ! pFnSetOptionHideChatMessages )
		pFnSetOptionHideChatMessages = (UFunction*) UObject::GObjObjects()->Data[ 78734 ];

	UNetherSettingsUI_execSetOptionHideChatMessages_Parms SetOptionHideChatMessages_Parms;
	SetOptionHideChatMessages_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionHideChatMessages, &SetOptionHideChatMessages_Parms, NULL );

	return SetOptionHideChatMessages_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionHideChatMessages
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionHideChatMessages ( )
{
	static UFunction* pFnGetOptionHideChatMessages = NULL;

	if ( ! pFnGetOptionHideChatMessages )
		pFnGetOptionHideChatMessages = (UFunction*) UObject::GObjObjects()->Data[ 78732 ];

	UNetherSettingsUI_execGetOptionHideChatMessages_Parms GetOptionHideChatMessages_Parms;

	this->ProcessEvent ( pFnGetOptionHideChatMessages, &GetOptionHideChatMessages_Parms, NULL );

	return GetOptionHideChatMessages_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionShowChatForNewMessages
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionShowChatForNewMessages ( )
{
	static UFunction* pFnGetOptionShowChatForNewMessages = NULL;

	if ( ! pFnGetOptionShowChatForNewMessages )
		pFnGetOptionShowChatForNewMessages = (UFunction*) UObject::GObjObjects()->Data[ 78730 ];

	UNetherSettingsUI_execGetOptionShowChatForNewMessages_Parms GetOptionShowChatForNewMessages_Parms;

	this->ProcessEvent ( pFnGetOptionShowChatForNewMessages, &GetOptionShowChatForNewMessages_Parms, NULL );

	return GetOptionShowChatForNewMessages_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionShowChatForNewMessages
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionShowChatForNewMessages ( int OptionIndex )
{
	static UFunction* pFnSetOptionShowChatForNewMessages = NULL;

	if ( ! pFnSetOptionShowChatForNewMessages )
		pFnSetOptionShowChatForNewMessages = (UFunction*) UObject::GObjObjects()->Data[ 78727 ];

	UNetherSettingsUI_execSetOptionShowChatForNewMessages_Parms SetOptionShowChatForNewMessages_Parms;
	SetOptionShowChatForNewMessages_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionShowChatForNewMessages, &SetOptionShowChatForNewMessages_Parms, NULL );

	return SetOptionShowChatForNewMessages_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionMuteVoiceChat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionMuteVoiceChat ( )
{
	static UFunction* pFnGetOptionMuteVoiceChat = NULL;

	if ( ! pFnGetOptionMuteVoiceChat )
		pFnGetOptionMuteVoiceChat = (UFunction*) UObject::GObjObjects()->Data[ 78725 ];

	UNetherSettingsUI_execGetOptionMuteVoiceChat_Parms GetOptionMuteVoiceChat_Parms;

	this->ProcessEvent ( pFnGetOptionMuteVoiceChat, &GetOptionMuteVoiceChat_Parms, NULL );

	return GetOptionMuteVoiceChat_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionMuteVoiceChat
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionMuteVoiceChat ( int OptionIndex )
{
	static UFunction* pFnSetOptionMuteVoiceChat = NULL;

	if ( ! pFnSetOptionMuteVoiceChat )
		pFnSetOptionMuteVoiceChat = (UFunction*) UObject::GObjObjects()->Data[ 78722 ];

	UNetherSettingsUI_execSetOptionMuteVoiceChat_Parms SetOptionMuteVoiceChat_Parms;
	SetOptionMuteVoiceChat_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionMuteVoiceChat, &SetOptionMuteVoiceChat_Parms, NULL );

	return SetOptionMuteVoiceChat_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionFOV
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherSettingsUI::GetOptionFOV ( )
{
	static UFunction* pFnGetOptionFOV = NULL;

	if ( ! pFnGetOptionFOV )
		pFnGetOptionFOV = (UFunction*) UObject::GObjObjects()->Data[ 78720 ];

	UNetherSettingsUI_execGetOptionFOV_Parms GetOptionFOV_Parms;

	this->ProcessEvent ( pFnGetOptionFOV, &GetOptionFOV_Parms, NULL );

	return GetOptionFOV_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionFOV
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          NewFOV                         ( CPF_Parm )

int UNetherSettingsUI::SetOptionFOV ( float NewFOV )
{
	static UFunction* pFnSetOptionFOV = NULL;

	if ( ! pFnSetOptionFOV )
		pFnSetOptionFOV = (UFunction*) UObject::GObjObjects()->Data[ 78717 ];

	UNetherSettingsUI_execSetOptionFOV_Parms SetOptionFOV_Parms;
	SetOptionFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetOptionFOV, &SetOptionFOV_Parms, NULL );

	return SetOptionFOV_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionLightShafts
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionLightShafts ( )
{
	static UFunction* pFnGetOptionLightShafts = NULL;

	if ( ! pFnGetOptionLightShafts )
		pFnGetOptionLightShafts = (UFunction*) UObject::GObjObjects()->Data[ 78715 ];

	UNetherSettingsUI_execGetOptionLightShafts_Parms GetOptionLightShafts_Parms;

	this->ProcessEvent ( pFnGetOptionLightShafts, &GetOptionLightShafts_Parms, NULL );

	return GetOptionLightShafts_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionLightShafts
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionLightShafts ( int OptionIndex )
{
	static UFunction* pFnSetOptionLightShafts = NULL;

	if ( ! pFnSetOptionLightShafts )
		pFnSetOptionLightShafts = (UFunction*) UObject::GObjObjects()->Data[ 78712 ];

	UNetherSettingsUI_execSetOptionLightShafts_Parms SetOptionLightShafts_Parms;
	SetOptionLightShafts_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionLightShafts, &SetOptionLightShafts_Parms, NULL );

	return SetOptionLightShafts_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionAntiAliasing
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionAntiAliasing ( )
{
	static UFunction* pFnGetOptionAntiAliasing = NULL;

	if ( ! pFnGetOptionAntiAliasing )
		pFnGetOptionAntiAliasing = (UFunction*) UObject::GObjObjects()->Data[ 78710 ];

	UNetherSettingsUI_execGetOptionAntiAliasing_Parms GetOptionAntiAliasing_Parms;

	this->ProcessEvent ( pFnGetOptionAntiAliasing, &GetOptionAntiAliasing_Parms, NULL );

	return GetOptionAntiAliasing_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionAntialiasing
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionAntialiasing ( int OptionIndex )
{
	static UFunction* pFnSetOptionAntialiasing = NULL;

	if ( ! pFnSetOptionAntialiasing )
		pFnSetOptionAntialiasing = (UFunction*) UObject::GObjObjects()->Data[ 78707 ];

	UNetherSettingsUI_execSetOptionAntialiasing_Parms SetOptionAntialiasing_Parms;
	SetOptionAntialiasing_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionAntialiasing, &SetOptionAntialiasing_Parms, NULL );

	return SetOptionAntialiasing_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionMotionBlur
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionMotionBlur ( )
{
	static UFunction* pFnGetOptionMotionBlur = NULL;

	if ( ! pFnGetOptionMotionBlur )
		pFnGetOptionMotionBlur = (UFunction*) UObject::GObjObjects()->Data[ 78705 ];

	UNetherSettingsUI_execGetOptionMotionBlur_Parms GetOptionMotionBlur_Parms;

	this->ProcessEvent ( pFnGetOptionMotionBlur, &GetOptionMotionBlur_Parms, NULL );

	return GetOptionMotionBlur_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionMotionBlur
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionMotionBlur ( int OptionIndex )
{
	static UFunction* pFnSetOptionMotionBlur = NULL;

	if ( ! pFnSetOptionMotionBlur )
		pFnSetOptionMotionBlur = (UFunction*) UObject::GObjObjects()->Data[ 78702 ];

	UNetherSettingsUI_execSetOptionMotionBlur_Parms SetOptionMotionBlur_Parms;
	SetOptionMotionBlur_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionMotionBlur, &SetOptionMotionBlur_Parms, NULL );

	return SetOptionMotionBlur_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionShadows
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionShadows ( )
{
	static UFunction* pFnGetOptionShadows = NULL;

	if ( ! pFnGetOptionShadows )
		pFnGetOptionShadows = (UFunction*) UObject::GObjObjects()->Data[ 78700 ];

	UNetherSettingsUI_execGetOptionShadows_Parms GetOptionShadows_Parms;

	this->ProcessEvent ( pFnGetOptionShadows, &GetOptionShadows_Parms, NULL );

	return GetOptionShadows_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionShadows
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionShadows ( int OptionIndex )
{
	static UFunction* pFnSetOptionShadows = NULL;

	if ( ! pFnSetOptionShadows )
		pFnSetOptionShadows = (UFunction*) UObject::GObjObjects()->Data[ 78697 ];

	UNetherSettingsUI_execSetOptionShadows_Parms SetOptionShadows_Parms;
	SetOptionShadows_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionShadows, &SetOptionShadows_Parms, NULL );

	return SetOptionShadows_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionBloom
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionBloom ( )
{
	static UFunction* pFnGetOptionBloom = NULL;

	if ( ! pFnGetOptionBloom )
		pFnGetOptionBloom = (UFunction*) UObject::GObjObjects()->Data[ 78695 ];

	UNetherSettingsUI_execGetOptionBloom_Parms GetOptionBloom_Parms;

	this->ProcessEvent ( pFnGetOptionBloom, &GetOptionBloom_Parms, NULL );

	return GetOptionBloom_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionBloom
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionBloom ( int OptionIndex )
{
	static UFunction* pFnSetOptionBloom = NULL;

	if ( ! pFnSetOptionBloom )
		pFnSetOptionBloom = (UFunction*) UObject::GObjObjects()->Data[ 78692 ];

	UNetherSettingsUI_execSetOptionBloom_Parms SetOptionBloom_Parms;
	SetOptionBloom_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionBloom, &SetOptionBloom_Parms, NULL );

	return SetOptionBloom_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionDynamicLights
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionDynamicLights ( )
{
	static UFunction* pFnGetOptionDynamicLights = NULL;

	if ( ! pFnGetOptionDynamicLights )
		pFnGetOptionDynamicLights = (UFunction*) UObject::GObjObjects()->Data[ 78690 ];

	UNetherSettingsUI_execGetOptionDynamicLights_Parms GetOptionDynamicLights_Parms;

	this->ProcessEvent ( pFnGetOptionDynamicLights, &GetOptionDynamicLights_Parms, NULL );

	return GetOptionDynamicLights_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionDynamicLights
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionDynamicLights ( int OptionIndex )
{
	static UFunction* pFnSetOptionDynamicLights = NULL;

	if ( ! pFnSetOptionDynamicLights )
		pFnSetOptionDynamicLights = (UFunction*) UObject::GObjObjects()->Data[ 78687 ];

	UNetherSettingsUI_execSetOptionDynamicLights_Parms SetOptionDynamicLights_Parms;
	SetOptionDynamicLights_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionDynamicLights, &SetOptionDynamicLights_Parms, NULL );

	return SetOptionDynamicLights_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionAO
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionAO ( )
{
	static UFunction* pFnGetOptionAO = NULL;

	if ( ! pFnGetOptionAO )
		pFnGetOptionAO = (UFunction*) UObject::GObjObjects()->Data[ 78685 ];

	UNetherSettingsUI_execGetOptionAO_Parms GetOptionAO_Parms;

	this->ProcessEvent ( pFnGetOptionAO, &GetOptionAO_Parms, NULL );

	return GetOptionAO_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionAO
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionAO ( int OptionIndex )
{
	static UFunction* pFnSetOptionAO = NULL;

	if ( ! pFnSetOptionAO )
		pFnSetOptionAO = (UFunction*) UObject::GObjObjects()->Data[ 78682 ];

	UNetherSettingsUI_execSetOptionAO_Parms SetOptionAO_Parms;
	SetOptionAO_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionAO, &SetOptionAO_Parms, NULL );

	return SetOptionAO_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionVSync
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionVSync ( )
{
	static UFunction* pFnGetOptionVSync = NULL;

	if ( ! pFnGetOptionVSync )
		pFnGetOptionVSync = (UFunction*) UObject::GObjObjects()->Data[ 78680 ];

	UNetherSettingsUI_execGetOptionVSync_Parms GetOptionVSync_Parms;

	this->ProcessEvent ( pFnGetOptionVSync, &GetOptionVSync_Parms, NULL );

	return GetOptionVSync_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionVSync
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionVSync ( int OptionIndex )
{
	static UFunction* pFnSetOptionVSync = NULL;

	if ( ! pFnSetOptionVSync )
		pFnSetOptionVSync = (UFunction*) UObject::GObjObjects()->Data[ 78677 ];

	UNetherSettingsUI_execSetOptionVSync_Parms SetOptionVSync_Parms;
	SetOptionVSync_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionVSync, &SetOptionVSync_Parms, NULL );

	return SetOptionVSync_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionFullScreen
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionFullScreen ( )
{
	static UFunction* pFnGetOptionFullScreen = NULL;

	if ( ! pFnGetOptionFullScreen )
		pFnGetOptionFullScreen = (UFunction*) UObject::GObjObjects()->Data[ 78675 ];

	UNetherSettingsUI_execGetOptionFullScreen_Parms GetOptionFullScreen_Parms;

	this->ProcessEvent ( pFnGetOptionFullScreen, &GetOptionFullScreen_Parms, NULL );

	return GetOptionFullScreen_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionFullScreen
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionFullScreen ( int OptionIndex )
{
	static UFunction* pFnSetOptionFullScreen = NULL;

	if ( ! pFnSetOptionFullScreen )
		pFnSetOptionFullScreen = (UFunction*) UObject::GObjObjects()->Data[ 78672 ];

	UNetherSettingsUI_execSetOptionFullScreen_Parms SetOptionFullScreen_Parms;
	SetOptionFullScreen_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionFullScreen, &SetOptionFullScreen_Parms, NULL );

	return SetOptionFullScreen_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionMouseYInvert
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionMouseYInvert ( int OptionIndex )
{
	static UFunction* pFnSetOptionMouseYInvert = NULL;

	if ( ! pFnSetOptionMouseYInvert )
		pFnSetOptionMouseYInvert = (UFunction*) UObject::GObjObjects()->Data[ 78667 ];

	UNetherSettingsUI_execSetOptionMouseYInvert_Parms SetOptionMouseYInvert_Parms;
	SetOptionMouseYInvert_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionMouseYInvert, &SetOptionMouseYInvert_Parms, NULL );

	return SetOptionMouseYInvert_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionMouseYInvert
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionMouseYInvert ( )
{
	static UFunction* pFnGetOptionMouseYInvert = NULL;

	if ( ! pFnGetOptionMouseYInvert )
		pFnGetOptionMouseYInvert = (UFunction*) UObject::GObjObjects()->Data[ 78663 ];

	UNetherSettingsUI_execGetOptionMouseYInvert_Parms GetOptionMouseYInvert_Parms;

	this->ProcessEvent ( pFnGetOptionMouseYInvert, &GetOptionMouseYInvert_Parms, NULL );

	return GetOptionMouseYInvert_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionDetailMode
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetOptionDetailMode ( )
{
	static UFunction* pFnGetOptionDetailMode = NULL;

	if ( ! pFnGetOptionDetailMode )
		pFnGetOptionDetailMode = (UFunction*) UObject::GObjObjects()->Data[ 78661 ];

	UNetherSettingsUI_execGetOptionDetailMode_Parms GetOptionDetailMode_Parms;

	this->ProcessEvent ( pFnGetOptionDetailMode, &GetOptionDetailMode_Parms, NULL );

	return GetOptionDetailMode_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionDetailMode
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionDetailMode ( int OptionIndex )
{
	static UFunction* pFnSetOptionDetailMode = NULL;

	if ( ! pFnSetOptionDetailMode )
		pFnSetOptionDetailMode = (UFunction*) UObject::GObjObjects()->Data[ 78658 ];

	UNetherSettingsUI_execSetOptionDetailMode_Parms SetOptionDetailMode_Parms;
	SetOptionDetailMode_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetOptionDetailMode, &SetOptionDetailMode_Parms, NULL );

	return SetOptionDetailMode_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetOptionViewDistance
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherSettingsUI::GetOptionViewDistance ( )
{
	static UFunction* pFnGetOptionViewDistance = NULL;

	if ( ! pFnGetOptionViewDistance )
		pFnGetOptionViewDistance = (UFunction*) UObject::GObjObjects()->Data[ 78656 ];

	UNetherSettingsUI_execGetOptionViewDistance_Parms GetOptionViewDistance_Parms;

	this->ProcessEvent ( pFnGetOptionViewDistance, &GetOptionViewDistance_Parms, NULL );

	return GetOptionViewDistance_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetOptionViewDistance
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          OptionValue                    ( CPF_Parm )

int UNetherSettingsUI::SetOptionViewDistance ( float OptionValue )
{
	static UFunction* pFnSetOptionViewDistance = NULL;

	if ( ! pFnSetOptionViewDistance )
		pFnSetOptionViewDistance = (UFunction*) UObject::GObjObjects()->Data[ 78653 ];

	UNetherSettingsUI_execSetOptionViewDistance_Parms SetOptionViewDistance_Parms;
	SetOptionViewDistance_Parms.OptionValue = OptionValue;

	this->ProcessEvent ( pFnSetOptionViewDistance, &SetOptionViewDistance_Parms, NULL );

	return SetOptionViewDistance_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetResOption
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetResOption ( )
{
	static UFunction* pFnGetResOption = NULL;

	if ( ! pFnGetResOption )
		pFnGetResOption = (UFunction*) UObject::GObjObjects()->Data[ 78647 ];

	UNetherSettingsUI_execGetResOption_Parms GetResOption_Parms;

	this->ProcessEvent ( pFnGetResOption, &GetResOption_Parms, NULL );

	return GetResOption_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetResOption
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OptionIndex                    ( CPF_Parm )

int UNetherSettingsUI::SetResOption ( int OptionIndex )
{
	static UFunction* pFnSetResOption = NULL;

	if ( ! pFnSetResOption )
		pFnSetResOption = (UFunction*) UObject::GObjObjects()->Data[ 78643 ];

	UNetherSettingsUI_execSetResOption_Parms SetResOption_Parms;
	SetResOption_Parms.OptionIndex = OptionIndex;

	this->ProcessEvent ( pFnSetResOption, &SetResOption_Parms, NULL );

	return SetResOption_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.StartNewCollumn
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherSettingsUI::StartNewCollumn ( )
{
	static UFunction* pFnStartNewCollumn = NULL;

	if ( ! pFnStartNewCollumn )
		pFnStartNewCollumn = (UFunction*) UObject::GObjObjects()->Data[ 78611 ];

	UNetherSettingsUI_execStartNewCollumn_Parms StartNewCollumn_Parms;

	this->ProcessEvent ( pFnStartNewCollumn, &StartNewCollumn_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.GetNextPos
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  WidgetType                     ( CPF_Parm )

struct FVector2D UNetherSettingsUI::GetNextPos ( unsigned char WidgetType )
{
	static UFunction* pFnGetNextPos = NULL;

	if ( ! pFnGetNextPos )
		pFnGetNextPos = (UFunction*) UObject::GObjObjects()->Data[ 78610 ];

	UNetherSettingsUI_execGetNextPos_Parms GetNextPos_Parms;
	GetNextPos_Parms.WidgetType = WidgetType;

	this->ProcessEvent ( pFnGetNextPos, &GetNextPos_Parms, NULL );

	return GetNextPos_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.AddSlider
// [0x00024002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )
// float                          MinValue                       ( CPF_Parm )
// float                          MaxValue                       ( CPF_Parm )
// struct FScriptDelegate         SetOptionDelegate              ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         GetOptionDelegate              ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector2D               pos                            ( CPF_Parm )
// unsigned long                  bApplyImmediately              ( CPF_OptionalParm | CPF_Parm )

void UNetherSettingsUI::AddSlider ( struct FString Label, float MinValue, float MaxValue, struct FScriptDelegate SetOptionDelegate, struct FScriptDelegate GetOptionDelegate, struct FVector2D pos, unsigned long bApplyImmediately )
{
	static UFunction* pFnAddSlider = NULL;

	if ( ! pFnAddSlider )
		pFnAddSlider = (UFunction*) UObject::GObjObjects()->Data[ 78630 ];

	UNetherSettingsUI_execAddSlider_Parms AddSlider_Parms;
	memcpy ( &AddSlider_Parms.Label, &Label, 0x10 );
	AddSlider_Parms.MinValue = MinValue;
	AddSlider_Parms.MaxValue = MaxValue;
	memcpy ( &AddSlider_Parms.SetOptionDelegate, &SetOptionDelegate, 0x10 );
	memcpy ( &AddSlider_Parms.GetOptionDelegate, &GetOptionDelegate, 0x10 );
	memcpy ( &AddSlider_Parms.pos, &pos, 0x8 );
	AddSlider_Parms.bApplyImmediately = bApplyImmediately;

	this->ProcessEvent ( pFnAddSlider, &AddSlider_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.AddDropDown
// [0x00420002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         SetOptionDelegate              ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         GetOptionDelegate              ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector2D               pos                            ( CPF_Parm )
// TArray< struct FString >       OptionLabels                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNetherSettingsUI::AddDropDown ( struct FString Label, struct FScriptDelegate SetOptionDelegate, struct FScriptDelegate GetOptionDelegate, struct FVector2D pos, TArray< struct FString >* OptionLabels )
{
	static UFunction* pFnAddDropDown = NULL;

	if ( ! pFnAddDropDown )
		pFnAddDropDown = (UFunction*) UObject::GObjObjects()->Data[ 78620 ];

	UNetherSettingsUI_execAddDropDown_Parms AddDropDown_Parms;
	memcpy ( &AddDropDown_Parms.Label, &Label, 0x10 );
	memcpy ( &AddDropDown_Parms.SetOptionDelegate, &SetOptionDelegate, 0x10 );
	memcpy ( &AddDropDown_Parms.GetOptionDelegate, &GetOptionDelegate, 0x10 );
	memcpy ( &AddDropDown_Parms.pos, &pos, 0x8 );

	this->ProcessEvent ( pFnAddDropDown, &AddDropDown_Parms, NULL );

	if ( OptionLabels )
		memcpy ( OptionLabels, &AddDropDown_Parms.OptionLabels, 0x10 );
};

// Function NetherGame.NetherSettingsUI.AddCheckBox
// [0x00024002] 
// Parameters infos:
// struct FString                 Label                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         SetOptionDelegate              ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         GetOptionDelegate              ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector2D               pos                            ( CPF_Parm )
// unsigned long                  bApplyImmediately              ( CPF_OptionalParm | CPF_Parm )

void UNetherSettingsUI::AddCheckBox ( struct FString Label, struct FScriptDelegate SetOptionDelegate, struct FScriptDelegate GetOptionDelegate, struct FVector2D pos, unsigned long bApplyImmediately )
{
	static UFunction* pFnAddCheckBox = NULL;

	if ( ! pFnAddCheckBox )
		pFnAddCheckBox = (UFunction*) UObject::GObjObjects()->Data[ 78612 ];

	UNetherSettingsUI_execAddCheckBox_Parms AddCheckBox_Parms;
	memcpy ( &AddCheckBox_Parms.Label, &Label, 0x10 );
	memcpy ( &AddCheckBox_Parms.SetOptionDelegate, &SetOptionDelegate, 0x10 );
	memcpy ( &AddCheckBox_Parms.GetOptionDelegate, &GetOptionDelegate, 0x10 );
	memcpy ( &AddCheckBox_Parms.pos, &pos, 0x8 );
	AddCheckBox_Parms.bApplyImmediately = bApplyImmediately;

	this->ProcessEvent ( pFnAddCheckBox, &AddCheckBox_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.Init
// [0x00824002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherSettingsUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 78603 ];

	UNetherSettingsUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NetherSettingsUI.SetFloat
// [0x00120000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Value                          ( CPF_Parm )

int UNetherSettingsUI::SetFloat ( float Value )
{
	static UFunction* pFnSetFloat = NULL;

	if ( ! pFnSetFloat )
		pFnSetFloat = (UFunction*) UObject::GObjObjects()->Data[ 78548 ];

	UNetherSettingsUI_execSetFloat_Parms SetFloat_Parms;
	SetFloat_Parms.Value = Value;

	this->ProcessEvent ( pFnSetFloat, &SetFloat_Parms, NULL );

	return SetFloat_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetFloat
// [0x00120000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UNetherSettingsUI::GetFloat ( )
{
	static UFunction* pFnGetFloat = NULL;

	if ( ! pFnGetFloat )
		pFnGetFloat = (UFunction*) UObject::GObjObjects()->Data[ 78550 ];

	UNetherSettingsUI_execGetFloat_Parms GetFloat_Parms;

	this->ProcessEvent ( pFnGetFloat, &GetFloat_Parms, NULL );

	return GetFloat_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.GetInt
// [0x00120000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNetherSettingsUI::GetInt ( )
{
	static UFunction* pFnGetInt = NULL;

	if ( ! pFnGetInt )
		pFnGetInt = (UFunction*) UObject::GObjObjects()->Data[ 78552 ];

	UNetherSettingsUI_execGetInt_Parms GetInt_Parms;

	this->ProcessEvent ( pFnGetInt, &GetInt_Parms, NULL );

	return GetInt_Parms.ReturnValue;
};

// Function NetherGame.NetherSettingsUI.SetInt
// [0x00120000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Value                          ( CPF_Parm )

int UNetherSettingsUI::SetInt ( int Value )
{
	static UFunction* pFnSetInt = NULL;

	if ( ! pFnSetInt )
		pFnSetInt = (UFunction*) UObject::GObjObjects()->Data[ 78554 ];

	UNetherSettingsUI_execSetInt_Parms SetInt_Parms;
	SetInt_Parms.Value = Value;

	this->ProcessEvent ( pFnSetInt, &SetInt_Parms, NULL );

	return SetInt_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.AS_StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherServerScreenUI::AS_StartClosing ( )
{
	static UFunction* pFnAS_StartClosing = NULL;

	if ( ! pFnAS_StartClosing )
		pFnAS_StartClosing = (UFunction*) UObject::GObjObjects()->Data[ 78523 ];

	UNetherServerScreenUI_execAS_StartClosing_Parms AS_StartClosing_Parms;

	this->ProcessEvent ( pFnAS_StartClosing, &AS_StartClosing_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.OnServerSelect
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherServerScreenUI::OnServerSelect ( class UGFxButton* Button )
{
	static UFunction* pFnOnServerSelect = NULL;

	if ( ! pFnOnServerSelect )
		pFnOnServerSelect = (UFunction*) UObject::GObjObjects()->Data[ 78519 ];

	UNetherServerScreenUI_execOnServerSelect_Parms OnServerSelect_Parms;
	OnServerSelect_Parms.Button = Button;

	this->ProcessEvent ( pFnOnServerSelect, &OnServerSelect_Parms, NULL );

	return OnServerSelect_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.LeftMouseDown
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UNetherServerScreenUI::LeftMouseDown ( float X, float Y )
{
	static UFunction* pFnLeftMouseDown = NULL;

	if ( ! pFnLeftMouseDown )
		pFnLeftMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 78515 ];

	UNetherServerScreenUI_execLeftMouseDown_Parms LeftMouseDown_Parms;
	LeftMouseDown_Parms.X = X;
	LeftMouseDown_Parms.Y = Y;

	this->ProcessEvent ( pFnLeftMouseDown, &LeftMouseDown_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.StartClosing
// [0x00020002] 
// Parameters infos:

void UNetherServerScreenUI::StartClosing ( )
{
	static UFunction* pFnStartClosing = NULL;

	if ( ! pFnStartClosing )
		pFnStartClosing = (UFunction*) UObject::GObjObjects()->Data[ 78514 ];

	UNetherServerScreenUI_execStartClosing_Parms StartClosing_Parms;

	this->ProcessEvent ( pFnStartClosing, &StartClosing_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.CloseServerScreen
// [0x00020002] 
// Parameters infos:

void UNetherServerScreenUI::CloseServerScreen ( )
{
	static UFunction* pFnCloseServerScreen = NULL;

	if ( ! pFnCloseServerScreen )
		pFnCloseServerScreen = (UFunction*) UObject::GObjObjects()->Data[ 78513 ];

	UNetherServerScreenUI_execCloseServerScreen_Parms CloseServerScreen_Parms;

	this->ProcessEvent ( pFnCloseServerScreen, &CloseServerScreen_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.OnCancelSearchComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UNetherServerScreenUI::OnCancelSearchComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCancelSearchComplete = NULL;

	if ( ! pFnOnCancelSearchComplete )
		pFnOnCancelSearchComplete = (UFunction*) UObject::GObjObjects()->Data[ 78510 ];

	UNetherServerScreenUI_execOnCancelSearchComplete_Parms OnCancelSearchComplete_Parms;
	OnCancelSearchComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCancelSearchComplete, &OnCancelSearchComplete_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.OnFindOnlineGamesComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UNetherServerScreenUI::OnFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesComplete = NULL;

	if ( ! pFnOnFindOnlineGamesComplete )
		pFnOnFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 78507 ];

	UNetherServerScreenUI_execOnFindOnlineGamesComplete_Parms OnFindOnlineGamesComplete_Parms;
	OnFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesComplete, &OnFindOnlineGamesComplete_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.OnFindOnlineGamesCompleteDelegate
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UNetherServerScreenUI::OnFindOnlineGamesCompleteDelegate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnOnFindOnlineGamesCompleteDelegate )
		pFnOnFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 78504 ];

	UNetherServerScreenUI_execOnFindOnlineGamesCompleteDelegate_Parms OnFindOnlineGamesCompleteDelegate_Parms;
	OnFindOnlineGamesCompleteDelegate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesCompleteDelegate, &OnFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.SubmitServerListQuery
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UNetherServerScreenUI::SubmitServerListQuery ( int PlayerIndex )
{
	static UFunction* pFnSubmitServerListQuery = NULL;

	if ( ! pFnSubmitServerListQuery )
		pFnSubmitServerListQuery = (UFunction*) UObject::GObjObjects()->Data[ 78441 ];

	UNetherServerScreenUI_execSubmitServerListQuery_Parms SubmitServerListQuery_Parms;
	SubmitServerListQuery_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSubmitServerListQuery, &SubmitServerListQuery_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.CancelQuery
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  DesiredCancelAction            ( CPF_OptionalParm | CPF_Parm )

void UNetherServerScreenUI::CancelQuery ( unsigned char DesiredCancelAction )
{
	static UFunction* pFnCancelQuery = NULL;

	if ( ! pFnCancelQuery )
		pFnCancelQuery = (UFunction*) UObject::GObjObjects()->Data[ 78500 ];

	UNetherServerScreenUI_execCancelQuery_Parms CancelQuery_Parms;
	CancelQuery_Parms.DesiredCancelAction = DesiredCancelAction;

	this->ProcessEvent ( pFnCancelQuery, &CancelQuery_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.AllowJoinServer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherServerScreenUI::AllowJoinServer ( )
{
	static UFunction* pFnAllowJoinServer = NULL;

	if ( ! pFnAllowJoinServer )
		pFnAllowJoinServer = (UFunction*) UObject::GObjObjects()->Data[ 78475 ];

	UNetherServerScreenUI_execAllowJoinServer_Parms AllowJoinServer_Parms;

	this->ProcessEvent ( pFnAllowJoinServer, &AllowJoinServer_Parms, NULL );

	return AllowJoinServer_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.Cleanup
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UNetherServerScreenUI::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 78496 ];

	UNetherServerScreenUI_execCleanup_Parms Cleanup_Parms;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.OnJoinGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bSuccessful                    ( CPF_Parm )

void UNetherServerScreenUI::OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful )
{
	static UFunction* pFnOnJoinGameComplete = NULL;

	if ( ! pFnOnJoinGameComplete )
		pFnOnJoinGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 78491 ];

	UNetherServerScreenUI_execOnJoinGameComplete_Parms OnJoinGameComplete_Parms;
	memcpy ( &OnJoinGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinGameComplete_Parms.bSuccessful = bSuccessful;

	this->ProcessEvent ( pFnOnJoinGameComplete, &OnJoinGameComplete_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.BuildJoinURL
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 ResolvedConnectionURL          ( CPF_Parm | CPF_NeedCtorLink )

struct FString UNetherServerScreenUI::BuildJoinURL ( struct FString ResolvedConnectionURL )
{
	static UFunction* pFnBuildJoinURL = NULL;

	if ( ! pFnBuildJoinURL )
		pFnBuildJoinURL = (UFunction*) UObject::GObjObjects()->Data[ 78484 ];

	UNetherServerScreenUI_execBuildJoinURL_Parms BuildJoinURL_Parms;
	memcpy ( &BuildJoinURL_Parms.ResolvedConnectionURL, &ResolvedConnectionURL, 0x10 );

	this->ProcessEvent ( pFnBuildJoinURL, &BuildJoinURL_Parms, NULL );

	return BuildJoinURL_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.ProcessJoin
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherServerScreenUI::ProcessJoin ( )
{
	static UFunction* pFnProcessJoin = NULL;

	if ( ! pFnProcessJoin )
		pFnProcessJoin = (UFunction*) UObject::GObjObjects()->Data[ 78476 ];

	UNetherServerScreenUI_execProcessJoin_Parms ProcessJoin_Parms;

	this->ProcessEvent ( pFnProcessJoin, &ProcessJoin_Parms, NULL );

	return ProcessJoin_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.DisplayServerJoinError
// [0x00020002] 
// Parameters infos:

void UNetherServerScreenUI::DisplayServerJoinError ( )
{
	static UFunction* pFnDisplayServerJoinError = NULL;

	if ( ! pFnDisplayServerJoinError )
		pFnDisplayServerJoinError = (UFunction*) UObject::GObjObjects()->Data[ 78477 ];

	UNetherServerScreenUI_execDisplayServerJoinError_Parms DisplayServerJoinError_Parms;

	this->ProcessEvent ( pFnDisplayServerJoinError, &DisplayServerJoinError_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.JoinServer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNetherServerScreenUI::JoinServer ( )
{
	static UFunction* pFnJoinServer = NULL;

	if ( ! pFnJoinServer )
		pFnJoinServer = (UFunction*) UObject::GObjObjects()->Data[ 78471 ];

	UNetherServerScreenUI_execJoinServer_Parms JoinServer_Parms;

	this->ProcessEvent ( pFnJoinServer, &JoinServer_Parms, NULL );

	return JoinServer_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.OnToggleHideFullServers
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CurrentValue                   ( CPF_Parm )

int UNetherServerScreenUI::OnToggleHideFullServers ( int CurrentValue )
{
	static UFunction* pFnOnToggleHideFullServers = NULL;

	if ( ! pFnOnToggleHideFullServers )
		pFnOnToggleHideFullServers = (UFunction*) UObject::GObjObjects()->Data[ 78468 ];

	UNetherServerScreenUI_execOnToggleHideFullServers_Parms OnToggleHideFullServers_Parms;
	OnToggleHideFullServers_Parms.CurrentValue = CurrentValue;

	this->ProcessEvent ( pFnOnToggleHideFullServers, &OnToggleHideFullServers_Parms, NULL );

	return OnToggleHideFullServers_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.OnToggleHideEmptyServers
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CurrentValue                   ( CPF_Parm )

int UNetherServerScreenUI::OnToggleHideEmptyServers ( int CurrentValue )
{
	static UFunction* pFnOnToggleHideEmptyServers = NULL;

	if ( ! pFnOnToggleHideEmptyServers )
		pFnOnToggleHideEmptyServers = (UFunction*) UObject::GObjObjects()->Data[ 78465 ];

	UNetherServerScreenUI_execOnToggleHideEmptyServers_Parms OnToggleHideEmptyServers_Parms;
	OnToggleHideEmptyServers_Parms.CurrentValue = CurrentValue;

	this->ProcessEvent ( pFnOnToggleHideEmptyServers, &OnToggleHideEmptyServers_Parms, NULL );

	return OnToggleHideEmptyServers_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.PopulateMberServers
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherServerScreenUI::PopulateMberServers ( )
{
	static UFunction* pFnPopulateMberServers = NULL;

	if ( ! pFnPopulateMberServers )
		pFnPopulateMberServers = (UFunction*) UObject::GObjObjects()->Data[ 78426 ];

	UNetherServerScreenUI_execPopulateMberServers_Parms PopulateMberServers_Parms;

	this->ProcessEvent ( pFnPopulateMberServers, &PopulateMberServers_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.RefreshServerUI
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGFxButton*              Button                         ( CPF_Parm )

int UNetherServerScreenUI::RefreshServerUI ( class UGFxButton* Button )
{
	static UFunction* pFnRefreshServerUI = NULL;

	if ( ! pFnRefreshServerUI )
		pFnRefreshServerUI = (UFunction*) UObject::GObjObjects()->Data[ 78445 ];

	UNetherServerScreenUI_execRefreshServerUI_Parms RefreshServerUI_Parms;
	RefreshServerUI_Parms.Button = Button;

	this->ProcessEvent ( pFnRefreshServerUI, &RefreshServerUI_Parms, NULL );

	return RefreshServerUI_Parms.ReturnValue;
};

// Function NetherGame.NetherServerScreenUI.PopulateMasterListServers
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UNetherServerScreenUI::PopulateMasterListServers ( )
{
	static UFunction* pFnPopulateMasterListServers = NULL;

	if ( ! pFnPopulateMasterListServers )
		pFnPopulateMasterListServers = (UFunction*) UObject::GObjObjects()->Data[ 78425 ];

	UNetherServerScreenUI_execPopulateMasterListServers_Parms PopulateMasterListServers_Parms;

	this->ProcessEvent ( pFnPopulateMasterListServers, &PopulateMasterListServers_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.RefreshServerList
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            InPlayerIndex                  ( CPF_Parm )
// int                            MaxResults                     ( CPF_OptionalParm | CPF_Parm )

void UNetherServerScreenUI::RefreshServerList ( int InPlayerIndex, int MaxResults )
{
	static UFunction* pFnRefreshServerList = NULL;

	if ( ! pFnRefreshServerList )
		pFnRefreshServerList = (UFunction*) UObject::GObjObjects()->Data[ 78419 ];

	UNetherServerScreenUI_execRefreshServerList_Parms RefreshServerList_Parms;
	RefreshServerList_Parms.InPlayerIndex = InPlayerIndex;
	RefreshServerList_Parms.MaxResults = MaxResults;

	this->ProcessEvent ( pFnRefreshServerList, &RefreshServerList_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.AddServerButton
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ServerName                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            PlayerCount                    ( CPF_Parm )
// int                            TotalPlayersAllowed            ( CPF_Parm )
// struct FString                 CustomServerAddress            ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UNetherServerScreenUI::AddServerButton ( struct FString ServerName, int PlayerCount, int TotalPlayersAllowed, struct FString CustomServerAddress )
{
	static UFunction* pFnAddServerButton = NULL;

	if ( ! pFnAddServerButton )
		pFnAddServerButton = (UFunction*) UObject::GObjObjects()->Data[ 78427 ];

	UNetherServerScreenUI_execAddServerButton_Parms AddServerButton_Parms;
	memcpy ( &AddServerButton_Parms.ServerName, &ServerName, 0x10 );
	AddServerButton_Parms.PlayerCount = PlayerCount;
	AddServerButton_Parms.TotalPlayersAllowed = TotalPlayersAllowed;
	memcpy ( &AddServerButton_Parms.CustomServerAddress, &CustomServerAddress, 0x10 );

	this->ProcessEvent ( pFnAddServerButton, &AddServerButton_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.RefreshUI
// [0x00020002] 
// Parameters infos:

void UNetherServerScreenUI::RefreshUI ( )
{
	static UFunction* pFnRefreshUI = NULL;

	if ( ! pFnRefreshUI )
		pFnRefreshUI = (UFunction*) UObject::GObjObjects()->Data[ 78420 ];

	UNetherServerScreenUI_execRefreshUI_Parms RefreshUI_Parms;

	this->ProcessEvent ( pFnRefreshUI, &RefreshUI_Parms, NULL );
};

// Function NetherGame.NetherServerScreenUI.Init
// [0x00024002] 
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_OptionalParm | CPF_Parm )

void UNetherServerScreenUI::Init ( class ULocalPlayer* Player )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 78404 ];

	UNetherServerScreenUI_execInit_Parms Init_Parms;
	Init_Parms.Player = Player;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NetherObjective_SpawnEnemies.ManageSpawns
// [0x00024002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// int                            EnemySet                       ( CPF_OptionalParm | CPF_Parm )

void ANetherObjective_SpawnEnemies::ManageSpawns ( float DeltaTime, int EnemySet )
{
	static UFunction* pFnManageSpawns = NULL;

	if ( ! pFnManageSpawns )
		pFnManageSpawns = (UFunction*) UObject::GObjObjects()->Data[ 77124 ];

	ANetherObjective_SpawnEnemies_execManageSpawns_Parms ManageSpawns_Parms;
	ManageSpawns_Parms.DeltaTime = DeltaTime;
	ManageSpawns_Parms.EnemySet = EnemySet;

	this->ProcessEvent ( pFnManageSpawns, &ManageSpawns_Parms, NULL );
};

// Function NetherGame.NetherObjective_SpawnEnemies.SpawnAnEnemy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANetherTerritoryVolume*  VolumeToSpawnIn                ( CPF_Parm )
// int                            EnemySet                       ( CPF_Parm )

bool ANetherObjective_SpawnEnemies::SpawnAnEnemy ( class ANetherTerritoryVolume* VolumeToSpawnIn, int EnemySet )
{
	static UFunction* pFnSpawnAnEnemy = NULL;

	if ( ! pFnSpawnAnEnemy )
		pFnSpawnAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 77114 ];

	ANetherObjective_SpawnEnemies_execSpawnAnEnemy_Parms SpawnAnEnemy_Parms;
	SpawnAnEnemy_Parms.VolumeToSpawnIn = VolumeToSpawnIn;
	SpawnAnEnemy_Parms.EnemySet = EnemySet;

	this->ProcessEvent ( pFnSpawnAnEnemy, &SpawnAnEnemy_Parms, NULL );

	return SpawnAnEnemy_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective_SpawnEnemies.CheckPendingSpawns
// [0x00020002] 
// Parameters infos:
// int                            EnemySet                       ( CPF_Parm )

void ANetherObjective_SpawnEnemies::CheckPendingSpawns ( int EnemySet )
{
	static UFunction* pFnCheckPendingSpawns = NULL;

	if ( ! pFnCheckPendingSpawns )
		pFnCheckPendingSpawns = (UFunction*) UObject::GObjObjects()->Data[ 77111 ];

	ANetherObjective_SpawnEnemies_execCheckPendingSpawns_Parms CheckPendingSpawns_Parms;
	CheckPendingSpawns_Parms.EnemySet = EnemySet;

	this->ProcessEvent ( pFnCheckPendingSpawns, &CheckPendingSpawns_Parms, NULL );
};

// Function NetherGame.NetherObjective_SpawnEnemies.AddPendingSpawn
// [0x00820002] 
// Parameters infos:
// class ANetherTerritoryVolume*  OwningVolume                   ( CPF_Parm )

void ANetherObjective_SpawnEnemies::AddPendingSpawn ( class ANetherTerritoryVolume* OwningVolume )
{
	static UFunction* pFnAddPendingSpawn = NULL;

	if ( ! pFnAddPendingSpawn )
		pFnAddPendingSpawn = (UFunction*) UObject::GObjObjects()->Data[ 77108 ];

	ANetherObjective_SpawnEnemies_execAddPendingSpawn_Parms AddPendingSpawn_Parms;
	AddPendingSpawn_Parms.OwningVolume = OwningVolume;

	this->ProcessEvent ( pFnAddPendingSpawn, &AddPendingSpawn_Parms, NULL );
};

// Function NetherGame.NetherObjective_SpawnEnemies.UnTouched
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherObjective_SpawnEnemies::UnTouched ( class AActor* Other )
{
	static UFunction* pFnUnTouched = NULL;

	if ( ! pFnUnTouched )
		pFnUnTouched = (UFunction*) UObject::GObjObjects()->Data[ 77105 ];

	ANetherObjective_SpawnEnemies_execUnTouched_Parms UnTouched_Parms;
	UnTouched_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouched, &UnTouched_Parms, NULL );
};

// Function NetherGame.NetherObjective_SpawnEnemies.OnDeathNotifyEvent
// [0x00020002] 
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANetherObjective_SpawnEnemies::OnDeathNotifyEvent ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnOnDeathNotifyEvent = NULL;

	if ( ! pFnOnDeathNotifyEvent )
		pFnOnDeathNotifyEvent = (UFunction*) UObject::GObjObjects()->Data[ 77103 ];

	ANetherObjective_SpawnEnemies_execOnDeathNotifyEvent_Parms OnDeathNotifyEvent_Parms;
	OnDeathNotifyEvent_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnOnDeathNotifyEvent, &OnDeathNotifyEvent_Parms, NULL );
};

// Function NetherGame.NetherObjective_KillBoss.SpawnBoss
// [0x00020002] 
// Parameters infos:

void ANetherObjective_KillBoss::SpawnBoss ( )
{
	static UFunction* pFnSpawnBoss = NULL;

	if ( ! pFnSpawnBoss )
		pFnSpawnBoss = (UFunction*) UObject::GObjObjects()->Data[ 77144 ];

	ANetherObjective_KillBoss_execSpawnBoss_Parms SpawnBoss_Parms;

	this->ProcessEvent ( pFnSpawnBoss, &SpawnBoss_Parms, NULL );
};

// Function NetherGame.NetherObjective_KillBoss.OnBossDeathNotifyEvent
// [0x00020002] 
// Parameters infos:
// class ANPawnEnemy*             Enemy                          ( CPF_Parm )

void ANetherObjective_KillBoss::OnBossDeathNotifyEvent ( class ANPawnEnemy* Enemy )
{
	static UFunction* pFnOnBossDeathNotifyEvent = NULL;

	if ( ! pFnOnBossDeathNotifyEvent )
		pFnOnBossDeathNotifyEvent = (UFunction*) UObject::GObjObjects()->Data[ 77142 ];

	ANetherObjective_KillBoss_execOnBossDeathNotifyEvent_Parms OnBossDeathNotifyEvent_Parms;
	OnBossDeathNotifyEvent_Parms.Enemy = Enemy;

	this->ProcessEvent ( pFnOnBossDeathNotifyEvent, &OnBossDeathNotifyEvent_Parms, NULL );
};

// Function NetherGame.NetherObjective_KillBoss.OnObjectiveEnded
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasCompleted                  ( CPF_Parm )

void ANetherObjective_KillBoss::OnObjectiveEnded ( unsigned long bWasCompleted )
{
	static UFunction* pFnOnObjectiveEnded = NULL;

	if ( ! pFnOnObjectiveEnded )
		pFnOnObjectiveEnded = (UFunction*) UObject::GObjObjects()->Data[ 77140 ];

	ANetherObjective_KillBoss_execOnObjectiveEnded_Parms OnObjectiveEnded_Parms;
	OnObjectiveEnded_Parms.bWasCompleted = bWasCompleted;

	this->ProcessEvent ( pFnOnObjectiveEnded, &OnObjectiveEnded_Parms, NULL );
};

// Function NetherGame.NetherObjective_KillBoss.UnTouched
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherObjective_KillBoss::UnTouched ( class AActor* Other )
{
	static UFunction* pFnUnTouched = NULL;

	if ( ! pFnUnTouched )
		pFnUnTouched = (UFunction*) UObject::GObjObjects()->Data[ 77137 ];

	ANetherObjective_KillBoss_execUnTouched_Parms UnTouched_Parms;
	UnTouched_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouched, &UnTouched_Parms, NULL );
};

// Function NetherGame.NetherObjective_KillBoss.InitObjective
// [0x00020002] 
// Parameters infos:

void ANetherObjective_KillBoss::InitObjective ( )
{
	static UFunction* pFnInitObjective = NULL;

	if ( ! pFnInitObjective )
		pFnInitObjective = (UFunction*) UObject::GObjObjects()->Data[ 77136 ];

	ANetherObjective_KillBoss_execInitObjective_Parms InitObjective_Parms;

	this->ProcessEvent ( pFnInitObjective, &InitObjective_Parms, NULL );
};

// Function NetherGame.NetherObjective_LootDrop.GetPercentCompleteString
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANetherObjective_LootDrop::GetPercentCompleteString ( )
{
	static UFunction* pFnGetPercentCompleteString = NULL;

	if ( ! pFnGetPercentCompleteString )
		pFnGetPercentCompleteString = (UFunction*) UObject::GObjObjects()->Data[ 77187 ];

	ANetherObjective_LootDrop_execGetPercentCompleteString_Parms GetPercentCompleteString_Parms;

	this->ProcessEvent ( pFnGetPercentCompleteString, &GetPercentCompleteString_Parms, NULL );

	return GetPercentCompleteString_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective_LootDrop.PickItemByChance
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ANetherObjective_LootDrop::PickItemByChance ( )
{
	static UFunction* pFnPickItemByChance = NULL;

	if ( ! pFnPickItemByChance )
		pFnPickItemByChance = (UFunction*) UObject::GObjObjects()->Data[ 77179 ];

	ANetherObjective_LootDrop_execPickItemByChance_Parms PickItemByChance_Parms;

	this->ProcessEvent ( pFnPickItemByChance, &PickItemByChance_Parms, NULL );

	return PickItemByChance_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective_LootDrop.SpawnLootBatch
// [0x00020002] 
// Parameters infos:

void ANetherObjective_LootDrop::SpawnLootBatch ( )
{
	static UFunction* pFnSpawnLootBatch = NULL;

	if ( ! pFnSpawnLootBatch )
		pFnSpawnLootBatch = (UFunction*) UObject::GObjObjects()->Data[ 77174 ];

	ANetherObjective_LootDrop_execSpawnLootBatch_Parms SpawnLootBatch_Parms;

	this->ProcessEvent ( pFnSpawnLootBatch, &SpawnLootBatch_Parms, NULL );
};

// Function NetherGame.NetherObjective_LootDrop.InitObjective
// [0x00020002] 
// Parameters infos:

void ANetherObjective_LootDrop::InitObjective ( )
{
	static UFunction* pFnInitObjective = NULL;

	if ( ! pFnInitObjective )
		pFnInitObjective = (UFunction*) UObject::GObjObjects()->Data[ 77172 ];

	ANetherObjective_LootDrop_execInitObjective_Parms InitObjective_Parms;

	this->ProcessEvent ( pFnInitObjective, &InitObjective_Parms, NULL );
};

// Function NetherGame.NLootDropPoint.StartSpawn
// [0x00020102] 
// Parameters infos:

void ANLootDropPoint::StartSpawn ( )
{
	static UFunction* pFnStartSpawn = NULL;

	if ( ! pFnStartSpawn )
		pFnStartSpawn = (UFunction*) UObject::GObjObjects()->Data[ 79296 ];

	ANLootDropPoint_execStartSpawn_Parms StartSpawn_Parms;

	this->ProcessEvent ( pFnStartSpawn, &StartSpawn_Parms, NULL );
};

// Function NetherGame.NLootDropPoint.SpawnHelicopterParticle
// [0x00020102] 
// Parameters infos:

void ANLootDropPoint::SpawnHelicopterParticle ( )
{
	static UFunction* pFnSpawnHelicopterParticle = NULL;

	if ( ! pFnSpawnHelicopterParticle )
		pFnSpawnHelicopterParticle = (UFunction*) UObject::GObjObjects()->Data[ 79295 ];

	ANLootDropPoint_execSpawnHelicopterParticle_Parms SpawnHelicopterParticle_Parms;

	this->ProcessEvent ( pFnSpawnHelicopterParticle, &SpawnHelicopterParticle_Parms, NULL );
};

// Function NetherGame.NLootDropPoint.GetSpawnVelocityVector
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ANLootDropPoint::GetSpawnVelocityVector ( )
{
	static UFunction* pFnGetSpawnVelocityVector = NULL;

	if ( ! pFnGetSpawnVelocityVector )
		pFnGetSpawnVelocityVector = (UFunction*) UObject::GObjObjects()->Data[ 77180 ];

	ANLootDropPoint_execGetSpawnVelocityVector_Parms GetSpawnVelocityVector_Parms;

	this->ProcessEvent ( pFnGetSpawnVelocityVector, &GetSpawnVelocityVector_Parms, NULL );

	return GetSpawnVelocityVector_Parms.ReturnValue;
};

// Function NetherGame.NLootDropPoint.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANLootDropPoint::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 79292 ];

	ANLootDropPoint_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.DebugWin
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::DebugWin ( )
{
	static UFunction* pFnDebugWin = NULL;

	if ( ! pFnDebugWin )
		pFnDebugWin = (UFunction*) UObject::GObjObjects()->Data[ 77241 ];

	ANetherObjective_SafeZoneRepair_execDebugWin_Parms DebugWin_Parms;

	this->ProcessEvent ( pFnDebugWin, &DebugWin_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.TryActivate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherObjective_SafeZoneRepair::TryActivate ( )
{
	static UFunction* pFnTryActivate = NULL;

	if ( ! pFnTryActivate )
		pFnTryActivate = (UFunction*) UObject::GObjObjects()->Data[ 77239 ];

	ANetherObjective_SafeZoneRepair_execTryActivate_Parms TryActivate_Parms;

	this->ProcessEvent ( pFnTryActivate, &TryActivate_Parms, NULL );

	return TryActivate_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective_SafeZoneRepair.GoToActive
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::GoToActive ( )
{
	static UFunction* pFnGoToActive = NULL;

	if ( ! pFnGoToActive )
		pFnGoToActive = (UFunction*) UObject::GObjObjects()->Data[ 77238 ];

	ANetherObjective_SafeZoneRepair_execGoToActive_Parms GoToActive_Parms;

	this->ProcessEvent ( pFnGoToActive, &GoToActive_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.ImpendingAttack
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::ImpendingAttack ( )
{
	static UFunction* pFnImpendingAttack = NULL;

	if ( ! pFnImpendingAttack )
		pFnImpendingAttack = (UFunction*) UObject::GObjObjects()->Data[ 77237 ];

	ANetherObjective_SafeZoneRepair_execImpendingAttack_Parms ImpendingAttack_Parms;

	this->ProcessEvent ( pFnImpendingAttack, &ImpendingAttack_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.AreAllObjsRepaired
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANetherObjective_SafeZoneRepair::AreAllObjsRepaired ( )
{
	static UFunction* pFnAreAllObjsRepaired = NULL;

	if ( ! pFnAreAllObjsRepaired )
		pFnAreAllObjsRepaired = (UFunction*) UObject::GObjObjects()->Data[ 77235 ];

	ANetherObjective_SafeZoneRepair_execAreAllObjsRepaired_Parms AreAllObjsRepaired_Parms;

	this->ProcessEvent ( pFnAreAllObjsRepaired, &AreAllObjsRepaired_Parms, NULL );

	return AreAllObjsRepaired_Parms.ReturnValue;
};

// Function NetherGame.NetherObjective_SafeZoneRepair.DisableAllObjects
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::DisableAllObjects ( )
{
	static UFunction* pFnDisableAllObjects = NULL;

	if ( ! pFnDisableAllObjects )
		pFnDisableAllObjects = (UFunction*) UObject::GObjObjects()->Data[ 77232 ];

	ANetherObjective_SafeZoneRepair_execDisableAllObjects_Parms DisableAllObjects_Parms;

	this->ProcessEvent ( pFnDisableAllObjects, &DisableAllObjects_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.RepairAllObjects
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::RepairAllObjects ( )
{
	static UFunction* pFnRepairAllObjects = NULL;

	if ( ! pFnRepairAllObjects )
		pFnRepairAllObjects = (UFunction*) UObject::GObjObjects()->Data[ 77230 ];

	ANetherObjective_SafeZoneRepair_execRepairAllObjects_Parms RepairAllObjects_Parms;

	this->ProcessEvent ( pFnRepairAllObjects, &RepairAllObjects_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.ResetAllObjects
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::ResetAllObjects ( )
{
	static UFunction* pFnResetAllObjects = NULL;

	if ( ! pFnResetAllObjects )
		pFnResetAllObjects = (UFunction*) UObject::GObjObjects()->Data[ 77228 ];

	ANetherObjective_SafeZoneRepair_execResetAllObjects_Parms ResetAllObjects_Parms;

	this->ProcessEvent ( pFnResetAllObjects, &ResetAllObjects_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.OnObjectiveEnded
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasCompleted                  ( CPF_Parm )

void ANetherObjective_SafeZoneRepair::OnObjectiveEnded ( unsigned long bWasCompleted )
{
	static UFunction* pFnOnObjectiveEnded = NULL;

	if ( ! pFnOnObjectiveEnded )
		pFnOnObjectiveEnded = (UFunction*) UObject::GObjObjects()->Data[ 77224 ];

	ANetherObjective_SafeZoneRepair_execOnObjectiveEnded_Parms OnObjectiveEnded_Parms;
	OnObjectiveEnded_Parms.bWasCompleted = bWasCompleted;

	this->ProcessEvent ( pFnOnObjectiveEnded, &OnObjectiveEnded_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.UnTouched
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANetherObjective_SafeZoneRepair::UnTouched ( class AActor* Other )
{
	static UFunction* pFnUnTouched = NULL;

	if ( ! pFnUnTouched )
		pFnUnTouched = (UFunction*) UObject::GObjObjects()->Data[ 77221 ];

	ANetherObjective_SafeZoneRepair_execUnTouched_Parms UnTouched_Parms;
	UnTouched_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouched, &UnTouched_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.Touched
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANetherObjective_SafeZoneRepair::Touched ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouched = NULL;

	if ( ! pFnTouched )
		pFnTouched = (UFunction*) UObject::GObjObjects()->Data[ 77216 ];

	ANetherObjective_SafeZoneRepair_execTouched_Parms Touched_Parms;
	Touched_Parms.Other = Other;
	Touched_Parms.OtherComp = OtherComp;
	memcpy ( &Touched_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touched_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouched, &Touched_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.SoundBoxRepaired
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::SoundBoxRepaired ( )
{
	static UFunction* pFnSoundBoxRepaired = NULL;

	if ( ! pFnSoundBoxRepaired )
		pFnSoundBoxRepaired = (UFunction*) UObject::GObjObjects()->Data[ 77215 ];

	ANetherObjective_SafeZoneRepair_execSoundBoxRepaired_Parms SoundBoxRepaired_Parms;

	this->ProcessEvent ( pFnSoundBoxRepaired, &SoundBoxRepaired_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.InitObjective
// [0x00020002] 
// Parameters infos:

void ANetherObjective_SafeZoneRepair::InitObjective ( )
{
	static UFunction* pFnInitObjective = NULL;

	if ( ! pFnInitObjective )
		pFnInitObjective = (UFunction*) UObject::GObjObjects()->Data[ 77211 ];

	ANetherObjective_SafeZoneRepair_execInitObjective_Parms InitObjective_Parms;

	this->ProcessEvent ( pFnInitObjective, &InitObjective_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANetherObjective_SafeZoneRepair::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 77210 ];

	ANetherObjective_SafeZoneRepair_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function NetherGame.NetherObjective_SafeZoneRepair.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ANetherObjective_SafeZoneRepair::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 77208 ];

	ANetherObjective_SafeZoneRepair_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function NetherGame.NetherObjective_SurgeRandomized.OnObjectiveEnded
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasCompleted                  ( CPF_Parm )

void ANetherObjective_SurgeRandomized::OnObjectiveEnded ( unsigned long bWasCompleted )
{
	static UFunction* pFnOnObjectiveEnded = NULL;

	if ( ! pFnOnObjectiveEnded )
		pFnOnObjectiveEnded = (UFunction*) UObject::GObjObjects()->Data[ 77263 ];

	ANetherObjective_SurgeRandomized_execOnObjectiveEnded_Parms OnObjectiveEnded_Parms;
	OnObjectiveEnded_Parms.bWasCompleted = bWasCompleted;

	this->ProcessEvent ( pFnOnObjectiveEnded, &OnObjectiveEnded_Parms, NULL );
};

// Function NetherGame.NetherObjective_SurgeRandomized.PickRandomVolume
// [0x00820002] 
// Parameters infos:

void ANetherObjective_SurgeRandomized::PickRandomVolume ( )
{
	static UFunction* pFnPickRandomVolume = NULL;

	if ( ! pFnPickRandomVolume )
		pFnPickRandomVolume = (UFunction*) UObject::GObjObjects()->Data[ 77260 ];

	ANetherObjective_SurgeRandomized_execPickRandomVolume_Parms PickRandomVolume_Parms;

	this->ProcessEvent ( pFnPickRandomVolume, &PickRandomVolume_Parms, NULL );
};

// Function NetherGame.NetherThirdPersonCamera.UpdateCamera
// [0x00C20002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// class AGamePlayerCamera*       CameraActor                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FTViewTarget            OutVT                          ( CPF_Parm | CPF_OutParm )

void UNetherThirdPersonCamera::UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = (UFunction*) UObject::GObjObjects()->Data[ 78992 ];

	UNetherThirdPersonCamera_execUpdateCamera_Parms UpdateCamera_Parms;
	UpdateCamera_Parms.P = P;
	UpdateCamera_Parms.CameraActor = CameraActor;
	UpdateCamera_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );

	if ( OutVT )
		memcpy ( OutVT, &UpdateCamera_Parms.OutVT, 0x38 );
};

// Function NetherGame.NetherThirdPersonCamera.FindBestCameraMode
// [0x00020002] 
// Parameters infos:
// class UGameThirdPersonCameraMode* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   inPawn                         ( CPF_Parm )

class UGameThirdPersonCameraMode* UNetherThirdPersonCamera::FindBestCameraMode ( class APawn* inPawn )
{
	static UFunction* pFnFindBestCameraMode = NULL;

	if ( ! pFnFindBestCameraMode )
		pFnFindBestCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 78988 ];

	UNetherThirdPersonCamera_execFindBestCameraMode_Parms FindBestCameraMode_Parms;
	FindBestCameraMode_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnFindBestCameraMode, &FindBestCameraMode_Parms, NULL );

	return FindBestCameraMode_Parms.ReturnValue;
};

// Function NetherGame.NetherThirdPersonCamera.Init
// [0x00020002] 
// Parameters infos:

void UNetherThirdPersonCamera::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 78987 ];

	UNetherThirdPersonCamera_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function NetherGame.NetherServerDocument_Test.OnDocumentUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ANetherServerDocument_Test::eventOnDocumentUpdate ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDocumentUpdate = NULL;

	if ( ! pFnOnDocumentUpdate )
		pFnOnDocumentUpdate = (UFunction*) UObject::GObjObjects()->Data[ 78386 ];

	ANetherServerDocument_Test_eventOnDocumentUpdate_Parms OnDocumentUpdate_Parms;
	OnDocumentUpdate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDocumentUpdate, &OnDocumentUpdate_Parms, NULL );
};

// Function NetherGame.NetherThirdPersonCameraMode_Ironsight.AdjustViewOffset
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Offset                         ( CPF_Parm )

struct FVector UNetherThirdPersonCameraMode_Ironsight::eventAdjustViewOffset ( class APawn* P, struct FVector Offset )
{
	static UFunction* pFnAdjustViewOffset = NULL;

	if ( ! pFnAdjustViewOffset )
		pFnAdjustViewOffset = (UFunction*) UObject::GObjObjects()->Data[ 79020 ];

	UNetherThirdPersonCameraMode_Ironsight_eventAdjustViewOffset_Parms AdjustViewOffset_Parms;
	AdjustViewOffset_Parms.P = P;
	memcpy ( &AdjustViewOffset_Parms.Offset, &Offset, 0xC );

	this->ProcessEvent ( pFnAdjustViewOffset, &AdjustViewOffset_Parms, NULL );

	return AdjustViewOffset_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject_Note.IsValidUse
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANInteractiveObject_Note::IsValidUse ( )
{
	static UFunction* pFnIsValidUse = NULL;

	if ( ! pFnIsValidUse )
		pFnIsValidUse = (UFunction*) UObject::GObjObjects()->Data[ 79263 ];

	ANInteractiveObject_Note_execIsValidUse_Parms IsValidUse_Parms;

	this->ProcessEvent ( pFnIsValidUse, &IsValidUse_Parms, NULL );

	return IsValidUse_Parms.ReturnValue;
};

// Function NetherGame.NInteractiveObject_Note.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ANInteractiveObject_Note::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 79261 ];

	ANInteractiveObject_Note_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Note.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ANInteractiveObject_Note::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 79256 ];

	ANInteractiveObject_Note_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Note.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANInteractiveObject_Note::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 79254 ];

	ANInteractiveObject_Note_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Note.ClientClearMesh
// [0x010201C2] 
// Parameters infos:

void ANInteractiveObject_Note::ClientClearMesh ( )
{
	static UFunction* pFnClientClearMesh = NULL;

	if ( ! pFnClientClearMesh )
		pFnClientClearMesh = (UFunction*) UObject::GObjObjects()->Data[ 79253 ];

	ANInteractiveObject_Note_execClientClearMesh_Parms ClientClearMesh_Parms;

	this->ProcessEvent ( pFnClientClearMesh, &ClientClearMesh_Parms, NULL );
};

// Function NetherGame.NInteractiveObject_Note.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ANInteractiveObject_Note::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 79252 ];

	ANInteractiveObject_Note_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function NetherGame.NSeqAction_FindDayNightManager.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNSeqAction_FindDayNightManager::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 80480 ];

	UNSeqAction_FindDayNightManager_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function NetherGame.NThrownObject_AggroBomb.ExplosionFX
// [0x00820102] 
// Parameters infos:

void ANThrownObject_AggroBomb::ExplosionFX ( )
{
	static UFunction* pFnExplosionFX = NULL;

	if ( ! pFnExplosionFX )
		pFnExplosionFX = (UFunction*) UObject::GObjObjects()->Data[ 80818 ];

	ANThrownObject_AggroBomb_execExplosionFX_Parms ExplosionFX_Parms;

	this->ProcessEvent ( pFnExplosionFX, &ExplosionFX_Parms, NULL );
};

// Function NetherGame.NThrownObject_AggroBomb.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANThrownObject_AggroBomb::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 80815 ];

	ANThrownObject_AggroBomb_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NThrownObject_AggroBomb.AreaEffect
// [0x00020002] 
// Parameters infos:
// struct FHitPawn                InHitPawn                      ( CPF_Parm )

void ANThrownObject_AggroBomb::AreaEffect ( struct FHitPawn InHitPawn )
{
	static UFunction* pFnAreaEffect = NULL;

	if ( ! pFnAreaEffect )
		pFnAreaEffect = (UFunction*) UObject::GObjObjects()->Data[ 80813 ];

	ANThrownObject_AggroBomb_execAreaEffect_Parms AreaEffect_Parms;
	memcpy ( &AreaEffect_Parms.InHitPawn, &InHitPawn, 0xC );

	this->ProcessEvent ( pFnAreaEffect, &AreaEffect_Parms, NULL );
};

// Function NetherGame.NThrownObject_Flare.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANThrownObject_Flare::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 80842 ];

	ANThrownObject_Flare_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function NetherGame.NThrownObject_Flare.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANThrownObject_Flare::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 80839 ];

	ANThrownObject_Flare_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NThrownObject_Flare.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANThrownObject_Flare::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 80838 ];

	ANThrownObject_Flare_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function NetherGame.NThrownObject_Flashbang.AreaEffect
// [0x00820002] 
// Parameters infos:
// struct FHitPawn                InHitPawn                      ( CPF_Parm )

void ANThrownObject_Flashbang::AreaEffect ( struct FHitPawn InHitPawn )
{
	static UFunction* pFnAreaEffect = NULL;

	if ( ! pFnAreaEffect )
		pFnAreaEffect = (UFunction*) UObject::GObjObjects()->Data[ 80854 ];

	ANThrownObject_Flashbang_execAreaEffect_Parms AreaEffect_Parms;
	memcpy ( &AreaEffect_Parms.InHitPawn, &InHitPawn, 0xC );

	this->ProcessEvent ( pFnAreaEffect, &AreaEffect_Parms, NULL );
};

// Function NetherGame.NThrownObject_FragGrenade.AreaEffect
// [0x00020002] 
// Parameters infos:
// struct FHitPawn                InHitPawn                      ( CPF_Parm )

void ANThrownObject_FragGrenade::AreaEffect ( struct FHitPawn InHitPawn )
{
	static UFunction* pFnAreaEffect = NULL;

	if ( ! pFnAreaEffect )
		pFnAreaEffect = (UFunction*) UObject::GObjObjects()->Data[ 80868 ];

	ANThrownObject_FragGrenade_execAreaEffect_Parms AreaEffect_Parms;
	memcpy ( &AreaEffect_Parms.InHitPawn, &InHitPawn, 0xC );

	this->ProcessEvent ( pFnAreaEffect, &AreaEffect_Parms, NULL );
};

// Function NetherGame.NThrownObject_PortableAntiNetherDevice.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANThrownObject_PortableAntiNetherDevice::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 80889 ];

	ANThrownObject_PortableAntiNetherDevice_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function NetherGame.NThrownObject_PortableAntiNetherDevice.ExplosionFX
// [0x00020102] 
// Parameters infos:

void ANThrownObject_PortableAntiNetherDevice::ExplosionFX ( )
{
	static UFunction* pFnExplosionFX = NULL;

	if ( ! pFnExplosionFX )
		pFnExplosionFX = (UFunction*) UObject::GObjObjects()->Data[ 80888 ];

	ANThrownObject_PortableAntiNetherDevice_execExplosionFX_Parms ExplosionFX_Parms;

	this->ProcessEvent ( pFnExplosionFX, &ExplosionFX_Parms, NULL );
};

// Function NetherGame.NThrownObject_PortableAntiNetherDevice.AreaEffect
// [0x00020002] 
// Parameters infos:
// struct FHitPawn                InHitPawn                      ( CPF_Parm )

void ANThrownObject_PortableAntiNetherDevice::AreaEffect ( struct FHitPawn InHitPawn )
{
	static UFunction* pFnAreaEffect = NULL;

	if ( ! pFnAreaEffect )
		pFnAreaEffect = (UFunction*) UObject::GObjObjects()->Data[ 80885 ];

	ANThrownObject_PortableAntiNetherDevice_execAreaEffect_Parms AreaEffect_Parms;
	memcpy ( &AreaEffect_Parms.InHitPawn, &InHitPawn, 0xC );

	this->ProcessEvent ( pFnAreaEffect, &AreaEffect_Parms, NULL );
};

// Function NetherGame.NThrownObject_PortableAntiNetherDevice.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANThrownObject_PortableAntiNetherDevice::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 80882 ];

	ANThrownObject_PortableAntiNetherDevice_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NThrownObject_SmokeGrenade.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANThrownObject_SmokeGrenade::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 80903 ];

	ANThrownObject_SmokeGrenade_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function NetherGame.NThrownObject_SmokeGrenade.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ANThrownObject_SmokeGrenade::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 80900 ];

	ANThrownObject_SmokeGrenade_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function NetherGame.NThrownObject_SmokeGrenade.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANThrownObject_SmokeGrenade::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 80899 ];

	ANThrownObject_SmokeGrenade_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif